%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cubic-03.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Иван Иванов
%%CreationDate: 7/2/2017
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">for_wire</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-07-02T12:23:42+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-07-02T12:23:42+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-07-02T12:23:42+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Ga/5ti0csv6OvL1gQqm&#xA;2jV05ledHcsOAVPiZmoKYqw24/OW+WX9zoBNvBRr15LjiyRmT0wygRGvXl8vvxSm+m/mlBcozXGi&#xA;38OzFGiQTIxQOzJyqhVwkRajAVHSuKE38z+c7bQG9NtPvdRn4JJ6NjGkrUkcxrUM6dWFP1VOKvN9&#xA;T/5yH1CG6EVj5WaWMOAz3F2YW4l+AbisEtNiG6lqH7OKaZF5a/OWPWPRV/LmpRNOyIrwqk8IaQVU&#xA;GQmLqQR07GtKGitPQ7W4iubaK5iNYpkWSM7bq4qOlR0OKFTFXYq7FXYq7FXmv/OSP/kkvNP/ABgh&#xA;/wComLFXxV5f/LG41aOCeTWdPtYZ1jKJ6pkuC0gjYoIQBuizKzkkKPGuKsp/5UPYfVxH/iVRqSqs&#xA;00Jtv3SwPIUVufq/yrzO3Qj54qw3zH+X1xoqGT9K2N0vFmSBJGW5+BQ7BoCtVIRg4JNCtCCcVRnl&#xA;D8rLrzHFFL+ndL0/1TxW3upnW4J9P1fhThw+xRt3Ap32NFXosf8AzjBpTWIY+cK3rgNGi2FYipCU&#xA;3NwJNzKo3QNX9kjfFWCeavycvNCiu5k8waTfLaJNK9vFOy3JjhNC3pcSPiqtBzruK0xV9kf843f+&#xA;SS8rf8YJv+omXFXpWKuxV2KuxV2KvHf+cm42k8raPGu7PqIVR7mFxmFrvpHvdV2saxg+f6Hgtl5c&#xA;NwtfrsAJFVRCXbpVeXTjy7d81Bk8vk1NdCj5PKVuFYw34fgSr8o6fEKEAUZutfwysyahqz1ilV7p&#xA;z2gLevFOnIKHhYsDWtD078ThBtvhk4uhCbWPlCa4bi99bIa8eCsWetK/Zota1HTxyBk489WB0KYT&#xA;+RLdYuUep1YDfnEFXelNxI1K8h/GmR42oa039LH9S0h7IV+tQXC7/wByzMRQ0NaqOmTBty8eXi6E&#xA;PqfzmZYdRllhW5V/qwIktCHBf0LwUmhPOoIUUYITt1FM6l71XDSXN4ZxHp9+Y7sFrlyYWjItASHQ&#xA;rOV48Qd2G46DFUiE9zqGlx3Cy3F1yRVmS0AhhiUac7ArIxLvIrSHkEcjxXsVUw8+LGNc0wmNJJpZ&#xA;LZIqqPUVVldneNleOYlTwNIzX2JpiqRaf9blsjbyE3zW0SAgrDcemJLeaWn70wTRyEkk+oCAfGgx&#xA;ShdYvHl5z3LC7jim9ZZJmWWNVju7hQ7EmOyDqJF2QOeu3XFXrtrALe1hgB5CJFStKV4gDpihVxV2&#xA;KuxV2KuxV5r/AM5I/wDkkvNP/GCH/qJixV8b28KXVhaQwJb3c72sqTwQn6vcCMadAwVCVVJH5JVt&#xA;nbwHXFUVeNGDLa251GRTea2kemBN/TNrH8HJmcgKkhKn0j1Ow64qhNbihtPLc4iFpbMYFCiEtdTv&#xA;WOwVkeY8o4+CuQ3DiSTTjQ7Kp95bW4uvIFis/F7dbXUHjlnVXVHib0gFS5BgaqyKg4SRtuetCcVR&#xA;d5Zq+n3OlgBJ4DKj2Dm9UEAapcMv1dQ0hZ1UHaTgSOuwOKu8ySXCaXrUjchLxuIZzxCRhLm0WZfU&#xA;itUdVflGQvrzE/FXjuDir6g/5xu/8kl5W/4wTf8AUTLir0rFXYq7FXYq7FXjf/OTsnp+VtGk68NR&#xA;VqdOkMhzD1v0j3ur7WF4wPP9DwwwrI0aCMTyLLGtYDwccHkWjR07AD7K/TmpLyglXlt1+HVZZBZm&#xA;ib9/dJGqcwxEarWb9piXp9n2yJZT2vkP7FG+dRZRRj0/h4UWOpC15uRyapb7Y/aIwUygPUnsrhkc&#xA;09QyRykow57BRGOHLjJTr9ljldOKB+j9fuQ5/eepDyDcebMpMj8SgmGysEC+HxnDTLlv+On42WeY&#xA;WdbAqD+6FwAvH7JqnL9gKm/XavffGI3Tpx6vg+rfMvl2a/uI7y3WNpI0aORfijnZPTlULFOrLx+K&#xA;WpVvham5GdQ+hJFD631wvqbWct2l1G6yajGsdxAos1BbiqhZF9YNx4FVJGzHqFURpnlq4vniuLlJ&#xA;BEfTkaS7DISwihQ+lajh6ZAiZQ8nxj/KxVM/OPli51oWc1tPwmsi7JCxpG5fjQsCsiHjx2Dow+XU&#xA;KvPrpL7TpJbXULNpBbW37v11hkcrBaFXaP6y44/E3GqSyLVfsjYYpTq08oa5rF+95cSSWcDq8Lu5&#xA;PM+ndtKrxEqkjBwK7CFPi+y4rVQ9KxV2KuxV2KuxV2KvNf8AnJH/AMkl5p/4wQ/9RMWKviTR/NED&#xA;6Wum3cgDRwvHGl0Odu/7uZFVGjCy27N6qqxU0anxMBirJpYVfTxDIb76h62sSC2luEFiR9WiaFjd&#xA;ArG0MklAlAKlqB67lVjPmPzJYfo19I02ZpYW4o7QD6vamNVg4qYyolmcNB/eSmo6b9cVRXlDzdpE&#xA;GmjSdTL23GKaGO8HxRmKZxI0UiqrfDyqfjSRSf2RuSqzexvAbWeR5A9nNPylLPIbdop/0gZJWRX+&#xA;qbl6lvWVPFQ1BirEvNvn6xutIn0u0UzSTlWEvwtHb1jjSRIyyBd+LL+5SMf5T1OKvsf/AJxu/wDJ&#xA;JeVv+ME3/UTLir0rFXYq7FXYq7FXi/8AzlIaeUNJ/wC2gP8AkxJmJrPpHvdb2n9A97we31WC4eFi&#xA;FMySI5Ep4sOLu1Vl7050o/YbVzVGLyssJjfd5fDp+pVjneKOF5jIyoyFhdkqi8XYkcalnI26fdTI&#xA;kIIsmq+H42S+/v1uFijSpWIbEgKK8VU8UGy/Yr74iLdjx1Z703stbtZ4Y7acCMBSjKeIRuRUk70T&#xA;sTvQ/wCVvkTFxsmAg2Px+PwETczQmV5JnPo8yRz5kICZKCknwD4T25+22ABhEGqHP+zu/Yk+sarD&#xA;dUjhDFahnkYklmC8dq1NPD9QyQi5OHCY7l9U+fPzD1ny9cm10vRodSlChma4vBZgchX4ecTI9O4D&#xA;19uleje6eU6p+c352nUokXyxYRPDR4YGtLu4k5SABQGEi1Lh/h4dcU0yvy/+c3n2UwJrXlS2jM5o&#xA;rxXhjeqllb/R2jml+0hFTQV798Vpl35g/mFqflmeG003R11W6ni9RRLcm1RasyirtE8fVe7jt44o&#xA;ePa3+e/5yNdQ/V/K1ksSOrwqba6vKuAekyMsZoOpTp44pplHl789PP0qK2teVrVI68ZZYrqS3dGr&#xA;Te2kjnm2PXw8cVp7VZXIurOC5ClBPGkgRq1HNQ1DUDpXFCtirsVdirsVdirzX/nJH/ySXmn/AIwQ&#xA;/wDUTFir5W8kfkx5M1bR7PVte80XNhFdRqxt4bDkqs4BFbr1XRFqSOTovTtir0d/yH/5x+fQWaPz&#xA;XqRt4Oc31v65ZGHkq/vW4enxHDjR/wBobA4q8t/MH8ofLGgWEl9oXmK41SMRtMsctj6KBFO3+kGa&#xA;jsRvRIz707KojyB+SflvXNJtNT1/zNLpQu4/XhtIbMTs8YYqSsgm+GhWnxR4q9Xt/wDnHL8h30N+&#xA;Pm2/aEt6klz9fsVjV41NOUJTYheWx+Lr0xV5v57/ACF8qaNo17q+h+aZ71bSF51sbix9J3VF5clm&#xA;aWMOm4+JIyBXFX07/wA43f8AkkvK3/GCb/qJlxV6VirsVdirsVdirxj/AJyhj9TyrosVQvqamq8j&#xA;0FYZBmLq/pDrO1DWMHz/AEPF9N8oeWmAN/q8qfFxoIhEpr04yuXQ19s1ZkXjsuuzfwwHzv7Oab3n&#xA;k3yWY1CapOjhB6fKSKUkDrRAAdq70yFlxseu1F/SPkQxPXNFtNPjSa1u2uYpGovqRGFqEEg8WYt2&#xA;8MkDbs9PnlM0RR99p/Y+R9F4q19qsiggMQkPFQPeQs6j6cgZFwsnaGT+GA+f6E2u/I3k4Qoo1OdZ&#xA;FBCKZYZTQbmiKK9+2R4i40O0M9/SPkQxLXvLdrp9obu0vWuoQ4jbnF6RBNTTdie3hk4m3Z6fVSnL&#xA;hlGj77fQX5sF1802ZSRkkazX0iKIoZZJTu68JGDVoy+oq03zoXvkDaelBdEF1qbi1hHEhFlWIyKt&#xA;ER7dZftU+FJuv2j0KqRRSR3dpaoIlaUXAhuYqCNfUbiTEFYJGGVoyd44322LdlWU/nT6MWsaXJMC&#xA;UltpaMaFVELqXZVJWrr6oI39+2Khiuhkx3MyoxMfpNHJIzxPIZjG7SepLMr+q9GFUXiPkcVSXUWd&#xA;IA5EhuJ1VYrcGixylQjtBG7KY5By+JDXrXYUOKvp2CJIYY4UrwjUItetFFBihfirsVdirsVdirzX&#xA;/nJH/wAkl5p/4wQ/9RMWKvnXytZyal5f8tJA0q3Atl9OZ+YLCOMoUjYlyAheo9IIP5nBNMVRw4fV&#xA;Xn5cI9S/SggmVlQ+m95ArJ66GMV4xstBedqUPRVUo/MIwH8vNRmt0Y8jB6kw5RvzkljYidVWNjsa&#xA;KJ0r3DHFU7/K2G2u/wArtJ+vAC3t5JuZAMnwtdMqvKn7asSY1jXqR9yqb6ZI7trkkszQg3VuGrJJ&#xA;+7DhPhEi8oUpU/uwpXlsxqcVS3znbNZ+Q9ajc1MdtMzqnHihc+mKID8D1eknD4GDcvDFXuf/ADjd&#xA;/wCSS8rf8YJv+omXFXpWKuxV2KuxV2KvFf8AnKeQx+UtGdeq6kCK+IhkOY2p+l13aQuAHm8mug4i&#xA;CoBWV46yCoO7qaciVam43Zx7DNbTw0CCfdf4/sHxULMSRzCRVoQZRwoRyq/gFiLdP5WyJDZkoivd&#xA;+Ov6Et81MYrK3gan945Wgp9nYgcfhpXwA9x4sQ5Gi3kT5MnRZZYYhGduKtQUAAIqGUHYU7sRt2yF&#xA;OuMgCbUTyF4srDkjKxdQHIYSUJFHJDjt2NOmNM7HDX4/YlvnV0XR7aNFAUyqy1NWClG40PdWrX2y&#xA;UBu5Gg3yE+T6m85eR7fzGYZvrDQXFuKKlFaKQA8lEgZWPwtup3AO5Vumb59EefP5b806ZczQ3cMt&#xA;xPeajbylofUeOZAzcyWUty+AEt6iyHr+7UV5KWR+WPyxljmhvNXdUETLIljGAfjDcqyNVwAW3KKW&#xA;AIqpWpGKE/8AO/kWz81R2byXMlpeae7vaTR7qDJxDhl2rsu1CKYq8ul8l+YPLt8lqunSS29xDNH6&#xA;tpWaNiy8VUlkJ4BSax05NvttilOPL35KyXFzHfa5I9rGHEyWccnOXkN0DPSi8GJoRUsDvQ4rb1/F&#xA;DsVdirsVdirsVea/85I/+SS80/8AGCH/AKiYsVfGnkz8zP0XYxaRqkJmsYxwhuFpI8amQyUMcnJX&#xA;AZjxH2VqTxY4q9Bh82+V00zTNQutQiFvGdSR7mN+U9XmSWJQADc/FVQFckUHxRKtOKrzbzl+Y41r&#xA;S4dFsLNbbTIFREkkp6xSM8lQBDxVAT9n4v8AJ4j4Qqjvy2/Nj/C0I02/sRdaUxctJDRbhC+/JeR4&#xA;Nx349KVrU7Yq9Ri87+SX0i51C31OGGzVo1LuWEn2JP3foE8njJ29PhU7tirzPzv+bn6W0e48v6Ra&#xA;tFp1wV+sXVw5eaQI4ccAKBB8IUk1JUDpvir7A/5xu/8AJJeVv+ME3/UTLir0rFXYq7FXYq7FXiP/&#xA;ADleaeTdI/7aI/5MSZRqOTgdofSPe8K0/wA5JII47xFhKleMkYPDYH4iBuDvuRufFcwDB5LL2eRZ&#xA;jv8Aj8ftRp1iwsEWb1VYvJI3CPixIJah4qQDue/0P4x4Wr8vOZqug5/j8fzWO6zrsuqSRl41jSIE&#xA;IBuxrQfE37WygYRGnYafTDGOfNONN84oYIra/Xj6ShEuE3HFRQB16n3p18MgYOJl0G5lHr0/Unc2&#xA;v6Nb8bmaYSo6qwSI1kYgU3oaVr37dMjwOFHTZJbAV934/tYn5g8yy6s4HpiOFGLIOrb+J8PbJiFO&#xA;10ukGIc7L7xzcvaOxV2KuxV2KuxV2KuxV2KuxV2KuxVIfPfk+x85eU9R8tX00tvaakipLNBx9RQk&#xA;iyDjyDL1TuMVeJ/9CS+Qf+r7qv323/VLFXf9CS+Qf+r7qv323/VLFXf9CS+Qf+r7qv323/VLFXf9&#xA;CS+Qf+r7qv323/VLFXf9CS+Qf+r7qv323/VLFXf9CS+Qf+r7qv323/VLFXtnkTyfY+TfKeneWrGa&#xA;W4tNNRkimn4+oweRpDy4hV6v2GKp9irsVdirsVdirEvzI/LfS/PulWunajdT2sVrP9YR7fhyLcGS&#xA;h5qwpRshOHE05sIyCi89H/OJ/k3/AKvGo/fB/wBU8r8AON/J8e8t/wDQqPk3/q8aj98H/VPB+XC/&#xA;yfDvLv8AoVLyd/1d9R++D/qnj+XCP5Oh3lv/AKFT8nf9XfUfvg/6p4/lgv8AJ0O8u/6FT8nf9XfU&#xA;fvg/6p4/lor/ACdDvLv+hU/J3/V31H74P+qeP5YL/J0O8vbcyHYOxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5yP+civ&#xA;yXPTzPB/yJuf+qWWeDLuY8QbH/OQ/wCTJ/6aaH/kTc/9Usl+Xn3I8SPe3/0ML+Tf/UzQ/wDIm5/6&#xA;pYfy2TuR4se93/Qwn5N/9TLD/wAibn/qlj+Wydy+LHvd/wBDDfk1/wBTND/yJuf+qWD8vPuT4ke9&#xA;af8AnIj8mB/008H/ACJuf+qWDwJ9yeMMp8o+ePKvm+ymvfLeoJqNrbyehNKiyIFk4huNJFQ/ZYZC&#xA;USOaQbT3IpdirsVdirsVQWt63peh6XcarqtwLXT7UBp52DMFDMFGyhj1YdsWePHKcuGO5LDv+V9f&#xA;lH/1McP/ACKuP+qeHhLlfydn/m/c1/yvz8ov+pjh/wCRVx/1Tw8BR/J+b+b9zX/K/fyh/wCpkh/5&#xA;FXH/AFTw+HLuR+RzfzWv+V//AJP/APUyQ/8AIq4/6p4fBl3MfyeXua/6GA/J7/qZIf8AkVcf9U8l&#xA;4E+5H5XJ3Nf9DBfk7/1MsP8AyKuP+qWH8tk7mPgT7ma6Fruk69pNvq+kXAu9OuwWt7hQyhgrFTsw&#xA;VvtKe2VSiYmi1EEGijsih2KuxV2KuxV2KuxV2KuxV2KuxV2KvzP06xtJApnaRQ1aFAKDcLudz+0O&#xA;2dFp8ECLlbq8+aQ+mmQWumeWfRDFwwpyVnkILChXoONPj8QPuzYRw4K2+/8AHV1mTUai/wBn46NS&#xA;6LoLECCeYMxpSgfieSoRuE5cWb9lsgcOPpax1WYcxH8WfOvioaNodpeRNLcvKFVmDLAquwVFDFiC&#xA;1fYUHXIY8MTzbNVq5QNRA+KdJoHkv02X1neQVH7yUIakCgGydz1pTcbZlxwafr97gHWau+QryH9q&#xA;TX+h6CwkawlnfgCzUAZAAAercOxH7RynJpMBvhMvx8vvc/Dq8wrjEfx830x/zhvH6fknXo6146sw&#xA;r40t4hnM62PDOne4JXG3v+Yjc7FXYq7FXYqwH8+v/JR+Y/8AjDF/1ER4Rzc7s3+/j+Oj4ut7TTio&#xA;M8sinjybagpQE0oG/m2zb4NNhI9ZkPwD5973MMeMj1E/j5oo2miGOtCDvUB/i+Cpb/JqFzPGn01f&#xA;t7uflybTiwV+3u5/Ylt3a2Cg/V5JHIUtyoCtAAfBSNm8MxcmDEPoJP4+Drs+LGPpJP4+C+y07Tni&#xA;WW7kmVCKs0ajiBSv2vjP/C5kafTYyAZmXw/B+5GHTYiLyGVeX4P3JgdM8riEsWalD8ZkFfCtPYq2&#xA;3embIabSiP7fx5uXLSaIRsk/P8efvpLdR0jS40ka2lnqiOw5qpWqGnHl8HX5eOU5dLjF8Jl+Pk6z&#xA;V6HBEEwM9gTuBW3nt+Lfaf8Azj3/AOSc8tf8YZf+omXOW1X94Xkc31F6HmO1uxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV+cGhIPRqS4QPV/T+Kq8oqhk22986vTfT8f1Og1Z36cv+K6oqK2MlvyWKCX91X1Ff&#xA;01/vafEpKcR9A3yYGzTLJUuchv7+nx/Sn0dsBcu0bu9uKspgHpxopuiAzO1OTUQjiRv41y2nWyye&#xA;kX9XnuT6O7u359O5C+XraKXT70OgdY0flsu3qKKGrBf5KUDqfDHhpu1uQica619n9vcUbqUUj3AM&#xA;oCy825qQj8SJUFOM/GRB94wndx8EgI7cvj3H+bsfsS70VkSFnWqkBEJ+PYxJy+JhQ04V/dof14Y0&#xA;ef4/HkHL4qJr9XU/r/iIfQ//ADhySfJGuMep1Qk/TbxZy+u+t6fT/S9+zCb3Yq7FXYq7FWAfn3/5&#xA;KLzH/wAYYv8AqIjyUebm9n/38fx0fGALG3j+IonFviejoT6Q6jen2TTY5u4g8A3oUee4+n7OW2xe&#xA;5s8I6Cuu4+n9jUxqGcJEtZJzy5VABVe1fwp9GWyF71H6p9fIef2fY15D1oc5dfIfj9CjdMTYkhmZ&#xA;OIp0RAf3dSFp8Qr8sOT+7618h/D82jMf3fWvkP4fmq2YB0+Lff05mCjqWDUBHHi3felf1ZkYB+7H&#xA;ul+O/wC9OH+6Hul9/wA/lf3L5ByEi8qlOS8gUJNBMftkcgf9jXMirv8AZ/S68/stZ72L5X3f0+vP&#xA;7LUr5WW3ncirGoZwPi+KId25PToD9kZPJGgT+OXz+5o1QIhI/j6fOz3X9IfZ3/OPf/km/LP/ABhm&#xA;/wComXOR1f8AeF47L9ReiZjtbsVdirsVdirsVdirsVdirsVdirsVfmvpt6bY04B1qCCPhdSGVqqw&#xA;6fZHjnT4ZU6XPi4+rIFuLW5h5AW7cIipMxMTis3PdVID7H9mpPfwzLG7rDCUD/Fz6b/w18PjQVbz&#xA;WBISkBZ6FgkzjgFBLH93Ep4rs+538djl8IteLTVvLby593M9eX6Nwo6dqM+nl/TUNHLQSoe4Fe/0&#xA;nY7HuDlkoNmfBHLV8x+Px1808GraRdwxs7+m8cnOVZSlQGmDuVWQOvTvHuafYzHIp1/5bLAkAXY2&#xA;q/5tDlR/03f9THNQ11UT0rSrGoZppKn4xGEJFfiYbftbf5NRlU8lcna4dJZuXy+N/ivm+k/+cOv+&#xA;UH1v/tpn/qHizndf9Q9z0Gn5PfcwXIdirsVdirsVef8A5+f+Sh8x/wDGGL/qIjycObmaD++j+Oj4&#xA;jgvPTHFgQKEB160NdiDsw+Lpmzw5eHY/j9fN6yGetj+P1ogz2wjDkxcS0xDCpb4lAX93XrXxFMzB&#xA;KFX6ecvfuBW34DackKv0/wAXv3Arb8BBXd76oKqtFPVmPJjQAUr2Hw5Vky8XIfrcDPqOLYft/GzV&#xA;rqTQxmGRBJC1QR33/A/59Muw5zEcJFhhi1fAOEi4/j8fqR0eoW4QzGUbMprWj9JNtwZP2gNjTfrm&#xA;fDLGrv8AHq+P45uSNVADivr8f4v87r0235pXe6o0sTQxrxiYgsehJAA6DYdPc++VTzcQocvx+P0u&#xA;q1OtMomI5fj8dT5vuT/nHr/yTfln/jDN/wBRMuc3rP70ujyfU9EzGYOxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV+d/law0maL17y3a6CMfUQSMgAFP5QOte7DOv00ImNkW8v2hmyxNQPD8L/Hyeh6S/kKOyq2&#xA;kKQxfYwm4YqhowVwZN/A8v6Zea6PL6ka0z2yd38XDz8tvuW3mieULv1GstMaEBl/epOw6gHiEBnV&#xA;T2+Ljv2wxkQjFq9VCuOd+XD+n0k/C9kl8m6Ro19by3Go20l0Ek4BFkMS/ZDUHAMzMd9hluSZdh2p&#xA;qcuOQjjkI2O6/v2AZoE/LazgMbaGqMwAZZENw45dN6yla12qR75R13dAD2hkN+L8jwj9DFNd0jyd&#xA;c1ax0l4S24kSZgpr04j94la7dvuyfhwl0d5o9TqofXkv4f2F7N/ziCip5O19FNVXVmVSepAgjGct&#xA;2iPW91pDcLL3rMBynYq7FXYq7FXn/wCf3/koPMn/ABhi/wCoiPLMX1BytF/exfHNjZ6QlvFLc25l&#xA;LhSSZCNyte3Bfo5Z1Om0+ARBnG7rr/YPte9wYcAiDON3XX+wfamTjy8YHP1EBVDHiYyGAT7XxEj/&#xA;AIlmy4dNwn0fZ3ef7XNl+V4T6O/p3ef7Ul1ay0oW7zW0DQALVSXZhyqNhXkp/wCCzA1ODFwkxjw/&#xA;H+373T63Bh4DKEeH4/2j7V+kadoxtYZ7y3ecyKSKSFakNQgBadPc5dpNPh4RKcTK/NlotLp+ASyR&#xA;MrHf+r9adKvlQ27j9HIFQ0kBWrDav29x/wANmzjHTV9A/Hn+12oGh4D+7G3Pb9P7Ug1mw0P6vLLa&#xA;WzQuFLKBISdh3VuQ+45Rm02HhJjGjXe872jp9Nwk44mJ/rfoN/YX2X/zjz/5Jryz/wAYZv8AqJlz&#xA;h9b/AHsnkJc3ouYrF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvzw8pTlbOShBZJSyqRUVKgbkgjfpsK52&#xA;OiNwPveX7Shcx7vx+OScrI0sas68m9GQmqctzQHrHMe3cn5eFhDgGIB27x+Ocf0e9kDTxK00wpMj&#xA;QllANCqLVvhYMzClR9liviB1xIdXwEgDlv8Ab+O8X3EpX5AnDWV+u4MTxnmDSnqAii9aFigqetMb&#xA;tzO2YVOHmD9n9vzTHWp39NEkIDK6uNmIpyA+EKRx3U/Gd++GnG0sBZI7vx7/AHIWaYl3eRSYgWdE&#xA;p9oblenwk0PwsMyccerdCG1Dn+PwQ9l/5w5Yt5I1xiak6oST/wBG8Wcbrjcg93pxQe/ZhN7sVdir&#xA;sVdirz78/wD/AMk/5k/4wxf9REeW4fqDk6T+9D47sOL2lqSeIC7MKkgjY+/3EAfhnXacAwj+Px9j&#xA;3unIMI+78fjYfcuPEIrkD976xJoBSrqevEeH830nLQNr7+L7/d+n4qaoHv4vvHl+n4lDasx/RUjU&#xA;48ggIINT8QPXr9DffkdR/dH4fj+1xddL9wTy5ff+OfzVtDdTosYYBkQsWU+HInenhXpl+j/ug2dn&#xA;yB0wvcC/v/Gy71SouGeu7r1qCehpUfCP9UZk448ye9hLLXET3j8d3wSzUmUWU1KFadTtuTSoHbLc&#xA;sAMUvc6fWTHAX2l/zjx/5Jnyz/xgm/6iZc8+1399J5svRcxUOxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;+Zen6ndWbEwvRW+0h6H/AD8Rm/waiUORdbn08Z8wyK38zWrqGmX0ykLRBAA1eQoOO3TvSq5sBq4y&#xA;G/d+Pxs6qegkDtvvf4/BUdQ80Xl2jQp+5t2ryUbs1dvib5bf1yEtRbZh7PhA2d5ISw1m9sJGe1lK&#xA;cxxkTqrDwI+n55EZSG7NpYZBUgno842txb0u1eOZGVxw3B4/ync18Adsvjqo1u67+TJRl6dwk2qe&#xA;ary5BjgPow041H2yB2r2HsOnjmPm10jtHYOw0/Z8I7ncvp7/AJwzNfIuuf8AbUP/AFDxZoNWbk7n&#xA;ENn0DmK2uxV2KuxV2KvPf+cgf/JPeZf+MMX/AFER5dp/rDfpv7wPh6z1W4tfhFHiPVD867HN9gzy&#xA;ht0eiwa2WPbnHuTD9PWixxycS0i+pWLoauQft0J+nl9HhnjVRoHrv9vn+34Ob/KeMAGrO+3v8/03&#xA;8O4ovNTuLlRGxCxL9mNdh9OYs8sp7dHT6jWTyCjtEdPx+O51jrF5ZGkTcoq1MTbrl2DPLHy5MNP2&#xA;hkw/SfT3IyTXbV4mYoVcn4YxU9j36U/HNnHWQ4eW/c3ZO0oyBNUe5KLvUZ7gcCeMf8g9vE98x8mp&#xA;nMVyi6fPqZT26Pu//nHb/wAkx5Y/4wTf9RMuchr/AO+l+OjjB6NmIrsVdirsVdirsVdirsVdirsV&#xA;dirsVfOS/wDQmHb6l/3MsyR4rWeFeP8AoTXt9S/7mWTHjMfQuH/QnH/Ll/3Mcl+//FMf3bf/AFhx&#xA;/wAuX/cxx/wj8Uv7to/9Cb9/qX/cxwHx/wAUn92sP/Qmff6l/wBzLInxmQ4HqX5Sf8qr/Qt5/wAq&#xA;49L9F/Wf9M9H16fWPTXr9Y+KvDj02zHycV+psjXRnOQS7FXYq7FXYqkXnn/Cn+FNQ/xZw/w7wX9I&#xA;ep6nHj6i8a+l8f2+PTJ474vTzZ47v083i3/WHf8Ay5f9zHMv9/8AinI/fNf9Yc/8uX/cxw/4R+KY&#xA;nxWj/wBCb/8ALl/3Mcl/hP4pifEaP/Qmv/Ll/wBzHCPzX4pieNaf+hM+/wBS/wC5lkh+b8/sYG2j&#xA;/wBCY9/qX/cyyY/Oef2MC9t8h/4S/wAJad/hDh/hvg36O9P1OHD1G5U9X4/t8uua3Px8Z4/qUJ/l&#xA;SXYq7FXYq7FXYq7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:9fa32edc-9292-e943-9de1-11f1741624a0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:9fa32edc-9292-e943-9de1-11f1741624a0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:a12a68cd-f54a-f549-92c3-986d3fda22c0</stRef:instanceID>
            <stRef:documentID>xmp.did:a12a68cd-f54a-f549-92c3-986d3fda22c0</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f0cc5378-d42f-5749-a5cc-8399f5fc98f4</stEvt:instanceID>
                  <stEvt:when>2017-06-17T01:52:37+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9fa32edc-9292-e943-9de1-11f1741624a0</stEvt:instanceID>
                  <stEvt:when>2017-07-02T12:23:42+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
369.892 261.915 mo
369.891 261.915 li
369.866 261.92 li
361.121 263.463 li
352.065 265.061 li
352.054 265.063 li
352.052 265.063 li
342.712 266.711 li
342.702 266.713 li
342.7 266.713 li
333.044 268.417 li
333.043 268.417 li
333.03 268.419 li
323.052 270.18 li
323.031 270.184 li
312.705 272.006 li
312.704 272.006 li
312.699 272.006 li
301.998 273.895 li
301.997 273.895 li
290.91 275.851 li
290.904 275.852 li
279.408 277.88 li
267.483 279.985 li
267.44 280.001 li
267.383 280.023 li
267.37 280.029 li
267.331 280.063 li
267.29 280.1 li
267.278 280.114 li
267.255 280.159 li
267.231 280.211 li
267.225 280.223 li
267.225 280.228 li
267.222 280.278 li
267.215 280.325 li
268.159 294.483 li
269.085 308.382 li
269.994 322.029 li
269.994 322.029 li
269.994 322.029 li
270.887 335.432 li
271.764 348.597 li
272.627 361.529 li
273.473 374.236 li
274.305 386.724 li
275.123 398.996 li
275.927 411.06 li
275.936 411.095 li
275.952 411.155 li
275.981 411.211 li
276.015 411.256 li
276.068 411.3 li
276.097 411.324 li
284.005 415.585 li
292.193 419.995 li
300.674 424.564 li
309.465 429.301 li
318.584 434.213 li
328.049 439.311 li
337.88 444.608 li
348.099 450.113 li
358.728 455.839 li
369.795 461.8 li
369.807 461.804 li
369.947 461.839 li
369.948 461.839 li
369.948 461.839 li
369.949 461.839 li
369.949 461.839 li
369.949 461.839 li
369.95 461.839 li
370.089 461.804 li
370.102 461.8 li
381.169 455.839 li
391.798 450.113 li
402.017 444.608 li
411.848 439.311 li
421.313 434.213 li
430.432 429.301 li
439.223 424.564 li
447.704 419.995 li
455.892 415.585 li
463.8 411.324 li
463.829 411.3 li
463.881 411.256 li
463.915 411.211 li
463.945 411.155 li
463.96 411.096 li
463.97 411.06 li
464.774 398.996 li
465.591 386.724 li
466.424 374.236 li
467.27 361.529 li
468.132 348.597 li
469.01 335.432 li
469.902 322.029 li
469.902 322.029 li
469.903 322.029 li
470.812 308.382 li
471.738 294.483 li
472.681 280.325 li
472.675 280.278 li
472.672 280.228 li
472.672 280.223 li
472.666 280.211 li
472.641 280.159 li
472.618 280.114 li
472.607 280.1 li
472.566 280.063 li
472.526 280.029 li
472.515 280.023 li
472.456 280.001 li
472.414 279.985 li
460.489 277.88 li
460.487 277.88 li
460.483 277.879 li
448.991 275.852 li
448.991 275.852 li
448.986 275.851 li
437.899 273.895 li
427.2 272.007 li
427.191 272.005 li
416.861 270.183 li
416.848 270.181 li
406.865 268.419 li
406.857 268.417 li
406.853 268.417 li
397.196 266.713 li
397.195 266.713 li
397.185 266.711 li
387.846 265.063 li
387.843 265.063 li
387.832 265.061 li
378.776 263.463 li
370.031 261.92 li
369.892 261.915 li
83.1508 270.181 mo
83.1384 270.183 li
70.1667 272.472 li
56.6077 274.864 li
56.6028 274.865 li
42.432 277.365 li
42.4267 277.366 li
42.4253 277.367 li
27.5978 279.983 li
27.5925 279.984 li
27.5862 279.985 li
27.5546 279.997 li
27.5385 280.003 li
27.4887 280.021 li
27.4728 280.029 li
27.4332 280.064 li
27.3935 280.099 li
27.382 280.113 li
27.3582 280.16 li
27.3343 280.211 li
27.3284 280.223 li
27.3282 280.228 li
27.3253 280.278 li
27.3189 280.325 li
28.4958 297.982 li
29.6452 315.236 li
30.7689 332.104 li
31.868 348.597 li
32.9428 364.727 li
33.9945 380.507 li
35.0235 395.948 li
36.0305 411.06 li
36.0399 411.095 li
36.0554 411.155 li
36.0848 411.211 li
36.1184 411.256 li
36.1716 411.3 li
36.2002 411.324 li
46.1288 416.673 li
56.4989 422.259 li
67.3408 428.1 li
78.6873 434.213 li
90.5752 440.617 li
103.043 447.333 li
116.134 454.386 li
129.898 461.8 li
129.911 461.804 li
130.05 461.839 li
130.051 461.839 li
130.052 461.839 li
130.052 461.839 li
130.052 461.839 li
130.052 461.839 li
130.053 461.839 li
130.193 461.804 li
130.205 461.8 li
143.969 454.386 li
157.061 447.333 li
169.528 440.617 li
181.416 434.213 li
192.763 428.1 li
203.605 422.259 li
213.975 416.673 li
223.903 411.324 li
223.932 411.3 li
223.985 411.256 li
224.019 411.211 li
224.048 411.155 li
224.064 411.095 li
224.073 411.06 li
225.08 395.948 li
226.109 380.507 li
227.161 364.727 li
228.236 348.597 li
229.335 332.104 li
230.458 315.236 li
231.608 297.982 li
232.785 280.325 li
232.778 280.278 li
232.775 280.228 li
232.775 280.223 li
232.769 280.211 li
232.745 280.16 li
232.722 280.113 li
232.71 280.099 li
232.67 280.064 li
232.63 280.029 li
232.616 280.021 li
232.562 280.002 li
232.557 280 li
232.517 279.985 li
232.509 279.983 li
232.507 279.983 li
217.678 277.367 li
217.676 277.366 li
217.67 277.365 li
203.501 274.865 li
203.496 274.864 li
189.937 272.472 li
176.97 270.184 li
176.946 270.18 li
164.523 267.987 li
164.514 267.986 li
164.509 267.985 li
152.587 265.881 li
152.581 265.88 li
152.574 265.879 li
141.116 263.857 li
130.134 261.92 li
129.995 261.915 li
129.994 261.915 li
129.97 261.92 li
118.987 263.857 li
107.53 265.879 li
107.523 265.88 li
107.516 265.881 li
95.5948 267.985 li
95.5917 267.985 li
95.5794 267.988 li
83.1509 270.181 li
83.1508 270.181 li
129.995 38.1635 mo
129.993 38.164 li
129.972 38.1679 li
107.53 42.1273 li
107.524 42.1283 li
107.514 42.1301 li
83.1577 46.428 li
83.1325 46.4324 li
56.6068 51.1122 li
56.603 51.1129 li
27.586 56.2333 li
27.5432 56.25 li
27.4859 56.2709 li
27.4751 56.2766 li
27.433 56.312 li
27.3928 56.3488 li
27.3821 56.3611 li
27.3581 56.4081 li
27.3342 56.4592 li
27.3283 56.4713 li
27.3281 56.4758 li
27.3252 56.5264 li
27.3188 56.5739 li
29.6455 91.4847 li
31.8678 124.845 li
33.9947 156.755 li
36.0304 187.309 li
36.0396 187.344 li
36.0553 187.403 li
36.0847 187.459 li
36.1182 187.505 li
36.1714 187.549 li
36.2001 187.573 li
56.4988 198.508 li
78.6875 210.461 li
103.043 223.581 li
129.898 238.049 li
129.911 238.052 li
130.05 238.087 li
130.052 238.088 li
130.052 238.088 li
130.052 238.088 li
130.052 238.088 li
130.052 238.088 li
130.053 238.087 li
130.193 238.052 li
130.206 238.049 li
157.061 223.581 li
181.416 210.461 li
203.605 198.508 li
223.904 187.573 li
223.932 187.549 li
223.985 187.505 li
224.019 187.459 li
224.048 187.403 li
224.064 187.344 li
224.073 187.309 li
226.109 156.755 li
228.236 124.845 li
230.458 91.4847 li
232.785 56.5739 li
232.778 56.5264 li
232.776 56.4758 li
232.775 56.4713 li
232.769 56.4591 li
232.746 56.4081 li
232.722 56.3614 li
232.711 56.3483 li
232.671 56.312 li
232.63 56.2771 li
232.617 56.2706 li
232.56 56.25 li
232.518 56.2333 li
203.501 51.1131 li
203.497 51.1122 li
176.969 46.4321 li
176.947 46.4281 li
152.587 42.1296 li
152.58 42.1285 li
152.574 42.1273 li
130.132 38.1679 li
130.11 38.1638 li
130.108 38.1635 li
130.071 38.1638 li
129.995 38.1635 li
369.892 38.1633 mo
369.886 38.1641 li
369.87 38.1673 li
355.116 40.7707 li
355.104 40.7729 li
355.102 40.7732 li
339.525 43.5219 li
339.518 43.5229 li
339.513 43.5239 li
323.055 46.4273 li
323.027 46.4322 li
305.608 49.5054 li
287.125 52.7671 li
287.121 52.7679 li
287.119 52.7682 li
267.483 56.2329 li
267.44 56.2497 li
267.383 56.2703 li
267.371 56.2767 li
267.33 56.3117 li
267.29 56.3479 li
267.279 56.3611 li
267.255 56.4079 li
267.231 56.4587 li
267.225 56.471 li
267.225 56.4756 li
267.222 56.526 li
267.215 56.5735 li
268.778 80.0252 li
270.294 102.768 li
270.294 102.768 li
270.294 102.771 li
271.764 124.845 li
273.193 146.273 li
274.58 167.086 li
275.927 187.308 li
275.936 187.343 li
275.952 187.403 li
275.981 187.459 li
276.015 187.504 li
276.068 187.548 li
276.097 187.572 li
289.432 194.756 li
303.569 202.372 li
318.584 210.461 li
334.561 219.068 li
351.595 228.244 li
369.794 238.048 li
369.807 238.052 li
369.947 238.087 li
369.948 238.087 li
369.948 238.087 li
369.948 238.087 li
369.948 238.087 li
369.949 238.087 li
369.95 238.087 li
370.089 238.052 li
370.102 238.048 li
388.302 228.244 li
405.336 219.068 li
421.313 210.461 li
436.328 202.372 li
450.465 194.756 li
463.8 187.572 li
463.829 187.548 li
463.882 187.504 li
463.915 187.459 li
463.945 187.403 li
463.96 187.343 li
463.97 187.308 li
465.317 167.086 li
466.704 146.273 li
468.132 124.845 li
469.603 102.771 li
469.603 102.768 li
469.603 102.768 li
471.118 80.0252 li
472.681 56.5735 li
472.675 56.526 li
472.672 56.4756 li
472.672 56.471 li
472.666 56.4587 li
472.642 56.4079 li
472.619 56.3614 li
472.607 56.3477 li
472.567 56.3117 li
472.526 56.2768 li
472.514 56.2704 li
472.457 56.2497 li
472.414 56.2329 li
452.777 52.7682 li
452.772 52.7672 li
434.288 49.5054 li
416.867 46.4319 li
416.842 46.4275 li
400.385 43.524 li
400.377 43.5227 li
400.372 43.5219 li
384.78 40.7707 li
370.026 38.1671 li
370.009 38.1639 li
370.005 38.1633 li
369.956 38.1636 li
369.892 38.1633 li
370.273 460.972 mo
370.273 447.67 li
380.798 442.269 li
380.692 455.359 li
370.273 460.972 li
369.624 460.972 mo
359.205 455.359 li
359.098 442.269 li
369.624 447.67 li
369.624 460.972 li
130.376 460.972 mo
130.376 444.114 li
143.66 437.383 li
143.493 453.906 li
130.376 460.972 li
129.727 460.972 mo
116.61 453.906 li
116.444 437.383 li
129.727 444.114 li
129.727 460.972 li
381.343 455.008 mo
381.449 441.934 li
391.527 436.763 li
391.323 449.632 li
381.343 455.008 li
358.553 455.008 mo
348.574 449.632 li
348.369 436.763 li
358.447 441.934 li
358.553 455.008 li
144.145 453.554 mo
144.311 437.053 li
156.903 430.672 li
156.587 446.852 li
144.145 453.554 li
115.958 453.554 mo
103.517 446.852 li
103.2 430.672 li
115.792 437.053 li
115.958 453.554 li
391.977 449.279 mo
392.181 436.427 li
401.838 431.471 li
401.544 444.126 li
391.977 449.279 li
347.92 449.279 mo
338.353 444.126 li
338.059 431.471 li
347.716 436.427 li
347.92 449.279 li
370.273 446.941 mo
370.273 433.336 li
380.913 428.153 li
380.804 441.536 li
370.273 446.941 li
369.624 446.941 mo
359.092 441.536 li
358.984 428.153 li
369.624 433.336 li
369.624 446.941 li
157.242 446.498 mo
157.558 430.34 li
169.509 424.285 li
169.056 440.135 li
157.242 446.498 li
102.862 446.498 mo
91.048 440.135 li
90.595 424.285 li
102.545 430.34 li
102.862 446.498 li
402.201 443.772 mo
402.494 431.134 li
411.753 426.383 li
411.375 438.829 li
402.201 443.772 li
337.696 443.772 mo
328.521 438.829 li
328.144 426.383 li
337.403 431.134 li
337.696 443.772 li
130.376 443.387 mo
130.376 426.058 li
143.839 419.677 li
143.667 436.652 li
130.376 443.387 li
129.727 443.387 mo
116.437 436.652 li
116.265 419.677 li
129.727 426.058 li
129.727 443.387 li
381.455 441.202 mo
381.564 427.836 li
391.747 422.875 li
391.539 436.027 li
381.455 441.202 li
358.441 441.202 mo
348.358 436.027 li
348.149 422.875 li
358.333 427.836 li
358.441 441.202 li
169.715 439.779 mo
170.167 423.952 li
181.52 418.199 li
180.945 433.73 li
169.715 439.779 li
90.389 439.779 mo
79.1582 433.73 li
78.584 418.199 li
89.9365 423.952 li
90.389 439.779 li
412.035 438.473 mo
412.412 426.044 li
421.295 421.486 li
420.842 433.73 li
412.035 438.473 li
327.862 438.473 mo
319.055 433.73 li
318.602 421.486 li
327.485 426.044 li
327.862 438.473 li
144.319 436.322 mo
144.49 419.369 li
157.243 413.325 li
156.918 429.938 li
144.319 436.322 li
115.785 436.322 mo
103.186 429.938 li
102.86 413.325 li
115.613 419.369 li
115.785 436.322 li
392.193 435.692 mo
392.401 422.557 li
402.155 417.805 li
401.855 430.733 li
392.193 435.692 li
347.704 435.692 mo
338.042 430.733 li
337.742 417.805 li
347.496 422.557 li
347.704 435.692 li
421.504 433.373 mo
421.956 421.147 li
430.485 416.77 li
429.962 428.817 li
421.504 433.373 li
318.393 433.373 mo
309.935 428.817 li
309.412 416.77 li
317.941 421.147 li
318.393 433.373 li
181.607 433.373 mo
182.181 417.864 li
192.978 412.393 li
192.293 427.616 li
181.607 433.373 li
78.4965 433.373 mo
67.8103 427.616 li
67.1252 412.393 li
77.9229 417.864 li
78.4965 433.373 li
370.273 432.616 mo
370.273 418.701 li
381.03 413.747 li
380.919 427.43 li
370.273 432.616 li
369.624 432.616 mo
358.978 427.43 li
358.867 413.747 li
369.624 418.701 li
369.624 432.616 li
402.512 430.396 mo
402.811 417.486 li
412.16 412.932 li
411.775 425.642 li
402.512 430.396 li
337.385 430.396 mo
328.122 425.642 li
327.737 412.932 li
337.086 417.486 li
337.385 430.396 li
157.573 429.606 mo
157.898 413.015 li
169.994 407.283 li
169.53 423.547 li
157.573 429.606 li
102.531 429.606 mo
90.5738 423.547 li
90.1095 407.283 li
102.206 413.015 li
102.531 429.606 li
430.626 428.459 mo
431.149 416.429 li
439.342 412.224 li
438.754 424.08 li
430.626 428.459 li
309.271 428.459 mo
301.143 424.08 li
300.555 412.224 li
308.748 416.429 li
309.271 428.459 li
192.959 427.258 mo
193.643 412.056 li
203.922 406.847 li
203.137 421.774 li
192.959 427.258 li
67.1451 427.258 mo
56.9671 421.774 li
56.1821 406.847 li
66.461 412.056 li
67.1451 427.258 li
381.57 427.113 mo
381.681 413.447 li
391.973 408.707 li
391.759 422.149 li
381.57 427.113 li
358.327 427.113 mo
348.138 422.149 li
347.924 408.707 li
358.216 413.447 li
358.327 427.113 li
130.376 425.34 mo
130.376 407.519 li
144.022 401.512 li
143.846 418.956 li
130.376 425.34 li
129.727 425.34 mo
116.257 418.956 li
116.081 401.512 li
129.727 407.519 li
129.727 425.34 li
412.434 425.303 mo
412.819 412.612 li
421.785 408.244 li
421.323 420.743 li
412.434 425.303 li
327.463 425.303 mo
318.574 420.743 li
318.112 408.244 li
327.078 412.612 li
327.463 425.303 li
439.421 423.72 mo
440.009 411.882 li
447.885 407.841 li
447.237 419.51 li
439.421 423.72 li
300.476 423.72 mo
292.66 419.51 li
292.012 407.841 li
299.888 411.882 li
300.476 423.72 li
170.188 423.214 mo
170.652 406.971 li
182.137 401.528 li
181.547 417.458 li
170.188 423.214 li
89.9155 423.214 mo
78.5565 417.458 li
77.9666 401.528 li
89.4517 406.971 li
89.9155 423.214 li
392.412 421.83 mo
392.626 408.407 li
402.479 403.869 li
402.172 417.076 li
392.412 421.83 li
347.484 421.83 mo
337.725 417.076 li
337.418 403.869 li
347.271 408.407 li
347.484 421.83 li
203.805 421.414 mo
204.589 406.509 li
214.384 401.546 li
213.508 416.187 li
203.805 421.414 li
56.2986 421.414 mo
46.5954 416.187 li
45.7199 401.546 li
55.5147 406.509 li
56.2986 421.414 li
421.984 420.403 mo
422.446 407.922 li
431.052 403.729 li
430.518 416.023 li
421.984 420.403 li
317.913 420.403 mo
309.379 416.023 li
308.845 403.729 li
317.451 407.922 li
317.913 420.403 li
447.906 419.149 mo
448.553 407.498 li
456.128 403.61 li
455.425 415.099 li
447.906 419.149 li
291.991 419.149 mo
284.471 415.099 li
283.768 403.61 li
291.344 407.498 li
291.991 419.149 li
144.497 418.647 mo
144.674 401.226 li
157.592 395.54 li
157.258 412.6 li
144.497 418.647 li
115.606 418.647 mo
102.846 412.6 li
102.511 395.54 li
115.43 401.225 li
115.606 418.647 li
370.273 417.987 mo
370.273 403.752 li
381.149 399.039 li
381.036 413.031 li
370.273 417.987 li
369.624 417.987 mo
358.861 413.031 li
358.747 399.039 li
369.624 403.752 li
369.624 417.987 li
182.208 417.123 mo
182.797 401.215 li
193.715 396.042 li
193.012 411.648 li
182.208 417.123 li
77.8954 417.123 mo
67.0917 411.648 li
66.3888 396.042 li
77.3064 401.215 li
77.8954 417.123 li
402.828 416.757 mo
403.135 403.567 li
412.576 399.22 li
412.182 412.201 li
402.828 416.757 li
337.069 416.757 mo
327.715 412.201 li
327.321 399.22 li
336.762 403.567 li
337.069 416.757 li
214.179 415.826 mo
215.053 401.207 li
224.395 396.473 li
223.438 410.838 li
214.179 415.826 li
45.9243 415.826 mo
36.6657 410.838 li
35.7084 396.473 li
45.0502 401.207 li
45.9243 415.826 li
431.181 415.683 mo
431.715 403.407 li
439.98 399.381 li
439.379 411.475 li
431.181 415.683 li
308.716 415.683 mo
300.518 411.475 li
299.917 399.381 li
308.182 403.407 li
308.716 415.683 li
456.097 414.737 mo
456.799 403.266 li
464.089 399.525 li
463.335 410.838 li
456.097 414.737 li
283.8 414.737 mo
276.562 410.838 li
275.808 399.525 li
283.098 403.266 li
283.8 414.737 li
381.687 412.731 mo
381.8 398.757 li
392.202 394.25 li
391.984 407.989 li
381.687 412.731 li
358.21 412.731 mo
347.913 407.989 li
347.695 394.25 li
358.096 398.757 li
358.21 412.731 li
157.912 412.29 mo
158.247 395.252 li
170.492 389.862 li
170.015 406.555 li
157.912 412.29 li
102.191 412.29 mo
90.0887 406.555 li
89.6117 389.862 li
101.857 395.252 li
102.191 412.29 li
412.841 411.88 mo
413.234 398.917 li
422.285 394.748 li
421.812 407.51 li
412.841 411.88 li
327.056 411.88 mo
318.085 407.51 li
317.612 394.748 li
326.663 398.917 li
327.056 411.88 li
193.676 411.312 mo
194.378 395.728 li
204.766 390.805 li
203.961 406.1 li
193.676 411.312 li
66.4275 411.312 mo
56.1428 406.1 li
55.3381 390.805 li
65.7255 395.728 li
66.4275 411.312 li
440.046 411.134 mo
440.645 399.056 li
448.588 395.187 li
447.926 407.09 li
440.046 411.134 li
299.851 411.134 mo
291.971 407.09 li
291.309 395.187 li
299.252 399.056 li
299.851 411.134 li
392.637 407.688 mo
392.855 393.967 li
402.81 389.653 li
402.496 403.148 li
392.637 407.688 li
347.26 407.688 mo
337.401 403.148 li
337.087 389.653 li
347.042 393.967 li
347.26 407.688 li
422.473 407.188 mo
422.945 394.445 li
431.63 390.446 li
431.084 402.993 li
422.473 407.188 li
317.424 407.188 mo
308.813 402.993 li
308.267 390.446 li
316.952 394.445 li
317.424 407.188 li
130.376 406.81 mo
130.376 388.48 li
144.211 382.87 li
144.03 400.8 li
130.376 406.81 li
129.727 406.81 mo
116.074 400.8 li
115.893 382.87 li
129.727 388.48 li
129.727 406.81 li
448.595 406.747 mo
449.255 394.862 li
456.891 391.142 li
456.174 402.857 li
448.595 406.747 li
291.302 406.747 mo
283.722 402.857 li
283.006 391.142 li
290.642 394.862 li
291.302 406.747 li
170.673 406.243 mo
171.149 389.572 li
182.769 384.458 li
182.164 400.798 li
170.673 406.243 li
89.4309 406.243 mo
77.9396 400.798 li
77.3344 384.458 li
88.9545 389.572 li
89.4309 406.243 li
204.628 405.762 mo
205.432 390.49 li
215.326 385.802 li
214.429 400.796 li
204.628 405.762 li
55.4754 405.762 mo
45.6751 400.796 li
44.778 385.802 li
54.6719 390.49 li
55.4754 405.762 li
370.273 403.045 mo
370.273 388.48 li
381.271 384.019 li
381.155 398.33 li
370.273 403.045 li
369.624 403.045 mo
358.741 398.33 li
358.625 384.019 li
369.624 388.48 li
369.624 403.045 li
403.151 402.846 mo
403.465 389.369 li
412.999 385.238 li
412.597 398.496 li
403.151 402.846 li
336.745 402.846 mo
327.3 398.496 li
326.898 385.238 li
336.432 389.369 li
336.745 402.846 li
431.747 402.67 mo
432.292 390.141 li
440.629 386.301 li
440.016 398.642 li
431.747 402.67 li
308.15 402.67 mo
299.88 398.642 li
299.268 386.301 li
307.605 390.141 li
308.15 402.67 li
456.845 402.513 mo
457.561 390.816 li
464.907 387.238 li
464.139 398.77 li
456.845 402.513 li
283.052 402.513 mo
275.758 398.77 li
274.99 387.238 li
282.336 390.816 li
283.052 402.513 li
144.681 400.513 mo
144.862 382.606 li
157.949 377.298 li
157.607 394.825 li
144.681 400.513 li
115.423 400.513 mo
102.497 394.824 li
102.154 377.298 li
115.242 382.606 li
115.423 400.513 li
182.824 400.485 mo
183.429 384.167 li
194.469 379.308 li
193.748 395.309 li
182.824 400.485 li
77.2794 400.485 mo
66.3556 395.309 li
65.6351 379.308 li
76.675 384.167 li
77.2794 400.485 li
215.098 400.457 mo
215.994 385.485 li
225.425 381.015 li
224.445 395.72 li
215.098 400.457 li
45.0053 400.457 mo
35.6582 395.72 li
34.6784 381.015 li
44.1096 385.485 li
45.0053 400.457 li
440.682 398.318 mo
441.293 385.995 li
449.303 382.307 li
448.629 394.447 li
440.682 398.318 li
299.215 398.318 mo
291.268 394.447 li
290.594 382.307 li
298.604 385.995 li
299.215 398.318 li
413.256 398.193 mo
413.656 384.953 li
422.794 380.994 li
422.312 394.022 li
413.256 398.193 li
326.641 398.193 mo
317.585 394.022 li
317.103 380.994 li
326.241 384.953 li
326.641 398.193 li
381.806 398.048 mo
381.922 383.755 li
392.436 379.492 li
392.213 393.539 li
381.806 398.048 li
358.091 398.048 mo
347.684 393.539 li
347.461 379.492 li
357.975 383.755 li
358.091 398.048 li
194.411 394.994 mo
195.131 379.016 li
205.629 374.395 li
204.804 390.069 li
194.411 394.994 li
65.6925 394.994 mo
55.2994 390.069 li
54.4749 374.395 li
64.973 379.016 li
65.6925 394.994 li
158.261 394.537 mo
158.603 377.033 li
171.002 372.005 li
170.512 389.144 li
158.261 394.537 li
101.843 394.537 mo
89.5911 389.144 li
89.1018 372.005 li
101.5 377.033 li
101.843 394.537 li
449.296 394.122 mo
449.969 382 li
457.667 378.455 li
456.937 390.4 li
449.296 394.122 li
290.601 394.122 mo
282.96 390.4 li
282.23 378.455 li
289.928 382 li
290.601 394.122 li
422.972 393.719 mo
423.454 380.708 li
432.217 376.91 li
431.661 389.718 li
422.972 393.719 li
316.925 393.719 mo
308.236 389.718 li
307.679 376.91 li
316.443 380.708 li
316.925 393.719 li
392.866 393.255 mo
393.089 379.227 li
403.147 375.148 li
402.827 388.939 li
392.866 393.255 li
347.031 393.255 mo
337.07 388.939 li
336.75 375.148 li
346.808 379.227 li
347.031 393.255 li
457.606 390.073 mo
458.336 378.147 li
465.74 374.737 li
464.957 386.494 li
457.606 390.073 li
282.291 390.073 mo
274.94 386.494 li
274.156 374.737 li
281.561 378.147 li
282.291 390.073 li
205.47 389.753 mo
206.293 374.102 li
216.288 369.703 li
215.37 385.063 li
205.47 389.753 li
54.6332 389.753 mo
44.7338 385.063 li
43.8154 369.703 li
53.8099 374.102 li
54.6332 389.753 li
432.323 389.412 mo
432.879 376.623 li
441.29 372.979 li
440.665 385.57 li
432.323 389.412 li
307.574 389.412 mo
299.232 385.57 li
298.607 372.979 li
307.018 376.623 li
307.574 389.412 li
171.169 388.854 mo
171.658 371.739 li
183.417 366.97 li
182.796 383.737 li
171.169 388.854 li
88.934 388.854 mo
77.3077 383.737 li
76.6866 366.97 li
88.4452 371.739 li
88.934 388.854 li
403.482 388.655 mo
403.801 374.883 li
413.431 370.977 li
413.02 384.522 li
403.482 388.655 li
336.415 388.655 mo
326.877 384.522 li
326.466 370.977 li
336.095 374.883 li
336.415 388.655 li
370.273 387.781 mo
370.273 372.875 li
381.396 368.68 li
381.277 383.318 li
370.273 387.781 li
369.624 387.781 mo
358.62 383.318 li
358.501 368.68 li
369.624 372.875 li
369.624 387.781 li
130.376 387.781 mo
130.376 368.92 li
144.403 363.731 li
144.218 382.168 li
130.376 387.781 li
129.727 387.781 mo
115.886 382.168 li
115.7 363.731 li
129.727 368.92 li
129.727 387.781 li
441.329 385.264 mo
441.954 372.691 li
450.031 369.192 li
449.344 381.575 li
441.329 385.264 li
298.567 385.264 mo
290.553 381.575 li
289.866 369.192 li
297.943 372.691 li
298.567 385.264 li
216.038 384.746 mo
216.955 369.409 li
226.478 365.218 li
225.475 380.274 li
216.038 384.746 li
44.0654 384.746 mo
34.629 380.274 li
33.6256 365.218 li
43.1485 369.409 li
44.0654 384.746 li
413.678 384.237 mo
414.088 370.711 li
423.314 366.97 li
422.821 380.275 li
413.678 384.237 li
326.219 384.237 mo
317.076 380.275 li
316.583 366.97 li
325.809 370.711 li
326.219 384.237 li
183.455 383.446 mo
184.075 366.703 li
195.24 362.175 li
194.501 378.584 li
183.455 383.446 li
76.6483 383.446 mo
65.6026 378.584 li
64.8641 362.175 li
76.0282 366.703 li
76.6483 383.446 li
381.928 383.054 mo
382.047 368.435 li
392.675 364.425 li
392.447 378.789 li
381.928 383.054 li
357.969 383.054 mo
347.45 378.789 li
347.221 364.425 li
357.85 368.435 li
357.969 383.054 li
144.869 381.904 mo
145.054 363.49 li
158.317 358.583 li
157.963 376.593 li
144.869 381.904 li
115.235 381.904 mo
102.14 376.593 li
101.787 358.583 li
115.05 363.49 li
115.235 381.904 li
450.01 381.268 mo
450.696 368.904 li
458.458 365.54 li
457.712 377.72 li
450.01 381.268 li
289.887 381.268 mo
282.185 377.72 li
281.439 365.54 li
289.201 368.904 li
289.887 381.268 li
423.48 379.99 mo
423.972 366.703 li
432.817 363.115 li
432.249 376.189 li
423.48 379.99 li
316.417 379.99 mo
307.648 376.189 li
307.08 363.115 li
315.925 366.703 li
316.417 379.99 li
393.1 378.524 mo
393.328 364.179 li
403.491 360.346 li
403.163 374.442 li
393.1 378.524 li
346.797 378.524 mo
336.734 374.442 li
336.406 360.346 li
346.569 364.179 li
346.797 378.524 li
195.163 378.293 mo
195.901 361.907 li
206.512 357.603 li
205.667 373.669 li
195.163 378.293 li
64.9403 378.293 mo
54.4366 373.669 li
53.5916 357.603 li
64.2029 361.907 li
64.9403 378.293 li
458.381 377.413 mo
459.125 365.25 li
466.588 362.017 li
465.789 374.001 li
458.381 377.413 li
281.516 377.413 mo
274.108 374.001 li
273.309 362.017 li
280.772 365.25 li
281.516 377.413 li
158.617 376.328 mo
158.97 358.341 li
171.524 353.696 li
171.022 371.298 li
158.617 376.328 li
101.486 376.328 mo
89.0816 371.298 li
88.5793 353.696 li
101.133 358.341 li
101.486 376.328 li
432.91 375.903 mo
433.478 362.847 li
441.964 359.406 li
441.326 372.256 li
432.91 375.903 li
306.987 375.903 mo
298.571 372.256 li
297.933 359.406 li
306.419 362.847 li
306.987 375.903 li
403.818 374.177 mo
404.145 360.1 li
413.872 356.431 li
413.452 370.269 li
403.818 374.177 li
336.079 374.177 mo
326.445 370.269 li
326.025 356.431 li
335.752 360.1 li
336.079 374.177 li
206.332 373.376 mo
207.176 357.334 li
217.273 353.24 li
216.332 368.975 li
206.332 373.376 li
53.7717 373.376 mo
43.772 368.975 li
42.8308 353.24 li
52.9279 357.334 li
53.7717 373.376 li
370.273 372.182 mo
370.273 356.926 li
381.524 353.009 li
381.402 367.985 li
370.273 372.182 li
369.624 372.182 mo
358.495 367.985 li
358.373 353.009 li
369.624 356.926 li
369.624 372.182 li
441.989 371.969 mo
442.626 359.137 li
450.773 355.833 li
450.071 368.467 li
441.989 371.969 li
297.907 371.969 mo
289.826 368.467 li
289.124 355.833 li
297.271 359.137 li
297.907 371.969 li
171.679 371.031 mo
172.18 353.454 li
184.08 349.051 li
183.443 366.26 li
171.679 371.031 li
88.4251 371.031 mo
76.6603 366.26 li
76.0235 349.051 li
87.9234 353.454 li
88.4251 371.031 li
414.109 370.003 mo
414.528 356.183 li
423.843 352.67 li
423.34 366.26 li
414.109 370.003 li
325.788 370.003 mo
316.557 366.26 li
316.054 352.67 li
325.369 356.183 li
325.788 370.003 li
216.999 368.681 mo
217.938 352.97 li
227.554 349.07 li
226.527 364.487 li
216.999 368.681 li
43.105 368.681 mo
33.5768 364.487 li
32.5495 349.07 li
42.1652 352.97 li
43.105 368.681 li
130.376 368.229 mo
130.376 348.819 li
144.602 344.075 li
144.41 363.037 li
130.376 368.229 li
129.727 368.229 mo
115.693 363.037 li
115.502 344.075 li
129.727 348.819 li
129.727 368.229 li
450.736 368.179 mo
451.437 355.564 li
459.263 352.39 li
458.503 364.813 li
450.736 368.179 li
289.16 368.179 mo
281.394 364.813 li
280.634 352.39 li
288.46 355.564 li
289.16 368.179 li
382.052 367.74 mo
382.174 352.782 li
392.919 349.041 li
392.686 363.728 li
382.052 367.74 li
357.845 367.74 mo
347.21 363.728 li
346.977 349.041 li
357.723 352.782 li
357.845 367.74 li
423.998 365.993 mo
424.501 352.422 li
433.428 349.055 li
432.848 362.403 li
423.998 365.993 li
315.899 365.993 mo
307.049 362.403 li
306.469 349.055 li
315.396 352.422 li
315.899 365.993 li
184.101 365.993 mo
184.738 348.807 li
196.029 344.63 li
195.272 361.463 li
184.101 365.993 li
76.002 365.993 mo
64.8321 361.463 li
64.074 344.63 li
75.3658 348.807 li
76.002 365.993 li
459.17 364.524 mo
459.929 352.12 li
467.451 349.07 li
466.636 361.289 li
459.17 364.524 li
280.727 364.524 mo
273.261 361.289 li
272.446 349.07 li
279.968 352.12 li
280.727 364.524 li
393.339 363.482 mo
393.572 348.814 li
403.842 345.239 li
403.507 359.647 li
393.339 363.482 li
346.558 363.482 mo
336.39 359.647 li
336.055 345.239 li
346.325 348.814 li
346.558 363.482 li
145.061 362.796 mo
145.253 343.858 li
158.693 339.377 li
158.33 357.887 li
145.061 362.796 li
115.043 362.796 mo
101.773 357.887 li
101.41 339.377 li
114.851 343.858 li
115.043 362.796 li
433.509 362.136 mo
434.088 348.806 li
442.65 345.577 li
441.999 358.692 li
433.509 362.136 li
306.388 362.136 mo
297.898 358.692 li
297.247 345.577 li
305.809 348.806 li
306.388 362.136 li
195.933 361.195 mo
196.689 344.386 li
207.417 340.417 li
206.55 356.889 li
195.933 361.195 li
64.1709 361.195 mo
53.554 356.889 li
52.6868 340.417 li
63.414 344.386 li
64.1709 361.195 li
404.161 359.4 mo
404.496 345.011 li
414.321 341.59 li
413.893 355.73 li
404.161 359.4 li
335.736 359.4 mo
326.004 355.73 li
325.576 341.59 li
335.401 345.011 li
335.736 359.4 li
442.662 358.424 mo
443.312 345.328 li
451.528 342.228 li
450.813 355.118 li
442.662 358.424 li
297.235 358.424 mo
289.084 355.118 li
288.368 342.228 li
296.586 345.328 li
297.235 358.424 li
158.984 357.645 mo
159.346 339.159 li
172.061 334.92 li
171.544 352.998 li
158.984 357.645 li
101.12 357.645 mo
88.5594 352.998 li
88.0425 334.92 li
100.757 339.159 li
101.12 357.645 li
207.213 356.62 mo
208.079 340.172 li
218.279 336.398 li
217.316 352.523 li
207.213 356.62 li
52.8902 356.62 mo
42.7879 352.523 li
41.8244 336.398 li
52.0244 340.172 li
52.8902 356.62 li
370.273 356.239 mo
370.273 340.62 li
381.654 336.995 li
381.53 352.319 li
370.273 356.239 li
369.624 356.239 mo
358.367 352.319 li
358.243 336.995 li
369.624 340.62 li
369.624 356.239 li
414.549 355.482 mo
414.976 341.362 li
424.382 338.087 li
423.869 351.968 li
414.549 355.482 li
325.348 355.482 mo
316.028 351.968 li
315.515 338.087 li
324.921 341.362 li
325.348 355.482 li
451.477 354.849 mo
452.191 341.978 li
460.082 339.002 li
459.307 351.673 li
451.477 354.849 li
288.42 354.849 mo
280.59 351.673 li
279.815 339.002 li
287.705 341.978 li
288.42 354.849 li
172.2 352.755 mo
172.716 334.701 li
184.76 330.686 li
184.106 348.35 li
172.2 352.755 li
87.9035 352.755 mo
75.9975 348.35 li
75.3434 330.686 li
87.3874 334.701 li
87.9035 352.755 li
217.981 352.253 mo
218.944 336.153 li
228.654 332.56 li
227.602 348.351 li
217.981 352.253 li
42.1224 352.253 mo
32.5016 348.351 li
31.4492 332.56 li
41.1601 336.153 li
42.1224 352.253 li
382.18 352.093 mo
382.304 336.788 li
393.168 333.328 li
392.93 348.35 li
382.18 352.093 li
357.717 352.093 mo
346.967 348.35 li
346.728 333.328 li
357.593 336.788 li
357.717 352.093 li
424.527 351.72 mo
425.039 337.858 li
434.051 334.721 li
433.459 348.35 li
424.527 351.72 li
315.37 351.72 mo
306.438 348.35 li
305.846 334.721 li
314.858 337.858 li
315.37 351.72 li
459.973 351.403 mo
460.747 338.751 li
468.329 335.892 li
467.499 348.351 li
459.973 351.403 li
279.924 351.403 mo
272.398 348.351 li
271.568 335.892 li
279.15 338.751 li
279.924 351.403 li
130.376 348.135 mo
130.376 328.15 li
144.806 323.881 li
144.609 343.389 li
130.376 348.135 li
129.727 348.135 mo
115.495 343.389 li
115.297 323.881 li
129.727 328.15 li
129.727 348.135 li
393.583 348.123 mo
393.82 333.12 li
404.2 329.814 li
403.858 344.546 li
393.583 348.123 li
346.314 348.123 mo
336.039 344.546 li
335.696 329.814 li
346.076 333.12 li
346.314 348.123 li
184.763 348.107 mo
185.417 330.467 li
196.839 326.658 li
196.061 343.927 li
184.763 348.107 li
75.3399 348.107 mo
64.0425 343.927 li
63.2651 326.658 li
74.6867 330.467 li
75.3399 348.107 li
434.118 348.102 mo
434.71 334.491 li
443.349 331.483 li
442.685 344.871 li
434.118 348.102 li
305.779 348.102 mo
297.212 344.871 li
296.547 331.483 li
305.187 334.491 li
305.779 348.102 li
443.347 344.622 mo
444.01 331.253 li
452.298 328.368 li
451.568 341.521 li
443.347 344.622 li
296.55 344.622 mo
288.329 341.521 li
287.599 328.368 li
295.887 331.253 li
296.55 344.622 li
404.512 344.318 mo
404.854 329.606 li
414.779 326.444 li
414.342 340.896 li
404.512 344.318 li
335.384 344.318 mo
325.555 340.896 li
325.118 326.444 li
335.043 329.606 li
335.384 344.318 li
196.721 343.683 mo
197.497 326.438 li
208.342 322.823 li
207.454 339.712 li
196.721 343.683 li
63.3823 343.683 mo
52.6498 339.712 li
51.7615 322.823 li
62.6062 326.438 li
63.3823 343.683 li
145.26 343.172 mo
145.457 323.689 li
159.079 319.659 li
158.706 338.689 li
145.26 343.172 li
114.844 343.172 mo
101.397 338.689 li
101.024 319.659 li
114.647 323.689 li
114.844 343.172 li
452.231 341.27 mo
452.96 328.138 li
460.917 325.367 li
460.125 338.293 li
452.231 341.27 li
287.666 341.27 mo
279.772 338.293 li
278.98 325.367 li
286.937 328.138 li
287.666 341.27 li
414.997 340.667 mo
415.435 326.235 li
424.933 323.211 li
424.408 337.391 li
414.997 340.667 li
324.899 340.667 mo
315.489 337.391 li
314.964 323.211 li
324.462 326.235 li
324.899 340.667 li
370.273 339.939 mo
370.273 323.947 li
381.787 320.628 li
381.659 336.313 li
370.273 339.939 li
369.624 339.939 mo
358.238 336.313 li
358.11 320.628 li
369.624 323.947 li
369.624 339.939 li
208.116 339.467 mo
209.003 322.602 li
219.31 319.166 li
218.322 335.692 li
208.116 339.467 li
51.9873 339.467 mo
41.782 335.692 li
40.7935 319.166 li
51.1003 322.602 li
51.9873 339.467 li
159.359 338.471 mo
159.732 319.466 li
172.611 315.656 li
172.081 334.229 li
159.359 338.471 li
100.744 338.471 mo
88.0228 334.229 li
87.4924 315.656 li
100.372 319.466 li
100.744 338.471 li
460.79 338.042 mo
461.58 325.136 li
469.223 322.475 li
468.376 335.181 li
460.79 338.042 li
279.107 338.042 mo
271.521 335.181 li
270.674 322.475 li
278.317 325.136 li
279.107 338.042 li
425.065 337.162 mo
425.59 323.002 li
434.686 320.104 li
434.081 334.023 li
425.065 337.162 li
314.832 337.162 mo
305.816 334.023 li
305.211 320.104 li
314.307 323.002 li
314.832 337.162 li
382.31 336.106 mo
382.437 320.441 li
393.424 317.275 li
393.179 332.644 li
382.31 336.106 li
357.587 336.106 mo
346.717 332.644 li
346.473 317.275 li
357.46 320.441 li
357.587 336.106 li
218.986 335.446 mo
219.973 318.945 li
229.779 315.675 li
228.702 331.852 li
218.986 335.446 li
41.1179 335.446 mo
31.402 331.852 li
30.3245 315.675 li
40.1308 318.945 li
41.1179 335.446 li
172.736 334.011 mo
173.266 315.462 li
185.457 311.855 li
184.786 329.993 li
172.736 334.011 li
87.3676 334.011 mo
75.3178 329.993 li
74.6464 311.855 li
86.838 315.462 li
87.3676 334.011 li
434.74 333.793 mo
435.344 319.894 li
444.062 317.118 li
443.384 330.784 li
434.74 333.793 li
305.157 333.793 mo
296.513 330.784 li
295.835 317.118 li
304.553 319.894 li
305.157 333.793 li
393.831 332.436 mo
394.075 317.087 li
404.566 314.064 li
404.216 329.128 li
393.831 332.436 li
346.065 332.436 mo
335.68 329.128 li
335.33 314.064 li
345.822 317.087 li
346.065 332.436 li
444.045 330.554 mo
444.722 316.907 li
453.082 314.244 li
452.337 327.667 li
444.045 330.554 li
295.852 330.554 mo
287.56 327.667 li
286.815 314.244 li
295.175 316.907 li
295.852 330.554 li
185.443 329.774 mo
186.113 311.661 li
197.668 308.243 li
196.87 325.964 li
185.443 329.774 li
74.661 329.774 mo
63.2338 325.964 li
62.4354 308.243 li
73.9905 311.661 li
74.661 329.774 li
404.87 328.92 mo
405.219 313.876 li
415.248 310.985 li
414.8 325.757 li
404.87 328.92 li
335.027 328.92 mo
325.097 325.757 li
324.649 310.985 li
334.677 313.876 li
335.027 328.92 li
130.376 327.474 mo
130.376 306.892 li
145.016 303.127 li
144.813 323.203 li
130.376 327.474 li
129.727 327.474 mo
115.29 323.203 li
115.088 303.127 li
129.727 306.892 li
129.727 327.474 li
452.999 327.437 mo
453.743 314.034 li
461.766 311.478 li
460.96 324.665 li
452.999 327.437 li
286.898 327.437 mo
278.937 324.665 li
278.131 311.478 li
286.154 314.034 li
286.898 327.437 li
197.529 325.744 mo
198.326 308.048 li
209.29 304.805 li
208.379 322.127 li
197.529 325.744 li
62.5749 325.744 mo
51.7249 322.127 li
50.814 304.805 li
61.7777 308.048 li
62.5749 325.744 li
415.456 325.548 mo
415.902 310.797 li
425.495 308.032 li
424.959 322.522 li
415.456 325.548 li
324.441 325.548 mo
314.938 322.522 li
314.402 308.032 li
323.994 310.797 li
324.441 325.548 li
461.623 324.434 mo
462.429 311.267 li
470.133 308.814 li
469.27 321.772 li
461.623 324.434 li
278.274 324.434 mo
270.627 321.772 li
269.764 308.814 li
277.468 311.267 li
278.274 324.434 li
370.273 323.272 mo
370.273 306.892 li
381.923 303.896 li
381.792 319.952 li
370.273 323.272 li
369.624 323.272 mo
358.105 319.952 li
357.974 303.896 li
369.624 306.892 li
369.624 323.272 li
145.464 323.011 mo
145.666 302.96 li
159.476 299.409 li
159.093 318.979 li
145.464 323.011 li
114.64 323.011 mo
101.011 318.979 li
100.627 299.409 li
114.437 302.96 li
114.64 323.011 li
425.615 322.313 mo
426.151 307.843 li
435.334 305.196 li
434.716 319.414 li
425.615 322.313 li
314.282 322.313 mo
305.181 319.414 li
304.563 305.196 li
313.746 307.843 li
314.282 322.313 li
209.04 321.906 mo
209.95 304.61 li
220.365 301.528 li
219.352 318.468 li
209.04 321.906 li
51.0638 321.906 mo
40.7516 318.468 li
39.7388 301.528 li
50.1541 304.61 li
51.0638 321.906 li
382.442 319.765 mo
382.573 303.729 li
393.684 300.872 li
393.434 316.597 li
382.442 319.765 li
357.455 319.765 mo
346.462 316.597 li
346.213 300.872 li
357.324 303.729 li
357.455 319.765 li
435.374 319.204 mo
435.991 305.007 li
444.789 302.472 li
444.096 316.426 li
435.374 319.204 li
304.523 319.204 mo
295.8 316.426 li
295.108 302.472 li
303.906 305.007 li
304.523 319.204 li
159.745 318.786 mo
160.128 299.241 li
173.176 295.885 li
172.631 314.974 li
159.745 318.786 li
100.359 318.786 mo
87.473 314.974 li
86.9278 295.885 li
99.9752 299.241 li
100.359 318.786 li
220.014 318.247 mo
221.026 301.332 li
230.93 298.403 li
229.826 314.976 li
220.014 318.247 li
40.089 318.247 mo
30.2778 314.976 li
29.1738 298.403 li
39.0776 301.332 li
40.089 318.247 li
394.086 316.409 mo
394.335 300.704 li
404.941 297.977 li
404.582 313.384 li
394.086 316.409 li
345.811 316.409 mo
335.315 313.384 li
334.956 297.977 li
345.562 300.704 li
345.811 316.409 li
444.756 316.216 mo
445.448 302.283 li
453.881 299.851 li
453.121 313.552 li
444.756 316.216 li
295.141 316.216 mo
286.776 313.552 li
286.015 299.851 li
294.449 302.283 li
295.141 316.216 li
173.285 314.78 mo
173.83 295.717 li
186.172 292.543 li
185.482 311.172 li
173.285 314.78 li
86.8185 314.78 mo
74.6211 311.172 li
73.9315 292.543 li
86.2741 295.717 li
86.8185 314.78 li
453.781 313.341 mo
454.541 299.661 li
462.632 297.329 li
461.809 310.784 li
453.781 313.341 li
286.116 313.341 mo
278.088 310.784 li
277.265 297.329 li
285.355 299.661 li
286.116 313.341 li
405.235 313.196 mo
405.593 297.809 li
415.726 295.203 li
415.268 310.305 li
405.235 313.196 li
334.661 313.196 mo
324.628 310.305 li
324.171 295.203 li
334.303 297.809 li
334.661 313.196 li
186.138 310.978 mo
186.827 292.375 li
198.517 289.368 li
197.699 307.557 li
186.138 310.978 li
73.9652 310.977 mo
62.4046 307.557 li
61.5859 289.368 li
73.2766 292.375 li
73.9652 310.977 li
462.471 310.573 mo
463.293 297.139 li
471.06 294.901 li
470.18 308.119 li
462.471 310.573 li
277.426 310.573 mo
269.717 308.119 li
268.837 294.901 li
276.604 297.139 li
277.426 310.573 li
415.923 310.116 mo
416.38 295.035 li
426.069 292.543 li
425.52 307.35 li
415.923 310.116 li
323.974 310.116 mo
314.376 307.35 li
313.828 292.543 li
323.517 295.035 li
323.974 310.116 li
198.357 307.363 mo
199.174 289.199 li
210.261 286.348 li
209.326 304.118 li
198.357 307.363 li
61.7469 307.363 mo
50.7779 304.118 li
49.8425 286.348 li
60.9293 289.199 li
61.7469 307.363 li
426.176 307.161 mo
426.724 292.375 li
435.995 289.99 li
435.364 304.513 li
426.176 307.161 li
313.721 307.161 mo
304.533 304.513 li
303.902 289.99 li
313.173 292.375 li
313.721 307.161 li
369.949 306.306 mo
358.975 303.484 li
369.949 300.785 li
380.922 303.484 li
369.949 306.306 li
130.052 306.306 mo
116.094 302.716 li
130.052 299.322 li
144.009 302.716 li
130.052 306.306 li
436.021 304.323 mo
436.651 289.822 li
445.53 287.538 li
444.823 301.788 li
436.021 304.323 li
303.876 304.323 mo
295.074 301.788 li
294.367 287.538 li
303.245 289.822 li
303.876 304.323 li
209.986 303.923 mo
210.92 286.179 li
221.444 283.472 li
220.406 300.84 li
209.986 303.923 li
50.1181 303.923 mo
39.6976 300.84 li
38.6592 283.472 li
49.184 286.179 li
50.1181 303.923 li
382.249 303.143 mo
371.306 300.452 li
381.726 297.89 li
392.66 300.465 li
382.249 303.143 li
357.648 303.143 mo
347.237 300.465 li
358.171 297.89 li
368.591 300.452 li
357.648 303.143 li
145.341 302.374 mo
131.422 298.988 li
144.54 295.797 li
158.441 299.005 li
145.341 302.374 li
114.762 302.374 mo
101.663 299.005 li
115.564 295.797 li
128.682 298.988 li
114.762 302.374 li
445.481 301.598 mo
446.188 287.369 li
454.696 285.181 li
453.92 299.165 li
445.481 301.598 li
294.415 301.598 mo
285.977 299.165 li
285.201 285.181 li
293.709 287.369 li
294.415 301.598 li
221.067 300.644 mo
222.104 283.303 li
232.108 280.73 li
230.976 297.713 li
221.067 300.644 li
39.0364 300.644 mo
29.1279 297.713 li
27.9958 280.73 li
37.9995 283.303 li
39.0364 300.644 li
369.949 300.118 mo
359.557 297.563 li
369.949 295.114 li
380.34 297.563 li
369.949 300.118 li
394.011 300.118 mo
383.109 297.549 li
393.009 295.114 li
403.895 297.576 li
394.011 300.118 li
345.886 300.118 mo
336.002 297.576 li
346.888 295.114 li
356.788 297.549 li
345.886 300.118 li
454.579 298.975 mo
455.355 285.011 li
463.515 282.913 li
462.674 296.642 li
454.579 298.975 li
285.317 298.975 mo
277.223 296.642 li
276.382 282.913 li
284.542 285.011 li
285.317 298.975 li
130.052 298.655 mo
116.97 295.472 li
130.052 292.454 li
143.133 295.472 li
130.052 298.655 li
159.804 298.655 mo
145.945 295.455 li
158.285 292.454 li
172.114 295.488 li
159.804 298.655 li
100.299 298.655 mo
87.9898 295.489 li
101.818 292.454 li
114.159 295.455 li
100.299 298.655 li
405.27 297.223 mo
394.417 294.768 li
403.829 292.454 li
414.659 294.808 li
405.27 297.223 li
381.722 297.223 mo
371.361 294.781 li
381.242 292.453 li
391.595 294.795 li
381.722 297.223 li
358.175 297.223 mo
348.302 294.795 li
358.655 292.453 li
368.536 294.781 li
358.175 297.223 li
334.627 297.223 mo
325.238 294.808 li
336.068 292.454 li
345.48 294.768 li
334.627 297.223 li
463.335 296.452 mo
464.175 282.743 li
472.004 280.73 li
471.106 294.213 li
463.335 296.452 li
276.562 296.452 mo
268.791 294.213 li
267.892 280.73 li
275.722 282.743 li
276.562 296.452 li
144.537 295.13 mo
131.494 292.121 li
143.815 289.277 li
156.844 292.137 li
144.537 295.13 li
115.566 295.13 mo
103.259 292.137 li
116.288 289.277 li
128.61 292.121 li
115.566 295.13 li
173.506 295.13 mo
159.719 292.105 li
171.343 289.277 li
185.084 292.153 li
173.506 295.13 li
86.5975 295.13 mo
75.0194 292.153 li
88.7611 289.277 li
100.384 292.104 li
86.5975 295.13 li
393.003 294.449 mo
382.681 292.114 li
392.081 289.899 li
402.389 292.14 li
393.003 294.449 li
369.949 294.449 mo
360.097 292.127 li
369.949 289.899 li
379.801 292.127 li
369.949 294.449 li
346.895 294.449 mo
337.508 292.14 li
347.816 289.899 li
357.216 292.114 li
346.895 294.449 li
416.057 294.448 mo
405.261 292.102 li
414.214 289.9 li
424.981 292.153 li
416.057 294.448 li
323.84 294.448 mo
314.916 292.153 li
325.683 289.9 li
334.636 292.102 li
323.84 294.448 li
381.239 291.789 mo
371.417 289.567 li
380.796 287.446 li
390.611 289.58 li
381.239 291.789 li
358.658 291.789 mo
349.286 289.58 li
359.101 287.446 li
368.48 289.567 li
358.658 291.789 li
403.82 291.788 mo
393.545 289.555 li
402.492 287.446 li
412.748 289.593 li
403.82 291.788 li
336.077 291.788 mo
327.149 289.593 li
337.405 287.446 li
346.352 289.555 li
336.077 291.788 li
158.279 291.788 mo
145.29 288.937 li
156.908 286.256 li
169.87 288.969 li
158.279 291.788 li
101.825 291.788 mo
90.2341 288.969 li
103.196 286.256 li
114.814 288.937 li
101.825 291.788 li
426.401 291.788 mo
415.669 289.542 li
424.189 287.446 li
434.888 289.605 li
426.401 291.788 li
313.496 291.788 mo
305.009 289.605 li
315.708 287.446 li
324.228 289.542 li
313.496 291.788 li
186.504 291.788 mo
172.806 288.921 li
183.762 286.256 li
197.405 288.984 li
186.504 291.788 li
130.052 291.788 mo
117.766 288.953 li
130.052 286.256 li
142.337 288.953 li
130.052 291.788 li
73.5994 291.788 mo
62.6979 288.984 li
76.3415 286.256 li
87.2978 288.921 li
73.5994 291.788 li
392.075 289.235 mo
382.292 287.108 li
391.225 285.088 li
400.996 287.133 li
392.075 289.235 li
369.949 289.235 mo
360.598 287.121 li
369.949 285.088 li
379.299 287.121 li
369.949 289.235 li
347.822 289.235 mo
338.901 287.133 li
348.672 285.088 li
357.605 287.108 li
347.822 289.235 li
414.203 289.235 mo
403.981 287.096 li
412.501 285.088 li
422.698 287.146 li
414.203 289.235 li
325.694 289.235 mo
317.199 287.146 li
327.396 285.088 li
335.916 287.096 li
325.694 289.235 li
436.329 289.235 mo
425.667 287.083 li
433.778 285.088 li
444.404 287.158 li
436.329 289.235 li
303.568 289.235 mo
295.494 287.158 li
306.119 285.088 li
314.23 287.083 li
303.568 289.235 li
171.333 288.613 mo
158.413 285.909 li
169.375 283.379 li
182.258 285.955 li
171.333 288.613 li
88.7708 288.613 mo
77.8457 285.955 li
90.7282 283.379 li
101.691 285.909 li
88.7708 288.613 li
143.812 288.613 mo
131.564 285.924 li
143.16 283.379 li
155.395 285.939 li
143.812 288.613 li
116.292 288.613 mo
104.708 285.939 li
116.944 283.379 li
128.54 285.924 li
116.292 288.613 li
198.852 288.613 mo
185.254 285.893 li
195.591 283.379 li
209.126 285.97 li
198.852 288.613 li
61.2517 288.613 mo
50.9778 285.97 li
64.5126 283.379 li
74.8496 285.893 li
61.2517 288.613 li
380.794 286.783 mo
371.474 284.756 li
380.384 282.819 li
389.699 284.769 li
380.794 286.783 li
359.103 286.783 mo
350.198 284.769 li
359.512 282.819 li
368.423 284.756 li
359.103 286.783 li
402.485 286.782 mo
392.745 284.744 li
401.257 282.819 li
410.979 284.781 li
402.485 286.782 li
337.412 286.782 mo
328.918 284.781 li
338.64 282.819 li
347.151 284.744 li
337.412 286.782 li
424.176 286.782 mo
414.014 284.732 li
422.13 282.819 li
432.263 284.793 li
424.176 286.782 li
315.721 286.782 mo
307.634 284.793 li
317.767 282.819 li
325.883 284.732 li
315.721 286.782 li
445.866 286.782 mo
435.278 284.719 li
443.004 282.819 li
453.553 284.805 li
445.866 286.782 li
294.031 286.782 mo
286.344 284.805 li
296.893 282.819 li
304.619 284.719 li
294.031 286.782 li
183.75 285.592 mo
170.91 283.025 li
181.262 280.635 li
194.055 283.085 li
183.75 285.592 li
130.052 285.592 mo
118.492 283.055 li
130.052 280.635 li
141.612 283.055 li
130.052 285.592 li
76.3539 285.592 mo
66.0488 283.085 li
78.8412 280.635 li
89.1933 283.025 li
76.3539 285.592 li
210.598 285.592 mo
197.109 283.009 li
206.867 280.635 li
220.287 283.1 li
210.598 285.592 li
156.9 285.592 mo
144.704 283.04 li
155.657 280.635 li
167.831 283.07 li
156.9 285.592 li
103.203 285.592 mo
92.2731 283.07 li
104.446 280.635 li
115.399 283.04 li
103.203 285.592 li
49.5056 285.592 mo
39.8168 283.1 li
53.2367 280.635 li
62.9951 283.009 li
49.5056 285.592 li
391.22 284.425 mo
381.936 282.482 li
390.432 280.635 li
399.704 282.506 li
391.22 284.425 li
369.949 284.425 mo
361.067 282.494 li
369.949 280.635 li
378.83 282.494 li
369.949 284.425 li
348.677 284.425 mo
340.192 282.506 li
349.465 280.635 li
357.96 282.482 li
348.677 284.425 li
412.492 284.425 mo
402.803 282.47 li
410.916 280.635 li
420.583 282.518 li
412.492 284.425 li
327.405 284.425 mo
319.314 282.518 li
328.981 280.635 li
337.094 282.47 li
327.405 284.425 li
455.033 284.424 mo
444.523 282.446 li
451.885 280.635 li
462.353 282.542 li
455.033 284.424 li
433.763 284.424 mo
423.666 282.457 li
431.402 280.635 li
441.467 282.53 li
433.763 284.424 li
306.134 284.424 mo
298.43 282.53 li
308.495 280.635 li
316.231 282.457 li
306.134 284.424 li
284.864 284.424 mo
277.544 282.542 li
288.012 280.635 li
295.374 282.446 li
284.864 284.424 li
143.156 282.716 mo
131.634 280.304 li
142.563 278.017 li
154.075 280.319 li
143.156 282.716 li
116.947 282.716 mo
106.029 280.319 li
117.541 278.017 li
128.47 280.304 li
116.947 282.716 li
195.575 282.716 mo
182.826 280.275 li
192.609 278.017 li
205.305 280.349 li
195.575 282.716 li
169.365 282.716 mo
157.233 280.289 li
167.586 278.017 li
179.686 280.333 li
169.365 282.716 li
90.7383 282.716 mo
80.4172 280.333 li
92.5179 278.017 li
102.87 280.289 li
90.7383 282.716 li
64.5285 282.716 mo
54.7982 280.349 li
67.495 278.017 li
77.2773 280.275 li
64.5285 282.716 li
221.783 282.716 mo
208.412 280.259 li
217.632 278.017 li
230.93 280.363 li
221.783 282.716 li
38.3202 282.716 mo
29.1734 280.363 li
42.4715 278.017 li
51.6914 280.259 li
38.3202 282.716 li
380.382 282.156 mo
371.531 280.304 li
380.003 278.53 li
388.85 280.316 li
380.382 282.156 li
359.514 282.156 mo
351.046 280.316 li
359.894 278.53 li
368.366 280.304 li
359.514 282.156 li
442.986 282.156 mo
432.957 280.268 li
440.332 278.53 li
450.326 280.351 li
442.986 282.156 li
401.251 282.156 mo
392.011 280.292 li
400.112 278.53 li
409.338 280.328 li
401.251 282.156 li
338.646 282.156 mo
330.559 280.328 li
339.785 278.53 li
347.886 280.292 li
338.646 282.156 li
296.911 282.156 mo
289.571 280.351 li
299.565 278.53 li
306.94 280.268 li
296.911 282.156 li
422.119 282.156 mo
412.486 280.28 li
420.223 278.53 li
429.831 280.339 li
422.119 282.156 li
317.778 282.156 mo
310.066 280.339 li
319.674 278.53 li
327.41 280.28 li
317.778 282.156 li
463.854 282.156 mo
453.425 280.256 li
460.443 278.53 li
470.827 280.363 li
463.854 282.156 li
276.043 282.156 mo
269.07 280.363 li
279.454 278.53 li
286.472 280.256 li
276.043 282.156 li
431.387 279.973 mo
421.815 278.17 li
429.195 276.502 li
438.739 278.24 li
431.387 279.973 li
390.429 279.973 mo
381.612 278.193 li
389.697 276.502 li
398.503 278.217 li
390.429 279.973 li
369.949 279.973 mo
361.505 278.205 li
369.949 276.502 li
378.392 278.205 li
369.949 279.973 li
349.468 279.973 mo
341.394 278.217 li
350.2 276.502 li
358.285 278.193 li
349.468 279.973 li
308.51 279.973 mo
301.158 278.24 li
310.702 276.502 li
318.082 278.17 li
308.51 279.973 li
155.651 279.973 mo
144.179 277.678 li
154.518 275.515 li
165.971 277.708 li
155.651 279.973 li
130.052 279.973 mo
119.159 277.693 li
130.052 275.515 li
140.945 277.693 li
130.052 279.973 li
104.453 279.973 mo
94.1329 277.707 li
105.586 275.515 li
115.925 277.678 li
104.453 279.973 li
410.908 279.973 mo
401.716 278.182 li
409.446 276.502 li
418.62 278.228 li
410.908 279.973 li
328.988 279.973 mo
321.277 278.228 li
330.451 276.502 li
338.181 278.182 li
328.988 279.973 li
206.851 279.973 mo
194.201 277.65 li
203.452 275.515 li
216.043 277.736 li
206.851 279.973 li
181.25 279.973 mo
169.193 277.664 li
178.984 275.515 li
191.003 277.722 li
181.25 279.973 li
78.8533 279.973 mo
69.1008 277.722 li
81.1191 275.515 li
90.9109 277.664 li
78.8533 279.973 li
53.2528 279.973 mo
44.0599 277.736 li
56.6513 275.515 li
65.9029 277.65 li
53.2528 279.973 li
451.866 279.972 mo
441.911 278.159 li
448.944 276.502 li
458.863 278.251 li
451.866 279.972 li
288.031 279.972 mo
281.034 278.251 li
290.952 276.502 li
297.986 278.159 li
288.031 279.972 li
420.212 277.868 mo
411.072 276.148 li
418.45 274.544 li
427.567 276.206 li
420.212 277.868 li
319.685 277.868 mo
312.33 276.206 li
321.447 274.544 li
328.825 276.148 li
319.685 277.868 li
400.107 277.868 mo
391.333 276.159 li
399.05 274.544 li
407.811 276.194 li
400.107 277.868 li
380.001 277.868 mo
371.588 276.171 li
379.648 274.545 li
388.058 276.183 li
380.001 277.868 li
359.896 277.868 mo
351.839 276.183 li
360.249 274.545 li
368.309 276.171 li
359.896 277.868 li
339.79 277.868 mo
332.086 276.194 li
340.847 274.544 li
348.564 276.159 li
339.79 277.868 li
440.317 277.868 mo
430.81 276.137 li
437.85 274.544 li
447.328 276.217 li
440.317 277.868 li
299.58 277.868 mo
292.568 276.217 li
302.047 274.544 li
309.087 276.137 li
299.58 277.868 li
142.56 277.355 mo
131.705 275.184 li
142.018 273.121 li
152.865 275.198 li
142.56 277.355 li
117.543 277.355 mo
107.238 275.198 li
118.085 273.121 li
128.399 275.184 li
117.543 277.355 li
167.578 277.355 mo
156.165 275.17 li
165.952 273.121 li
177.338 275.212 li
167.578 277.355 li
92.5261 277.355 mo
82.7655 275.212 li
94.1514 273.121 li
103.938 275.17 li
92.5261 277.355 li
192.595 277.355 mo
180.621 275.156 li
189.888 273.121 li
201.818 275.226 li
192.595 277.355 li
67.5089 277.355 mo
58.2856 275.226 li
70.216 273.121 li
79.4829 275.156 li
67.5089 277.355 li
409.437 275.841 mo
400.708 274.197 li
408.076 272.655 li
416.79 274.242 li
409.437 275.841 li
330.46 275.841 mo
323.107 274.242 li
331.821 272.655 li
339.189 274.197 li
330.46 275.841 li
429.183 275.84 mo
420.1 274.186 li
427.142 272.655 li
436.201 274.253 li
429.183 275.84 li
389.694 275.84 mo
381.315 274.208 li
389.013 272.655 li
397.384 274.231 li
389.694 275.84 li
369.949 275.84 mo
361.917 274.22 li
369.949 272.655 li
377.98 274.22 li
369.949 275.84 li
350.203 275.84 mo
342.513 274.231 li
350.884 272.655 li
358.582 274.208 li
350.203 275.84 li
310.714 275.84 mo
303.696 274.253 li
312.755 272.655 li
319.797 274.186 li
310.714 275.84 li
130.052 274.854 mo
119.774 272.798 li
130.052 270.83 li
140.33 272.798 li
130.052 274.854 li
154.513 274.853 mo
143.705 272.784 li
153.475 270.83 li
164.267 272.811 li
154.513 274.853 li
105.59 274.853 mo
95.8367 272.811 li
106.628 270.83 li
116.398 272.784 li
105.59 274.853 li
178.975 274.853 mo
167.631 272.77 li
176.901 270.83 li
188.212 272.825 li
178.975 274.853 li
81.129 274.853 mo
71.8921 272.825 li
83.202 270.83 li
92.4724 272.77 li
81.129 274.853 li
399.043 273.884 mo
390.704 272.314 li
398.058 270.83 li
406.385 272.347 li
399.043 273.884 li
340.854 273.884 mo
333.512 272.347 li
341.839 270.83 li
349.193 272.314 li
340.854 273.884 li
418.44 273.884 mo
409.761 272.302 li
416.798 270.83 li
425.458 272.358 li
418.44 273.884 li
321.457 273.884 mo
314.439 272.358 li
323.099 270.83 li
330.136 272.302 li
321.457 273.884 li
379.647 273.883 mo
371.646 272.325 li
379.32 270.83 li
387.317 272.336 li
379.647 273.883 li
360.25 273.883 mo
352.58 272.336 li
360.577 270.83 li
368.251 272.325 li
360.25 273.883 li
142.016 272.46 mo
131.776 270.5 li
141.52 268.634 li
151.752 270.513 li
142.016 272.46 li
118.087 272.46 mo
108.351 270.513 li
118.584 268.634 li
128.327 270.5 li
118.087 272.46 li
165.946 272.46 mo
155.195 270.486 li
164.457 268.634 li
175.184 270.527 li
165.946 272.46 li
94.1578 272.46 mo
84.9189 270.527 li
95.6471 268.634 li
104.908 270.486 li
94.1578 272.46 li
389.008 271.994 mo
381.041 270.495 li
388.375 269.066 li
396.335 270.516 li
389.008 271.994 li
350.889 271.994 mo
343.562 270.516 li
351.522 269.066 li
358.856 270.495 li
350.889 271.994 li
408.069 271.994 mo
399.775 270.483 li
406.801 269.066 li
415.081 270.527 li
408.069 271.994 li
331.828 271.994 mo
324.816 270.527 li
333.096 269.066 li
340.122 270.483 li
331.828 271.994 li
369.949 271.994 mo
362.303 270.505 li
369.949 269.066 li
377.594 270.505 li
369.949 271.994 li
398.052 270.17 mo
390.124 268.725 li
397.133 267.36 li
405.052 268.757 li
398.052 270.17 li
379.315 270.17 mo
371.7 268.736 li
379.009 267.36 li
386.621 268.746 li
379.315 270.17 li
360.582 270.17 mo
353.276 268.746 li
360.888 267.36 li
368.197 268.736 li
360.582 270.17 li
341.845 270.17 mo
334.845 268.757 li
342.764 267.36 li
349.773 268.725 li
341.845 270.17 li
153.472 270.17 mo
143.278 268.297 li
152.52 266.528 li
162.7 268.324 li
153.472 270.17 li
130.052 270.17 mo
120.344 268.311 li
130.052 266.528 li
139.759 268.311 li
130.052 270.17 li
106.632 270.17 mo
97.4034 268.324 li
107.583 266.528 li
116.825 268.297 li
106.632 270.17 li
369.949 268.406 mo
362.668 267.035 li
369.949 265.71 li
377.229 267.035 li
369.949 268.406 li
388.37 268.406 mo
380.789 267.025 li
387.777 265.709 li
395.352 267.046 li
388.37 268.406 li
351.527 268.406 mo
344.545 267.046 li
352.119 265.709 li
359.108 267.025 li
351.527 268.406 li
141.518 267.974 mo
131.848 266.198 li
141.062 264.506 li
150.726 266.211 li
141.518 267.974 li
118.585 267.974 mo
109.378 266.211 li
119.041 264.506 li
128.255 266.198 li
118.585 267.974 li
379.009 266.7 mo
371.759 265.38 li
378.721 264.112 li
385.969 265.39 li
379.009 266.7 li
360.888 266.7 mo
353.928 265.39 li
361.176 264.112 li
368.138 265.38 li
360.888 266.7 li
130.052 265.868 mo
120.874 264.182 li
130.052 262.563 li
139.23 264.182 li
130.052 265.868 li
369.949 265.05 mo
363.014 263.787 li
369.949 262.563 li
376.883 263.787 li
369.949 265.05 li
130.376 237.22 mo
130.376 202.306 li
157.244 189.574 li
156.586 223.1 li
130.376 237.22 li
129.728 237.22 mo
103.517 223.1 li
102.86 189.574 li
129.728 202.306 li
129.728 237.22 li
370.272 237.22 mo
370.272 214.396 li
388.122 205.545 li
387.827 227.764 li
370.272 237.22 li
369.624 237.22 mo
352.07 227.764 li
351.774 205.545 li
369.624 214.396 li
369.624 237.22 li
388.48 227.412 mo
388.775 205.221 li
405.417 196.969 li
404.862 218.586 li
388.48 227.412 li
351.417 227.412 mo
335.034 218.586 li
334.48 196.969 li
351.121 205.221 li
351.417 227.412 li
157.242 222.747 mo
157.898 189.263 li
182.137 177.777 li
180.945 209.977 li
157.242 222.747 li
102.862 222.747 mo
79.1584 209.977 li
77.9667 177.777 li
102.205 189.263 li
102.862 222.747 li
405.52 218.231 mo
406.074 196.643 li
421.621 188.934 li
420.842 209.978 li
405.52 218.231 li
334.376 218.231 mo
319.055 209.978 li
318.276 188.934 li
333.823 196.643 li
334.376 218.231 li
370.272 213.671 mo
370.272 190.001 li
388.439 181.799 li
388.132 204.816 li
370.272 213.671 li
369.624 213.671 mo
351.764 204.816 li
351.458 181.799 li
369.624 190.001 li
369.624 213.671 li
421.504 209.621 mo
422.281 188.606 li
436.834 181.39 li
435.859 201.888 li
421.504 209.621 li
318.393 209.621 mo
304.038 201.888 li
303.063 181.39 li
317.615 188.606 li
318.393 209.621 li
181.607 209.621 mo
182.797 177.464 li
204.765 167.054 li
203.137 198.023 li
181.607 209.621 li
78.4966 209.621 mo
56.9669 198.023 li
55.3382 167.054 li
77.3066 177.464 li
78.4966 209.621 li
388.785 204.492 mo
389.091 181.504 li
406.009 173.866 li
405.436 196.235 li
388.785 204.492 li
351.112 204.492 mo
334.461 196.235 li
333.888 173.866 li
350.805 181.504 li
351.112 204.492 li
130.376 201.588 mo
130.376 164.729 li
157.949 153.546 li
157.258 188.849 li
130.376 201.588 li
129.728 201.588 mo
102.846 188.849 li
102.154 153.546 li
129.728 164.729 li
129.728 201.588 li
436.525 201.529 mo
437.499 181.06 li
451.146 174.293 li
449.998 194.27 li
436.525 201.529 li
303.372 201.529 mo
289.899 194.27 li
288.751 174.293 li
302.398 181.06 li
303.372 201.529 li
203.805 197.663 mo
205.432 166.738 li
225.425 157.263 li
223.438 187.086 li
203.805 197.663 li
56.2985 197.663 mo
36.6656 187.086 li
34.6785 157.263 li
54.6721 166.738 li
56.2985 197.663 li
406.093 195.91 mo
406.665 173.57 li
422.453 166.441 li
421.648 188.196 li
406.093 195.91 li
333.804 195.91 mo
318.249 188.196 li
317.443 166.441 li
333.232 173.57 li
333.804 195.91 li
450.668 193.909 mo
451.814 173.961 li
464.632 167.605 li
463.334 187.086 li
450.668 193.909 li
289.229 193.909 mo
276.562 187.086 li
275.264 167.605 li
288.083 173.961 li
289.229 193.909 li
370.272 189.289 mo
370.272 164.728 li
388.767 157.229 li
388.449 181.083 li
370.272 189.289 li
369.624 189.289 mo
351.448 181.083 li
351.13 157.229 li
369.624 164.728 li
369.624 189.289 li
157.912 188.539 mo
158.603 153.28 li
183.417 143.218 li
182.164 177.046 li
157.912 188.539 li
102.191 188.539 mo
77.9397 177.046 li
76.6869 143.218 li
101.5 153.28 li
102.191 188.539 li
422.309 187.868 mo
423.113 166.143 li
437.877 159.478 li
436.869 180.648 li
422.309 187.868 li
317.588 187.868 mo
303.027 180.648 li
302.02 159.478 li
316.784 166.143 li
317.588 187.868 li
389.101 180.788 mo
389.419 156.964 li
406.62 149.987 li
406.027 173.146 li
389.101 180.788 li
350.796 180.788 mo
333.87 173.146 li
333.276 149.987 li
350.478 156.964 li
350.796 180.788 li
437.534 180.319 mo
438.54 159.178 li
452.373 152.933 li
451.189 173.547 li
437.534 180.319 li
302.363 180.319 mo
288.708 173.547 li
287.524 152.933 li
301.356 159.178 li
302.363 180.319 li
182.824 176.733 mo
184.075 142.951 li
206.512 133.852 li
204.804 166.317 li
182.824 176.733 li
77.2794 176.733 mo
55.2995 166.317 li
53.5917 133.852 li
76.0284 142.951 li
77.2794 176.733 li
451.857 173.216 mo
453.039 152.632 li
466.021 146.77 li
464.682 166.857 li
451.857 173.216 li
288.04 173.216 mo
275.214 166.857 li
273.876 146.77 li
286.857 152.632 li
288.04 173.216 li
406.683 172.85 mo
407.276 149.722 li
423.313 143.218 li
422.48 165.717 li
406.683 172.85 li
333.213 172.85 mo
317.417 165.717 li
316.583 143.218 li
332.621 149.722 li
333.213 172.85 li
205.47 166.002 mo
207.176 133.583 li
227.554 125.318 li
225.475 156.522 li
205.47 166.002 li
54.6334 166.002 mo
34.6291 156.522 li
32.5494 125.318 li
52.928 133.583 li
54.6334 166.002 li
423.14 165.419 mo
423.972 142.951 li
438.953 136.875 li
437.911 158.75 li
423.14 165.419 li
316.757 165.419 mo
301.985 158.75 li
300.944 136.875 li
315.925 142.951 li
316.757 165.419 li
130.376 164.029 mo
130.376 125.067 li
158.693 115.626 li
157.963 152.841 li
130.376 164.029 li
129.728 164.029 mo
102.14 152.841 li
101.411 115.626 li
129.728 125.067 li
129.728 164.029 li
370.272 164.029 mo
370.272 138.529 li
389.105 131.789 li
388.776 156.526 li
370.272 164.029 li
369.624 164.029 mo
351.121 156.526 li
350.791 131.789 li
369.624 138.529 li
369.624 164.029 li
438.575 158.451 mo
439.615 136.607 li
453.638 130.92 li
452.415 152.202 li
438.575 158.451 li
301.322 158.451 mo
287.482 152.202 li
286.259 130.92 li
300.282 136.607 li
301.322 158.451 li
389.428 156.261 mo
389.757 131.556 li
407.253 125.294 li
406.639 149.281 li
389.428 156.261 li
350.469 156.261 mo
333.258 149.281 li
332.643 125.294 li
350.14 131.556 li
350.469 156.261 li
158.617 152.576 mo
159.346 115.408 li
184.76 106.934 li
183.443 142.508 li
158.617 152.576 li
101.487 152.576 mo
76.6606 142.508 li
75.3437 106.934 li
100.758 115.408 li
101.487 152.576 li
453.081 151.901 mo
454.302 130.65 li
467.451 125.318 li
466.069 146.036 li
453.081 151.901 li
286.815 151.901 mo
273.827 146.036 li
272.446 125.318 li
285.594 130.65 li
286.815 151.901 li
407.294 149.015 mo
407.908 125.059 li
424.201 119.228 li
423.339 142.508 li
407.294 149.015 li
332.602 149.015 mo
316.557 142.508 li
315.696 119.228 li
331.989 125.059 li
332.602 149.015 li
184.102 142.241 mo
185.417 106.715 li
208.342 99.0712 li
206.55 133.137 li
184.102 142.241 li
76.0021 142.241 mo
53.5541 133.137 li
51.7613 99.0712 li
74.6869 106.715 li
76.0021 142.241 li
423.998 142.241 mo
424.858 118.993 li
440.063 113.551 li
438.987 136.162 li
423.998 142.241 li
315.898 142.241 mo
300.91 136.162 li
299.833 113.551 li
315.038 118.993 li
315.898 142.241 li
370.272 137.841 mo
370.272 111.352 li
389.456 105.434 li
389.115 131.097 li
370.272 137.841 li
369.624 137.841 mo
350.782 131.097 li
350.44 105.434 li
369.624 111.352 li
369.624 137.841 li
439.649 135.894 mo
440.724 113.315 li
454.941 108.226 li
453.679 130.204 li
439.649 135.894 li
300.248 135.894 mo
286.218 130.204 li
284.956 108.226 li
299.173 113.315 li
300.248 135.894 li
207.213 132.868 mo
209.003 98.8508 li
229.779 91.9237 li
227.602 124.6 li
207.213 132.868 li
52.8904 132.868 mo
32.5015 124.6 li
30.3246 91.9237 li
51.1002 98.8508 li
52.8904 132.868 li
389.766 130.864 mo
390.108 105.233 li
407.909 99.7417 li
407.271 124.598 li
389.766 130.864 li
350.13 130.864 mo
332.626 124.598 li
331.988 99.7417 li
349.789 105.233 li
350.13 130.864 li
454.343 129.935 mo
455.604 107.989 li
468.923 103.222 li
467.499 124.599 li
454.343 129.935 li
285.553 129.935 mo
272.398 124.599 li
270.974 103.222 li
284.293 107.989 li
285.553 129.935 li
130.376 124.383 mo
130.376 83.1409 li
159.476 75.6571 li
158.707 114.937 li
130.376 124.383 li
129.728 124.383 mo
101.397 114.937 li
100.627 75.6571 li
129.728 83.1409 li
129.728 124.383 li
407.926 124.364 mo
408.563 99.54 li
425.119 94.4327 li
424.227 118.53 li
407.926 124.364 li
331.971 124.364 mo
315.67 118.53 li
314.777 94.4327 li
331.334 99.54 li
331.971 124.364 li
424.884 118.295 mo
425.775 94.2304 li
441.21 89.469 li
440.097 112.851 li
424.884 118.295 li
315.012 118.295 mo
299.8 112.851 li
298.687 89.469 li
314.121 94.2304 li
315.012 118.295 li
159.36 114.719 mo
160.128 75.4894 li
186.172 68.7909 li
184.786 106.242 li
159.36 114.719 li
100.744 114.719 mo
75.318 106.242 li
73.9313 68.7909 li
99.9753 75.4894 li
100.744 114.719 li
440.757 112.614 mo
441.869 89.2657 li
456.285 84.8185 li
454.981 107.523 li
440.757 112.614 li
299.139 112.614 mo
284.915 107.523 li
283.611 84.8185 li
298.028 89.2657 li
299.139 112.614 li
370.272 110.674 mo
370.272 83.1404 li
389.821 78.1134 li
389.465 104.752 li
370.272 110.674 li
369.624 110.674 mo
350.431 104.752 li
350.076 78.1134 li
369.624 83.1404 li
369.624 110.674 li
455.644 107.286 mo
456.947 84.6146 li
470.44 80.4522 li
468.97 102.516 li
455.644 107.286 li
284.253 107.286 mo
270.927 102.516 li
269.457 80.4522 li
282.95 84.6146 li
284.253 107.286 li
185.442 106.023 mo
186.827 68.6226 li
210.261 62.5965 li
208.379 98.3753 li
185.442 106.023 li
74.6613 106.023 mo
51.7248 98.3753 li
49.8424 62.5965 li
73.2765 68.6226 li
74.6613 106.023 li
390.117 104.552 mo
390.472 77.9462 li
408.587 73.2869 li
407.926 99.0581 li
390.117 104.552 li
349.78 104.552 mo
331.97 99.0581 li
331.31 73.2869 li
349.425 77.9462 li
349.78 104.552 li
408.58 98.8565 mo
409.24 73.1189 li
426.069 68.7907 li
425.145 93.7467 li
408.58 98.8565 li
331.316 98.8565 mo
314.752 93.7467 li
313.828 68.7907 li
330.657 73.1189 li
331.316 98.8565 li
209.04 98.1547 mo
210.92 62.4272 li
232.108 56.978 li
229.826 91.2243 li
209.04 98.1547 li
51.0636 98.1547 mo
30.2781 91.2243 li
27.9957 56.978 li
49.1838 62.4272 li
51.0636 98.1547 li
425.801 93.5444 mo
426.724 68.6222 li
442.393 64.5925 li
441.242 88.7808 li
425.801 93.5444 li
314.096 93.5444 mo
298.654 88.7808 li
297.504 64.5925 li
313.173 68.6222 li
314.096 93.5444 li
441.901 88.5775 mo
443.05 64.4236 li
457.673 60.6635 li
456.325 84.128 li
441.901 88.5775 li
297.995 88.5775 mo
283.571 84.128 li
282.224 60.6635 li
296.846 64.4236 li
297.995 88.5775 li
456.986 83.9241 mo
458.332 60.4942 li
472.004 56.9777 li
470.486 79.7597 li
456.986 83.9241 li
282.91 83.9241 mo
269.41 79.7597 li
267.892 56.9777 li
281.565 60.4942 li
282.91 83.9241 li
130.052 82.5546 mo
101.663 75.2538 li
130.052 68.7014 li
158.441 75.2538 li
130.052 82.5546 li
369.948 82.5542 mo
351.092 77.7053 li
369.948 73.1992 li
388.804 77.7053 li
369.948 82.5542 li
390.148 77.3598 mo
371.343 72.8658 li
388.771 68.7012 li
407.533 72.8882 li
390.148 77.3598 li
349.749 77.3598 mo
332.363 72.8882 li
351.126 68.7012 li
368.553 72.8658 li
349.749 77.3598 li
159.805 74.9031 mo
131.494 68.3686 li
156.908 62.5044 li
185.085 68.4011 li
159.805 74.9031 li
100.299 74.9031 mo
75.019 68.4011 li
103.196 62.5044 li
128.61 68.3686 li
100.299 74.9031 li
369.948 72.5325 mo
352.568 68.3792 li
369.948 64.5015 li
387.328 68.3792 li
369.948 72.5325 li
408.917 72.5324 mo
390.209 68.3575 li
406.348 64.5012 li
424.981 68.4008 li
408.917 72.5324 li
330.98 72.5324 mo
314.916 68.4008 li
333.548 64.5012 li
349.687 68.3575 li
330.98 72.5324 li
186.504 68.036 mo
158.413 62.1571 li
181.263 56.8837 li
209.126 62.2188 li
186.504 68.036 li
130.052 68.036 mo
104.708 62.1877 li
130.052 56.8835 li
155.396 62.1877 li
130.052 68.036 li
73.5993 68.036 mo
50.9775 62.2188 li
78.8409 56.8837 li
101.691 62.1571 li
73.5993 68.036 li
426.401 68.0357 mo
407.826 64.1483 li
422.8 60.5707 li
441.274 64.2108 li
426.401 68.0357 li
313.496 68.0357 mo
298.623 64.2108 li
317.097 60.5707 li
332.071 64.1483 li
313.496 68.0357 li
388.767 68.0355 mo
371.438 64.169 li
387.566 60.5707 li
404.861 64.1901 li
388.767 68.0355 li
351.13 68.0355 mo
335.036 64.1901 li
352.33 60.5707 li
368.459 64.169 li
351.13 68.0355 li
406.339 63.8371 mo
389.097 60.2289 li
404.09 56.8831 li
421.271 60.2692 li
406.339 63.8371 li
333.558 63.8371 mo
318.626 60.2692 li
335.807 56.8831 li
350.799 60.2289 li
333.558 63.8371 li
442.728 63.837 mo
424.315 60.2087 li
438.23 56.8831 li
456.524 60.2894 li
442.728 63.837 li
297.169 63.837 mo
283.373 60.2894 li
301.666 56.8831 li
315.582 60.2087 li
297.169 63.837 li
369.948 63.8368 mo
353.867 60.249 li
369.948 56.8831 li
386.029 60.249 li
369.948 63.8368 li
156.901 61.8405 mo
131.634 56.5523 li
154.518 51.7626 li
179.687 56.5819 li
156.901 61.8405 li
103.203 61.8405 mo
80.4171 56.5819 li
105.586 51.7626 li
128.47 56.5523 li
103.203 61.8405 li
210.598 61.8402 mo
182.827 56.5227 li
203.452 51.7626 li
230.93 56.6112 li
210.598 61.8402 li
49.5055 61.8402 mo
29.1733 56.6112 li
56.6515 51.7626 li
77.2771 56.5227 li
49.5055 61.8402 li
422.786 59.9074 mo
405.661 56.5324 li
419.619 53.4181 li
436.662 56.5913 li
422.786 59.9074 li
317.111 59.9074 mo
303.234 56.5913 li
320.278 53.4181 li
334.235 56.5324 li
317.111 59.9074 li
458.01 59.9073 mo
439.78 56.5126 li
452.731 53.4181 li
470.827 56.6108 li
458.01 59.9073 li
387.56 59.9073 mo
371.53 56.552 li
386.505 53.4179 li
402.508 56.5714 li
387.56 59.9073 li
352.336 59.9073 mo
337.389 56.5714 li
353.392 53.4179 li
368.366 56.552 li
352.336 59.9073 li
281.886 59.9073 mo
269.07 56.6108 li
287.165 53.4181 li
300.116 56.5126 li
281.886 59.9073 li
181.25 56.2211 mo
156.166 51.4176 li
176.902 47.0782 li
201.818 51.4742 li
181.25 56.2211 li
130.052 56.2211 mo
107.238 51.446 li
130.052 47.0784 li
152.865 51.446 li
130.052 56.2211 li
78.8532 56.2211 mo
58.2858 51.4742 li
83.2021 47.0782 li
103.938 51.4176 li
78.8532 56.2211 li
438.212 56.2209 mo
421.229 53.0587 li
434.24 50.155 li
451.126 53.1349 li
438.212 56.2209 li
404.08 56.2209 mo
388.13 53.0777 li
402.094 50.1548 li
417.995 53.1157 li
404.08 56.2209 li
369.948 56.2209 mo
355.021 53.0968 li
369.948 50.1546 li
384.875 53.0968 li
369.948 56.2209 li
335.817 56.2209 mo
321.902 53.1157 li
337.802 50.1548 li
351.767 53.0777 li
335.817 56.2209 li
301.684 56.2209 mo
288.77 53.1349 li
305.656 50.155 li
318.668 53.0587 li
301.684 56.2209 li
386.5 52.7566 mo
371.624 49.8245 li
385.565 47.0777 li
400.42 49.843 li
386.5 52.7566 li
353.396 52.7566 mo
339.477 49.843 li
354.332 47.0777 li
368.272 49.8245 li
353.396 52.7566 li
419.605 52.7564 mo
403.761 49.806 li
416.798 47.0779 li
432.577 49.8616 li
419.605 52.7564 li
320.292 52.7564 mo
307.32 49.8616 li
323.098 47.0779 li
336.136 49.806 li
320.292 52.7564 li
154.513 51.1012 mo
131.776 46.7482 li
152.52 42.776 li
175.185 46.7753 li
154.513 51.1012 li
105.59 51.1012 mo
84.9191 46.7753 li
107.583 42.776 li
128.327 46.7482 li
105.59 51.1012 li
402.086 49.4943 mo
387.285 46.7389 li
400.319 44.1705 li
415.081 46.7749 li
402.086 49.4943 li
369.948 49.4943 mo
356.055 46.7569 li
369.948 44.1705 li
383.841 46.7569 li
369.948 49.4943 li
337.811 49.4943 mo
324.816 46.7749 li
339.578 44.1705 li
352.612 46.7389 li
337.811 49.4943 li
385.561 46.418 mo
371.718 43.841 li
384.725 41.4191 li
398.551 43.8585 li
385.561 46.418 li
354.335 46.418 mo
341.346 43.8585 li
355.171 41.4191 li
368.178 43.841 li
354.335 46.418 li
130.052 46.418 mo
109.378 42.4593 li
130.052 38.8118 li
150.725 42.4593 li
130.052 46.418 li
369.948 43.5114 mo
356.989 41.0984 li
369.948 38.8115 li
382.908 41.0984 li
369.948 43.5114 li
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[399.597 0 0 399.597 250 250 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 .227451 .627451 ]
/C1 [.00784314 .00784314 .0705882 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[399.597 0 0 399.597 250 250 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E
3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E
3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%~>
<~3]T2\3B/uX3&iiU2`EWQ2E!HN2)R6J1c.$G1G^gC1,:U?1,1L<0ek@90JG.50/"t2/hSb./M/P+/1`>'
.k<,#.k3"u.Olkr.4HYn-n$Jk-RU8g-71&d,pai`,U=W\,U4NY,9nBV+sJ0R+X&!O+<VdK+!2RH*Zc@D
*ZZ7A*?6%=*#on:)]K\6)B'M3)&X;/(`4),(Ddl(()@Z$()7Q!'bqDs'GM2o',)#l&eYfh&J5Te&.fBa
%hB0]%h9'Z%LrpW%1N^S$k*OP$O[=L$47+I#mgnE#RC\A#R:S>#6tG;"pP57"U,&4"9\i0!s8W-!WiE)
~>
<~TV%gISXl:@S"#k7R@'A.Q^3r&Pa%AqP*1riOH5H_NfB$WN/NRNM2@%ELPLV<KnP,3K7\]+J:N-!IXZ]n
I!^3dH?jd\G^"=SF`heJF)uAAEH#l8Df0H0Ci!m&C2.HsBP1siAn>OaA7K(X@:<PO?XI,F?!LW=>?Y35
=]ea,<`W4#<)cdo;Gg:f:esk^9he;T91qlL8OuBB7n,s:779L16:*t(5X7Ot5!;%k4?GVc3B9&Y2`EWQ
2)I-G1GU^?0eb76/hS_-/1`;$.Ocep-mpAh,paf^,9nBV+WqmL+!)ID*?6";)B'J2(`4&)()7Pu'GD,m
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
130.052 238.088 mo
130.052 238.088 li
130.052 238.088 li
130.052 238.088 li
130.052 238.088 li
130.05 238.087 li
129.911 238.052 li
129.898 238.049 li
103.043 223.581 li
78.6875 210.461 li
56.4988 198.508 li
36.2001 187.573 li
36.1714 187.549 li
36.1182 187.505 li
36.0847 187.459 li
36.0553 187.403 li
36.0396 187.344 li
36.0304 187.309 li
33.9947 156.755 li
31.8678 124.845 li
29.6455 91.4847 li
27.3188 56.5739 li
27.3252 56.5264 li
27.3281 56.4758 li
27.3283 56.4713 li
27.3342 56.4592 li
27.3581 56.4081 li
27.3821 56.3611 li
27.3928 56.3488 li
27.433 56.312 li
27.4751 56.2766 li
27.4859 56.2709 li
27.5432 56.25 li
27.586 56.2333 li
56.603 51.1129 li
56.6068 51.1122 li
83.1325 46.4324 li
83.1577 46.428 li
107.514 42.1301 li
107.524 42.1283 li
107.53 42.1273 li
129.972 38.1679 li
129.993 38.164 li
129.995 38.1635 li
130.071 38.1638 li
130.108 38.1635 li
130.11 38.1638 li
130.132 38.1679 li
152.574 42.1273 li
152.58 42.1285 li
152.587 42.1296 li
176.947 46.4281 li
176.969 46.4321 li
203.497 51.1122 li
203.501 51.1131 li
232.518 56.2333 li
232.56 56.25 li
232.617 56.2706 li
232.63 56.2771 li
232.671 56.312 li
232.711 56.3483 li
232.722 56.3614 li
232.746 56.4081 li
232.769 56.4591 li
232.775 56.4713 li
232.776 56.4758 li
232.778 56.5264 li
232.785 56.5739 li
230.458 91.4847 li
228.236 124.845 li
226.109 156.755 li
224.073 187.309 li
224.064 187.344 li
224.048 187.403 li
224.019 187.459 li
223.985 187.505 li
223.932 187.549 li
223.904 187.573 li
203.605 198.508 li
181.416 210.461 li
157.061 223.581 li
130.206 238.049 li
130.193 238.052 li
130.053 238.087 li
130.052 238.088 li
157.244 189.574 mo
130.376 202.306 li
130.376 237.22 li
156.586 223.1 li
157.244 189.574 li
102.86 189.574 mo
103.517 223.1 li
129.728 237.22 li
129.728 202.306 li
102.86 189.574 li
182.137 177.777 mo
157.898 189.263 li
157.242 222.747 li
180.945 209.977 li
182.137 177.777 li
77.9667 177.777 mo
79.1584 209.977 li
102.862 222.747 li
102.205 189.263 li
77.9667 177.777 li
204.765 167.054 mo
182.797 177.464 li
181.607 209.621 li
203.137 198.023 li
204.765 167.054 li
55.3382 167.054 mo
56.9669 198.023 li
78.4966 209.621 li
77.3066 177.464 li
55.3382 167.054 li
157.949 153.546 mo
130.376 164.729 li
130.376 201.588 li
157.258 188.849 li
157.949 153.546 li
102.154 153.546 mo
102.846 188.849 li
129.728 201.588 li
129.728 164.729 li
102.154 153.546 li
225.425 157.263 mo
205.432 166.738 li
203.805 197.663 li
223.438 187.086 li
225.425 157.263 li
34.6785 157.263 mo
36.6656 187.086 li
56.2985 197.663 li
54.6721 166.738 li
34.6785 157.263 li
183.417 143.218 mo
158.603 153.28 li
157.912 188.539 li
182.164 177.046 li
183.417 143.218 li
76.6869 143.218 mo
77.9397 177.046 li
102.191 188.539 li
101.5 153.28 li
76.6869 143.218 li
206.512 133.852 mo
184.075 142.951 li
182.824 176.733 li
204.804 166.317 li
206.512 133.852 li
53.5917 133.852 mo
55.2995 166.317 li
77.2794 176.733 li
76.0284 142.951 li
53.5917 133.852 li
227.554 125.318 mo
207.176 133.583 li
205.47 166.002 li
225.475 156.522 li
227.554 125.318 li
32.5494 125.318 mo
34.6291 156.522 li
54.6334 166.002 li
52.928 133.583 li
32.5494 125.318 li
158.693 115.626 mo
130.376 125.067 li
130.376 164.029 li
157.963 152.841 li
158.693 115.626 li
101.411 115.626 mo
102.14 152.841 li
129.728 164.029 li
129.728 125.067 li
101.411 115.626 li
184.76 106.934 mo
159.346 115.408 li
158.617 152.576 li
183.443 142.508 li
184.76 106.934 li
75.3437 106.934 mo
76.6606 142.508 li
101.487 152.576 li
100.758 115.408 li
75.3437 106.934 li
208.342 99.0712 mo
185.417 106.715 li
184.102 142.241 li
206.55 133.137 li
208.342 99.0712 li
51.7613 99.0712 mo
53.5541 133.137 li
76.0021 142.241 li
74.6869 106.715 li
51.7613 99.0712 li
229.779 91.9237 mo
209.003 98.8508 li
207.213 132.868 li
227.602 124.6 li
229.779 91.9237 li
30.3246 91.9237 mo
32.5015 124.6 li
52.8904 132.868 li
51.1002 98.8508 li
30.3246 91.9237 li
159.476 75.6571 mo
130.376 83.1409 li
130.376 124.383 li
158.707 114.937 li
159.476 75.6571 li
100.627 75.6571 mo
101.397 114.937 li
129.728 124.383 li
129.728 83.1409 li
100.627 75.6571 li
186.172 68.7909 mo
160.128 75.4894 li
159.36 114.719 li
184.786 106.242 li
186.172 68.7909 li
73.9313 68.7909 mo
75.318 106.242 li
100.744 114.719 li
99.9753 75.4894 li
73.9313 68.7909 li
210.261 62.5965 mo
186.827 68.6226 li
185.442 106.023 li
208.379 98.3753 li
210.261 62.5965 li
49.8424 62.5965 mo
51.7248 98.3753 li
74.6613 106.023 li
73.2765 68.6226 li
49.8424 62.5965 li
232.108 56.978 mo
210.92 62.4272 li
209.04 98.1547 li
229.826 91.2243 li
232.108 56.978 li
27.9957 56.978 mo
30.2781 91.2243 li
51.0636 98.1547 li
49.1838 62.4272 li
27.9957 56.978 li
130.052 68.7014 mo
101.663 75.2538 li
130.052 82.5546 li
158.441 75.2538 li
130.052 68.7014 li
156.908 62.5044 mo
131.494 68.3686 li
159.805 74.9031 li
185.085 68.4011 li
156.908 62.5044 li
103.196 62.5044 mo
75.019 68.4011 li
100.299 74.9031 li
128.61 68.3686 li
103.196 62.5044 li
181.263 56.8837 mo
158.413 62.1571 li
186.504 68.036 li
209.126 62.2188 li
181.263 56.8837 li
130.052 56.8835 mo
104.708 62.1877 li
130.052 68.036 li
155.396 62.1877 li
130.052 56.8835 li
78.8409 56.8837 mo
50.9775 62.2188 li
73.5993 68.036 li
101.691 62.1571 li
78.8409 56.8837 li
154.518 51.7626 mo
131.634 56.5523 li
156.901 61.8405 li
179.687 56.5819 li
154.518 51.7626 li
105.586 51.7626 mo
80.4171 56.5819 li
103.203 61.8405 li
128.47 56.5523 li
105.586 51.7626 li
203.452 51.7626 mo
182.827 56.5227 li
210.598 61.8402 li
230.93 56.6112 li
203.452 51.7626 li
56.6515 51.7626 mo
29.1733 56.6112 li
49.5055 61.8402 li
77.2771 56.5227 li
56.6515 51.7626 li
176.902 47.0782 mo
156.166 51.4176 li
181.25 56.2211 li
201.818 51.4742 li
176.902 47.0782 li
130.052 47.0784 mo
107.238 51.446 li
130.052 56.2211 li
152.865 51.446 li
130.052 47.0784 li
83.2021 47.0782 mo
58.2858 51.4742 li
78.8532 56.2211 li
103.938 51.4176 li
83.2021 47.0782 li
152.52 42.776 mo
131.776 46.7482 li
154.513 51.1012 li
175.185 46.7753 li
152.52 42.776 li
107.583 42.776 mo
84.9191 46.7753 li
105.59 51.1012 li
128.327 46.7482 li
107.583 42.776 li
130.052 38.8118 mo
109.378 42.4593 li
130.052 46.418 li
150.725 42.4593 li
130.052 38.8118 li
level3{
gsave
clp
[399.597 0 0 399.597 250 250 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!<<'!s8N*!rrE*!!<<'!s8N*!rrE*!!<<'!s8N*!rrE*!!<<'!s8N*!rrE*!"onT+s8N8urrr#o"mu<n
kPk_ErrqB]"l'%\ec,g!rrpOE"iL?D^&J8Frro\-"gS(2X8`@#rro(q"e,GpPlCoIrrn5Y"bQaXK)Z"%
rrmTG"`XJFCB"HJrrla/$X!E:;u[5(rsMR$$V14)61YIGi<qNn$STU0.D6*6Ws^/F$QYH>(PiG2Fpe[m
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[399.597 0 0 399.597 250 250 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzz!!!$$!sA`0"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1
"9\i1"9\i1"9\i1"9\i2"pYGA$47+I$47+I$47+I$47+I$47+I$47+I$47+I$47+I$47+I$47+I$47+I
$47+I$47+I$47+I$47+I~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W&qqYBmZo^hVBmd9?*ki_*hj5JqSi8EPMh:pZ9f@AC!dEg+_bK@oH`PfX0^V7@m\[])UZa-g>
Yct@8Y,n\'W2HMgUS4?PSXZ(8Q^*f!OcYT_Mi*=GKnP&/JUrB'IsuclH?aXVFE2A>DJX*&BP(gc@UNPK
>[(?5<`N*t;GpCj;,C"^91h`F779L/5X%=m3]K&U1bpd=/hAM%-mg5c+sJ3T+sA$L*#fb4()7Jq&.]3Y
~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!r;$*ZnE]8shqZo9e'Q@^a2Gg.]=,#JWi)YeT:D=8PE:c]LP(&%F`MD:
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
369.949 238.087 mo
369.948 238.087 li
369.948 238.087 li
369.948 238.087 li
369.948 238.087 li
369.947 238.087 li
369.807 238.052 li
369.794 238.048 li
351.595 228.244 li
334.561 219.068 li
318.584 210.461 li
303.569 202.372 li
289.432 194.756 li
276.097 187.572 li
276.068 187.548 li
276.015 187.504 li
275.981 187.459 li
275.952 187.403 li
275.936 187.343 li
275.927 187.308 li
274.58 167.086 li
273.193 146.273 li
271.764 124.845 li
270.294 102.771 li
270.294 102.768 li
270.294 102.768 li
268.778 80.0252 li
267.215 56.5735 li
267.222 56.526 li
267.225 56.4756 li
267.225 56.471 li
267.231 56.4587 li
267.255 56.4079 li
267.279 56.3611 li
267.29 56.3479 li
267.33 56.3117 li
267.371 56.2767 li
267.383 56.2703 li
267.44 56.2497 li
267.483 56.2329 li
287.119 52.7682 li
287.121 52.7679 li
287.125 52.7671 li
305.608 49.5054 li
323.027 46.4322 li
323.055 46.4273 li
339.513 43.5239 li
339.518 43.5229 li
339.525 43.5219 li
355.102 40.7732 li
355.104 40.7729 li
355.116 40.7707 li
369.87 38.1673 li
369.886 38.1641 li
369.892 38.1633 li
369.956 38.1636 li
370.005 38.1633 li
370.009 38.1639 li
370.026 38.1671 li
384.78 40.7707 li
400.372 43.5219 li
400.377 43.5227 li
400.385 43.524 li
416.842 46.4275 li
416.867 46.4319 li
434.288 49.5054 li
452.772 52.7672 li
452.777 52.7682 li
472.414 56.2329 li
472.457 56.2497 li
472.514 56.2704 li
472.526 56.2768 li
472.567 56.3117 li
472.607 56.3477 li
472.619 56.3614 li
472.642 56.4079 li
472.666 56.4587 li
472.672 56.471 li
472.672 56.4756 li
472.675 56.526 li
472.681 56.5735 li
471.118 80.0252 li
469.603 102.768 li
469.603 102.768 li
469.603 102.771 li
468.132 124.845 li
466.704 146.273 li
465.317 167.086 li
463.97 187.308 li
463.96 187.343 li
463.945 187.403 li
463.915 187.459 li
463.882 187.504 li
463.829 187.548 li
463.8 187.572 li
450.465 194.756 li
436.328 202.372 li
421.313 210.461 li
405.336 219.068 li
388.302 228.244 li
370.102 238.048 li
370.089 238.052 li
369.95 238.087 li
369.949 238.087 li
388.122 205.545 mo
370.272 214.396 li
370.272 237.22 li
387.827 227.764 li
388.122 205.545 li
351.774 205.545 mo
352.07 227.764 li
369.624 237.22 li
369.624 214.396 li
351.774 205.545 li
405.417 196.969 mo
388.775 205.221 li
388.48 227.412 li
404.862 218.586 li
405.417 196.969 li
334.48 196.969 mo
335.034 218.586 li
351.417 227.412 li
351.121 205.221 li
334.48 196.969 li
421.621 188.934 mo
406.074 196.643 li
405.52 218.231 li
420.842 209.978 li
421.621 188.934 li
318.276 188.934 mo
319.055 209.978 li
334.376 218.231 li
333.823 196.643 li
318.276 188.934 li
388.439 181.799 mo
370.272 190.001 li
370.272 213.671 li
388.132 204.816 li
388.439 181.799 li
351.458 181.799 mo
351.764 204.816 li
369.624 213.671 li
369.624 190.001 li
351.458 181.799 li
436.834 181.39 mo
422.281 188.606 li
421.504 209.621 li
435.859 201.888 li
436.834 181.39 li
303.063 181.39 mo
304.038 201.888 li
318.393 209.621 li
317.615 188.606 li
303.063 181.39 li
406.009 173.866 mo
389.091 181.504 li
388.785 204.492 li
405.436 196.235 li
406.009 173.866 li
333.888 173.866 mo
334.461 196.235 li
351.112 204.492 li
350.805 181.504 li
333.888 173.866 li
451.146 174.293 mo
437.499 181.06 li
436.525 201.529 li
449.998 194.27 li
451.146 174.293 li
288.751 174.293 mo
289.899 194.27 li
303.372 201.529 li
302.398 181.06 li
288.751 174.293 li
422.453 166.441 mo
406.665 173.57 li
406.093 195.91 li
421.648 188.196 li
422.453 166.441 li
317.443 166.441 mo
318.249 188.196 li
333.804 195.91 li
333.232 173.57 li
317.443 166.441 li
464.632 167.605 mo
451.814 173.961 li
450.668 193.909 li
463.334 187.086 li
464.632 167.605 li
275.264 167.605 mo
276.562 187.086 li
289.229 193.909 li
288.083 173.961 li
275.264 167.605 li
388.767 157.229 mo
370.272 164.728 li
370.272 189.289 li
388.449 181.083 li
388.767 157.229 li
351.13 157.229 mo
351.448 181.083 li
369.624 189.289 li
369.624 164.728 li
351.13 157.229 li
437.877 159.478 mo
423.113 166.143 li
422.309 187.868 li
436.869 180.648 li
437.877 159.478 li
302.02 159.478 mo
303.027 180.648 li
317.588 187.868 li
316.784 166.143 li
302.02 159.478 li
406.62 149.987 mo
389.419 156.964 li
389.101 180.788 li
406.027 173.146 li
406.62 149.987 li
333.276 149.987 mo
333.87 173.146 li
350.796 180.788 li
350.478 156.964 li
333.276 149.987 li
452.373 152.933 mo
438.54 159.178 li
437.534 180.319 li
451.189 173.547 li
452.373 152.933 li
287.524 152.933 mo
288.708 173.547 li
302.363 180.319 li
301.356 159.178 li
287.524 152.933 li
466.021 146.77 mo
453.039 152.632 li
451.857 173.216 li
464.682 166.857 li
466.021 146.77 li
273.876 146.77 mo
275.214 166.857 li
288.04 173.216 li
286.857 152.632 li
273.876 146.77 li
423.313 143.218 mo
407.276 149.722 li
406.683 172.85 li
422.48 165.717 li
423.313 143.218 li
316.583 143.218 mo
317.417 165.717 li
333.213 172.85 li
332.621 149.722 li
316.583 143.218 li
438.953 136.875 mo
423.972 142.951 li
423.14 165.419 li
437.911 158.75 li
438.953 136.875 li
300.944 136.875 mo
301.985 158.75 li
316.757 165.419 li
315.925 142.951 li
300.944 136.875 li
389.105 131.789 mo
370.272 138.529 li
370.272 164.029 li
388.776 156.526 li
389.105 131.789 li
350.791 131.789 mo
351.121 156.526 li
369.624 164.029 li
369.624 138.529 li
350.791 131.789 li
453.638 130.92 mo
439.615 136.607 li
438.575 158.451 li
452.415 152.202 li
453.638 130.92 li
286.259 130.92 mo
287.482 152.202 li
301.322 158.451 li
300.282 136.607 li
286.259 130.92 li
407.253 125.294 mo
389.757 131.556 li
389.428 156.261 li
406.639 149.281 li
407.253 125.294 li
332.643 125.294 mo
333.258 149.281 li
350.469 156.261 li
350.14 131.556 li
332.643 125.294 li
467.451 125.318 mo
454.302 130.65 li
453.081 151.901 li
466.069 146.036 li
467.451 125.318 li
272.446 125.318 mo
273.827 146.036 li
286.815 151.901 li
285.594 130.65 li
272.446 125.318 li
424.201 119.228 mo
407.908 125.059 li
407.294 149.015 li
423.339 142.508 li
424.201 119.228 li
315.696 119.228 mo
316.557 142.508 li
332.602 149.015 li
331.989 125.059 li
315.696 119.228 li
440.063 113.551 mo
424.858 118.993 li
423.998 142.241 li
438.987 136.162 li
440.063 113.551 li
299.833 113.551 mo
300.91 136.162 li
315.898 142.241 li
315.038 118.993 li
299.833 113.551 li
389.456 105.434 mo
370.272 111.352 li
370.272 137.841 li
389.115 131.097 li
389.456 105.434 li
350.44 105.434 mo
350.782 131.097 li
369.624 137.841 li
369.624 111.352 li
350.44 105.434 li
454.941 108.226 mo
440.724 113.315 li
439.649 135.894 li
453.679 130.204 li
454.941 108.226 li
284.956 108.226 mo
286.218 130.204 li
300.248 135.894 li
299.173 113.315 li
284.956 108.226 li
407.909 99.7417 mo
390.108 105.233 li
389.766 130.864 li
407.271 124.598 li
407.909 99.7417 li
331.988 99.7417 mo
332.626 124.598 li
350.13 130.864 li
349.789 105.233 li
331.988 99.7417 li
468.923 103.222 mo
455.604 107.989 li
454.343 129.935 li
467.499 124.599 li
468.923 103.222 li
270.974 103.222 mo
272.398 124.599 li
285.553 129.935 li
284.293 107.989 li
270.974 103.222 li
425.119 94.4327 mo
408.563 99.54 li
407.926 124.364 li
424.227 118.53 li
425.119 94.4327 li
314.777 94.4327 mo
315.67 118.53 li
331.971 124.364 li
331.334 99.54 li
314.777 94.4327 li
441.21 89.469 mo
425.775 94.2304 li
424.884 118.295 li
440.097 112.851 li
441.21 89.469 li
298.687 89.469 mo
299.8 112.851 li
315.012 118.295 li
314.121 94.2304 li
298.687 89.469 li
456.285 84.8185 mo
441.869 89.2657 li
440.757 112.614 li
454.981 107.523 li
456.285 84.8185 li
283.611 84.8185 mo
284.915 107.523 li
299.139 112.614 li
298.028 89.2657 li
283.611 84.8185 li
389.821 78.1134 mo
370.272 83.1404 li
370.272 110.674 li
389.465 104.752 li
389.821 78.1134 li
350.076 78.1134 mo
350.431 104.752 li
369.624 110.674 li
369.624 83.1404 li
350.076 78.1134 li
470.44 80.4522 mo
456.947 84.6146 li
455.644 107.286 li
468.97 102.516 li
470.44 80.4522 li
269.457 80.4522 mo
270.927 102.516 li
284.253 107.286 li
282.95 84.6146 li
269.457 80.4522 li
408.587 73.2869 mo
390.472 77.9462 li
390.117 104.552 li
407.926 99.0581 li
408.587 73.2869 li
331.31 73.2869 mo
331.97 99.0581 li
349.78 104.552 li
349.425 77.9462 li
331.31 73.2869 li
426.069 68.7907 mo
409.24 73.1189 li
408.58 98.8565 li
425.145 93.7467 li
426.069 68.7907 li
313.828 68.7907 mo
314.752 93.7467 li
331.316 98.8565 li
330.657 73.1189 li
313.828 68.7907 li
442.393 64.5925 mo
426.724 68.6222 li
425.801 93.5444 li
441.242 88.7808 li
442.393 64.5925 li
297.504 64.5925 mo
298.654 88.7808 li
314.096 93.5444 li
313.173 68.6222 li
297.504 64.5925 li
457.673 60.6635 mo
443.05 64.4236 li
441.901 88.5775 li
456.325 84.128 li
457.673 60.6635 li
282.224 60.6635 mo
283.571 84.128 li
297.995 88.5775 li
296.846 64.4236 li
282.224 60.6635 li
472.004 56.9777 mo
458.332 60.4942 li
456.986 83.9241 li
470.486 79.7597 li
472.004 56.9777 li
267.892 56.9777 mo
269.41 79.7597 li
282.91 83.9241 li
281.565 60.4942 li
267.892 56.9777 li
369.948 73.1992 mo
351.092 77.7053 li
369.948 82.5542 li
388.804 77.7053 li
369.948 73.1992 li
388.771 68.7012 mo
371.343 72.8658 li
390.148 77.3598 li
407.533 72.8882 li
388.771 68.7012 li
351.126 68.7012 mo
332.363 72.8882 li
349.749 77.3598 li
368.553 72.8658 li
351.126 68.7012 li
369.948 64.5015 mo
352.568 68.3792 li
369.948 72.5325 li
387.328 68.3792 li
369.948 64.5015 li
406.348 64.5012 mo
390.209 68.3575 li
408.917 72.5324 li
424.981 68.4008 li
406.348 64.5012 li
333.548 64.5012 mo
314.916 68.4008 li
330.98 72.5324 li
349.687 68.3575 li
333.548 64.5012 li
422.8 60.5707 mo
407.826 64.1483 li
426.401 68.0357 li
441.274 64.2108 li
422.8 60.5707 li
317.097 60.5707 mo
298.623 64.2108 li
313.496 68.0357 li
332.071 64.1483 li
317.097 60.5707 li
387.566 60.5707 mo
371.438 64.169 li
388.767 68.0355 li
404.861 64.1901 li
387.566 60.5707 li
352.33 60.5707 mo
335.036 64.1901 li
351.13 68.0355 li
368.459 64.169 li
352.33 60.5707 li
404.09 56.8831 mo
389.097 60.2289 li
406.339 63.8371 li
421.271 60.2692 li
404.09 56.8831 li
335.807 56.8831 mo
318.626 60.2692 li
333.558 63.8371 li
350.799 60.2289 li
335.807 56.8831 li
438.23 56.8831 mo
424.315 60.2087 li
442.728 63.837 li
456.524 60.2894 li
438.23 56.8831 li
301.666 56.8831 mo
283.373 60.2894 li
297.169 63.837 li
315.582 60.2087 li
301.666 56.8831 li
369.948 56.8831 mo
353.867 60.249 li
369.948 63.8368 li
386.029 60.249 li
369.948 56.8831 li
419.619 53.4181 mo
405.661 56.5324 li
422.786 59.9074 li
436.662 56.5913 li
419.619 53.4181 li
320.278 53.4181 mo
303.234 56.5913 li
317.111 59.9074 li
334.235 56.5324 li
320.278 53.4181 li
452.731 53.4181 mo
439.78 56.5126 li
458.01 59.9073 li
470.827 56.6108 li
452.731 53.4181 li
386.505 53.4179 mo
371.53 56.552 li
387.56 59.9073 li
402.508 56.5714 li
386.505 53.4179 li
353.392 53.4179 mo
337.389 56.5714 li
352.336 59.9073 li
368.366 56.552 li
353.392 53.4179 li
287.165 53.4181 mo
269.07 56.6108 li
281.886 59.9073 li
300.116 56.5126 li
287.165 53.4181 li
434.24 50.155 mo
421.229 53.0587 li
438.212 56.2209 li
451.126 53.1349 li
434.24 50.155 li
402.094 50.1548 mo
388.13 53.0777 li
404.08 56.2209 li
417.995 53.1157 li
402.094 50.1548 li
369.948 50.1546 mo
355.021 53.0968 li
369.948 56.2209 li
384.875 53.0968 li
369.948 50.1546 li
337.802 50.1548 mo
321.902 53.1157 li
335.817 56.2209 li
351.767 53.0777 li
337.802 50.1548 li
305.656 50.155 mo
288.77 53.1349 li
301.684 56.2209 li
318.668 53.0587 li
305.656 50.155 li
385.565 47.0777 mo
371.624 49.8245 li
386.5 52.7566 li
400.42 49.843 li
385.565 47.0777 li
354.332 47.0777 mo
339.477 49.843 li
353.396 52.7566 li
368.272 49.8245 li
354.332 47.0777 li
416.798 47.0779 mo
403.761 49.806 li
419.605 52.7564 li
432.577 49.8616 li
416.798 47.0779 li
323.098 47.0779 mo
307.32 49.8616 li
320.292 52.7564 li
336.136 49.806 li
323.098 47.0779 li
400.319 44.1705 mo
387.285 46.7389 li
402.086 49.4943 li
415.081 46.7749 li
400.319 44.1705 li
369.948 44.1705 mo
356.055 46.7569 li
369.948 49.4943 li
383.841 46.7569 li
369.948 44.1705 li
339.578 44.1705 mo
324.816 46.7749 li
337.811 49.4943 li
352.612 46.7389 li
339.578 44.1705 li
384.725 41.4191 mo
371.718 43.841 li
385.561 46.418 li
398.551 43.8585 li
384.725 41.4191 li
355.171 41.4191 mo
341.346 43.8585 li
354.335 46.418 li
368.178 43.841 li
355.171 41.4191 li
369.948 38.8115 mo
356.989 41.0984 li
369.948 43.5114 li
382.908 41.0984 li
369.948 38.8115 li
level3{
gsave
clp
[399.597 0 0 399.597 250 250 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[399.597 0 0 399.597 250 250 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
130.052 461.839 mo
130.052 461.839 li
130.052 461.839 li
130.052 461.839 li
130.051 461.839 li
130.05 461.839 li
129.911 461.804 li
129.898 461.8 li
116.134 454.386 li
103.043 447.333 li
90.5752 440.617 li
78.6873 434.213 li
67.3408 428.1 li
56.4989 422.259 li
46.1288 416.673 li
36.2002 411.324 li
36.1716 411.3 li
36.1184 411.256 li
36.0848 411.211 li
36.0554 411.155 li
36.0399 411.095 li
36.0305 411.06 li
35.0235 395.948 li
33.9945 380.507 li
32.9428 364.727 li
31.868 348.597 li
30.7689 332.104 li
29.6452 315.236 li
28.4958 297.982 li
27.3189 280.325 li
27.3253 280.278 li
27.3282 280.228 li
27.3284 280.223 li
27.3343 280.211 li
27.3582 280.16 li
27.382 280.113 li
27.3935 280.099 li
27.4332 280.064 li
27.4728 280.029 li
27.4887 280.021 li
27.5385 280.003 li
27.5546 279.997 li
27.5862 279.985 li
27.5925 279.984 li
27.5978 279.983 li
42.4253 277.367 li
42.4267 277.366 li
42.432 277.365 li
56.6028 274.865 li
56.6077 274.864 li
70.1667 272.472 li
83.1384 270.183 li
83.1508 270.181 li
83.1509 270.181 li
95.5794 267.988 li
95.5917 267.985 li
95.5948 267.985 li
107.516 265.881 li
107.523 265.88 li
107.53 265.879 li
118.987 263.857 li
129.97 261.92 li
129.994 261.915 li
129.995 261.915 li
130.134 261.92 li
141.116 263.857 li
152.574 265.879 li
152.581 265.88 li
152.587 265.881 li
164.509 267.985 li
164.514 267.986 li
164.523 267.987 li
176.946 270.18 li
176.97 270.184 li
189.937 272.472 li
203.496 274.864 li
203.501 274.865 li
217.67 277.365 li
217.676 277.366 li
217.678 277.367 li
232.507 279.983 li
232.509 279.983 li
232.517 279.985 li
232.557 280 li
232.562 280.002 li
232.616 280.021 li
232.63 280.029 li
232.67 280.064 li
232.71 280.099 li
232.722 280.113 li
232.745 280.16 li
232.769 280.211 li
232.775 280.223 li
232.775 280.228 li
232.778 280.278 li
232.785 280.325 li
231.608 297.982 li
230.458 315.236 li
229.335 332.104 li
228.236 348.597 li
227.161 364.727 li
226.109 380.507 li
225.08 395.948 li
224.073 411.06 li
224.064 411.095 li
224.048 411.155 li
224.019 411.211 li
223.985 411.256 li
223.932 411.3 li
223.903 411.324 li
213.975 416.673 li
203.605 422.259 li
192.763 428.1 li
181.416 434.213 li
169.528 440.617 li
157.061 447.333 li
143.969 454.386 li
130.205 461.8 li
130.193 461.804 li
130.053 461.839 li
130.052 461.839 li
143.66 437.383 mo
130.376 444.114 li
130.376 460.972 li
143.493 453.906 li
143.66 437.383 li
116.444 437.383 mo
116.61 453.906 li
129.727 460.972 li
129.727 444.114 li
116.444 437.383 li
156.903 430.672 mo
144.311 437.053 li
144.145 453.554 li
156.587 446.852 li
156.903 430.672 li
103.2 430.672 mo
103.517 446.852 li
115.958 453.554 li
115.792 437.053 li
103.2 430.672 li
169.509 424.285 mo
157.558 430.34 li
157.242 446.498 li
169.056 440.135 li
169.509 424.285 li
90.595 424.285 mo
91.048 440.135 li
102.862 446.498 li
102.545 430.34 li
90.595 424.285 li
143.839 419.677 mo
130.376 426.058 li
130.376 443.387 li
143.667 436.652 li
143.839 419.677 li
116.265 419.677 mo
116.437 436.652 li
129.727 443.387 li
129.727 426.058 li
116.265 419.677 li
181.52 418.199 mo
170.167 423.952 li
169.715 439.779 li
180.945 433.73 li
181.52 418.199 li
78.584 418.199 mo
79.1582 433.73 li
90.389 439.779 li
89.9365 423.952 li
78.584 418.199 li
157.243 413.325 mo
144.49 419.369 li
144.319 436.322 li
156.918 429.938 li
157.243 413.325 li
102.86 413.325 mo
103.186 429.938 li
115.785 436.322 li
115.613 419.369 li
102.86 413.325 li
192.978 412.393 mo
182.181 417.864 li
181.607 433.373 li
192.293 427.616 li
192.978 412.393 li
67.1252 412.393 mo
67.8103 427.616 li
78.4965 433.373 li
77.9229 417.864 li
67.1252 412.393 li
169.994 407.283 mo
157.898 413.015 li
157.573 429.606 li
169.53 423.547 li
169.994 407.283 li
90.1095 407.283 mo
90.5738 423.547 li
102.531 429.606 li
102.206 413.015 li
90.1095 407.283 li
203.922 406.847 mo
193.643 412.056 li
192.959 427.258 li
203.137 421.774 li
203.922 406.847 li
56.1821 406.847 mo
56.9671 421.774 li
67.1451 427.258 li
66.461 412.056 li
56.1821 406.847 li
144.022 401.512 mo
130.376 407.519 li
130.376 425.34 li
143.846 418.956 li
144.022 401.512 li
116.081 401.512 mo
116.257 418.956 li
129.727 425.34 li
129.727 407.519 li
116.081 401.512 li
182.137 401.528 mo
170.652 406.971 li
170.188 423.214 li
181.547 417.458 li
182.137 401.528 li
77.9666 401.528 mo
78.5565 417.458 li
89.9155 423.214 li
89.4517 406.971 li
77.9666 401.528 li
214.384 401.546 mo
204.589 406.509 li
203.805 421.414 li
213.508 416.187 li
214.384 401.546 li
45.7199 401.546 mo
46.5954 416.187 li
56.2986 421.414 li
55.5147 406.509 li
45.7199 401.546 li
157.592 395.54 mo
144.674 401.226 li
144.497 418.647 li
157.258 412.6 li
157.592 395.54 li
102.511 395.54 mo
102.846 412.6 li
115.606 418.647 li
115.43 401.225 li
102.511 395.54 li
193.715 396.042 mo
182.797 401.215 li
182.208 417.123 li
193.012 411.648 li
193.715 396.042 li
66.3888 396.042 mo
67.0917 411.648 li
77.8954 417.123 li
77.3064 401.215 li
66.3888 396.042 li
224.395 396.473 mo
215.053 401.207 li
214.179 415.826 li
223.438 410.838 li
224.395 396.473 li
35.7084 396.473 mo
36.6657 410.838 li
45.9243 415.826 li
45.0502 401.207 li
35.7084 396.473 li
170.492 389.862 mo
158.247 395.252 li
157.912 412.29 li
170.015 406.555 li
170.492 389.862 li
89.6117 389.862 mo
90.0887 406.555 li
102.191 412.29 li
101.857 395.252 li
89.6117 389.862 li
204.766 390.805 mo
194.378 395.728 li
193.676 411.312 li
203.961 406.1 li
204.766 390.805 li
55.3381 390.805 mo
56.1428 406.1 li
66.4275 411.312 li
65.7255 395.728 li
55.3381 390.805 li
144.211 382.87 mo
130.376 388.48 li
130.376 406.81 li
144.03 400.8 li
144.211 382.87 li
115.893 382.87 mo
116.074 400.8 li
129.727 406.81 li
129.727 388.48 li
115.893 382.87 li
182.769 384.458 mo
171.149 389.572 li
170.673 406.243 li
182.164 400.798 li
182.769 384.458 li
77.3344 384.458 mo
77.9396 400.798 li
89.4309 406.243 li
88.9545 389.572 li
77.3344 384.458 li
215.326 385.802 mo
205.432 390.49 li
204.628 405.762 li
214.429 400.796 li
215.326 385.802 li
44.778 385.802 mo
45.6751 400.796 li
55.4754 405.762 li
54.6719 390.49 li
44.778 385.802 li
157.949 377.298 mo
144.862 382.606 li
144.681 400.513 li
157.607 394.825 li
157.949 377.298 li
102.154 377.298 mo
102.497 394.824 li
115.423 400.513 li
115.242 382.606 li
102.154 377.298 li
194.469 379.308 mo
183.429 384.167 li
182.824 400.485 li
193.748 395.309 li
194.469 379.308 li
65.6351 379.308 mo
66.3556 395.309 li
77.2794 400.485 li
76.675 384.167 li
65.6351 379.308 li
225.425 381.015 mo
215.994 385.485 li
215.098 400.457 li
224.445 395.72 li
225.425 381.015 li
34.6784 381.015 mo
35.6582 395.72 li
45.0053 400.457 li
44.1096 385.485 li
34.6784 381.015 li
205.629 374.395 mo
195.131 379.016 li
194.411 394.994 li
204.804 390.069 li
205.629 374.395 li
54.4749 374.395 mo
55.2994 390.069 li
65.6925 394.994 li
64.973 379.016 li
54.4749 374.395 li
171.002 372.005 mo
158.603 377.033 li
158.261 394.537 li
170.512 389.144 li
171.002 372.005 li
89.1018 372.005 mo
89.5911 389.144 li
101.843 394.537 li
101.5 377.033 li
89.1018 372.005 li
216.288 369.703 mo
206.293 374.102 li
205.47 389.753 li
215.37 385.063 li
216.288 369.703 li
43.8154 369.703 mo
44.7338 385.063 li
54.6332 389.753 li
53.8099 374.102 li
43.8154 369.703 li
183.417 366.97 mo
171.658 371.739 li
171.169 388.854 li
182.796 383.737 li
183.417 366.97 li
76.6866 366.97 mo
77.3077 383.737 li
88.934 388.854 li
88.4452 371.739 li
76.6866 366.97 li
144.403 363.731 mo
130.376 368.92 li
130.376 387.781 li
144.218 382.168 li
144.403 363.731 li
115.7 363.731 mo
115.886 382.168 li
129.727 387.781 li
129.727 368.92 li
115.7 363.731 li
226.478 365.218 mo
216.955 369.409 li
216.038 384.746 li
225.475 380.274 li
226.478 365.218 li
33.6256 365.218 mo
34.629 380.274 li
44.0654 384.746 li
43.1485 369.409 li
33.6256 365.218 li
195.24 362.175 mo
184.075 366.703 li
183.455 383.446 li
194.501 378.584 li
195.24 362.175 li
64.8641 362.175 mo
65.6026 378.584 li
76.6483 383.446 li
76.0282 366.703 li
64.8641 362.175 li
158.317 358.583 mo
145.054 363.49 li
144.869 381.904 li
157.963 376.593 li
158.317 358.583 li
101.787 358.583 mo
102.14 376.593 li
115.235 381.904 li
115.05 363.49 li
101.787 358.583 li
206.512 357.603 mo
195.901 361.907 li
195.163 378.293 li
205.667 373.669 li
206.512 357.603 li
53.5916 357.603 mo
54.4366 373.669 li
64.9403 378.293 li
64.2029 361.907 li
53.5916 357.603 li
171.524 353.696 mo
158.97 358.341 li
158.617 376.328 li
171.022 371.298 li
171.524 353.696 li
88.5793 353.696 mo
89.0816 371.298 li
101.486 376.328 li
101.133 358.341 li
88.5793 353.696 li
217.273 353.24 mo
207.176 357.334 li
206.332 373.376 li
216.332 368.975 li
217.273 353.24 li
42.8308 353.24 mo
43.772 368.975 li
53.7717 373.376 li
52.9279 357.334 li
42.8308 353.24 li
184.08 349.051 mo
172.18 353.454 li
171.679 371.031 li
183.443 366.26 li
184.08 349.051 li
76.0235 349.051 mo
76.6603 366.26 li
88.4251 371.031 li
87.9234 353.454 li
76.0235 349.051 li
227.554 349.07 mo
217.938 352.97 li
216.999 368.681 li
226.527 364.487 li
227.554 349.07 li
32.5495 349.07 mo
33.5768 364.487 li
43.105 368.681 li
42.1652 352.97 li
32.5495 349.07 li
144.602 344.075 mo
130.376 348.819 li
130.376 368.229 li
144.41 363.037 li
144.602 344.075 li
115.502 344.075 mo
115.693 363.037 li
129.727 368.229 li
129.727 348.819 li
115.502 344.075 li
196.029 344.63 mo
184.738 348.807 li
184.101 365.993 li
195.272 361.463 li
196.029 344.63 li
64.074 344.63 mo
64.8321 361.463 li
76.002 365.993 li
75.3658 348.807 li
64.074 344.63 li
158.693 339.377 mo
145.253 343.858 li
145.061 362.796 li
158.33 357.887 li
158.693 339.377 li
101.41 339.377 mo
101.773 357.887 li
115.043 362.796 li
114.851 343.858 li
101.41 339.377 li
207.417 340.417 mo
196.689 344.386 li
195.933 361.195 li
206.55 356.889 li
207.417 340.417 li
52.6868 340.417 mo
53.554 356.889 li
64.1709 361.195 li
63.414 344.386 li
52.6868 340.417 li
172.061 334.92 mo
159.346 339.159 li
158.984 357.645 li
171.544 352.998 li
172.061 334.92 li
88.0425 334.92 mo
88.5594 352.998 li
101.12 357.645 li
100.757 339.159 li
88.0425 334.92 li
218.279 336.398 mo
208.079 340.172 li
207.213 356.62 li
217.316 352.523 li
218.279 336.398 li
41.8244 336.398 mo
42.7879 352.523 li
52.8902 356.62 li
52.0244 340.172 li
41.8244 336.398 li
184.76 330.686 mo
172.716 334.701 li
172.2 352.755 li
184.106 348.35 li
184.76 330.686 li
75.3434 330.686 mo
75.9975 348.35 li
87.9035 352.755 li
87.3874 334.701 li
75.3434 330.686 li
228.654 332.56 mo
218.944 336.153 li
217.981 352.253 li
227.602 348.351 li
228.654 332.56 li
31.4492 332.56 mo
32.5016 348.351 li
42.1224 352.253 li
41.1601 336.153 li
31.4492 332.56 li
144.806 323.881 mo
130.376 328.15 li
130.376 348.135 li
144.609 343.389 li
144.806 323.881 li
115.297 323.881 mo
115.495 343.389 li
129.727 348.135 li
129.727 328.15 li
115.297 323.881 li
196.839 326.658 mo
185.417 330.467 li
184.763 348.107 li
196.061 343.927 li
196.839 326.658 li
63.2651 326.658 mo
64.0425 343.927 li
75.3399 348.107 li
74.6867 330.467 li
63.2651 326.658 li
208.342 322.823 mo
197.497 326.438 li
196.721 343.683 li
207.454 339.712 li
208.342 322.823 li
51.7615 322.823 mo
52.6498 339.712 li
63.3823 343.683 li
62.6062 326.438 li
51.7615 322.823 li
159.079 319.659 mo
145.457 323.689 li
145.26 343.172 li
158.706 338.689 li
159.079 319.659 li
101.024 319.659 mo
101.397 338.689 li
114.844 343.172 li
114.647 323.689 li
101.024 319.659 li
219.31 319.166 mo
209.003 322.602 li
208.116 339.467 li
218.322 335.692 li
219.31 319.166 li
40.7935 319.166 mo
41.782 335.692 li
51.9873 339.467 li
51.1003 322.602 li
40.7935 319.166 li
172.611 315.656 mo
159.732 319.466 li
159.359 338.471 li
172.081 334.229 li
172.611 315.656 li
87.4924 315.656 mo
88.0228 334.229 li
100.744 338.471 li
100.372 319.466 li
87.4924 315.656 li
229.779 315.675 mo
219.973 318.945 li
218.986 335.446 li
228.702 331.852 li
229.779 315.675 li
30.3245 315.675 mo
31.402 331.852 li
41.1179 335.446 li
40.1308 318.945 li
30.3245 315.675 li
185.457 311.855 mo
173.266 315.462 li
172.736 334.011 li
184.786 329.993 li
185.457 311.855 li
74.6464 311.855 mo
75.3178 329.993 li
87.3676 334.011 li
86.838 315.462 li
74.6464 311.855 li
197.668 308.243 mo
186.113 311.661 li
185.443 329.774 li
196.87 325.964 li
197.668 308.243 li
62.4354 308.243 mo
63.2338 325.964 li
74.661 329.774 li
73.9905 311.661 li
62.4354 308.243 li
145.016 303.127 mo
130.376 306.892 li
130.376 327.474 li
144.813 323.203 li
145.016 303.127 li
115.088 303.127 mo
115.29 323.203 li
129.727 327.474 li
129.727 306.892 li
115.088 303.127 li
209.29 304.805 mo
198.326 308.048 li
197.529 325.744 li
208.379 322.127 li
209.29 304.805 li
50.814 304.805 mo
51.7249 322.127 li
62.5749 325.744 li
61.7777 308.048 li
50.814 304.805 li
159.476 299.409 mo
145.666 302.96 li
145.464 323.011 li
159.093 318.979 li
159.476 299.409 li
100.627 299.409 mo
101.011 318.979 li
114.64 323.011 li
114.437 302.96 li
100.627 299.409 li
220.365 301.528 mo
209.95 304.61 li
209.04 321.906 li
219.352 318.468 li
220.365 301.528 li
39.7388 301.528 mo
40.7516 318.468 li
51.0638 321.906 li
50.1541 304.61 li
39.7388 301.528 li
173.176 295.885 mo
160.128 299.241 li
159.745 318.786 li
172.631 314.974 li
173.176 295.885 li
86.9278 295.885 mo
87.473 314.974 li
100.359 318.786 li
99.9752 299.241 li
86.9278 295.885 li
230.93 298.403 mo
221.026 301.332 li
220.014 318.247 li
229.826 314.976 li
230.93 298.403 li
29.1738 298.403 mo
30.2778 314.976 li
40.089 318.247 li
39.0776 301.332 li
29.1738 298.403 li
186.172 292.543 mo
173.83 295.717 li
173.285 314.78 li
185.482 311.172 li
186.172 292.543 li
73.9315 292.543 mo
74.6211 311.172 li
86.8185 314.78 li
86.2741 295.717 li
73.9315 292.543 li
198.517 289.368 mo
186.827 292.375 li
186.138 310.978 li
197.699 307.557 li
198.517 289.368 li
61.5859 289.368 mo
62.4046 307.557 li
73.9652 310.977 li
73.2766 292.375 li
61.5859 289.368 li
210.261 286.348 mo
199.174 289.199 li
198.357 307.363 li
209.326 304.118 li
210.261 286.348 li
49.8425 286.348 mo
50.7779 304.118 li
61.7469 307.363 li
60.9293 289.199 li
49.8425 286.348 li
130.052 299.322 mo
116.094 302.716 li
130.052 306.306 li
144.009 302.716 li
130.052 299.322 li
221.444 283.472 mo
210.92 286.179 li
209.986 303.923 li
220.406 300.84 li
221.444 283.472 li
38.6592 283.472 mo
39.6976 300.84 li
50.1181 303.923 li
49.184 286.179 li
38.6592 283.472 li
144.54 295.797 mo
131.422 298.988 li
145.341 302.374 li
158.441 299.005 li
144.54 295.797 li
115.564 295.797 mo
101.663 299.005 li
114.762 302.374 li
128.682 298.988 li
115.564 295.797 li
232.108 280.73 mo
222.104 283.303 li
221.067 300.644 li
230.976 297.713 li
232.108 280.73 li
27.9958 280.73 mo
29.1279 297.713 li
39.0364 300.644 li
37.9995 283.303 li
27.9958 280.73 li
130.052 292.454 mo
116.97 295.472 li
130.052 298.655 li
143.133 295.472 li
130.052 292.454 li
158.285 292.454 mo
145.945 295.455 li
159.804 298.655 li
172.114 295.488 li
158.285 292.454 li
101.818 292.454 mo
87.9898 295.489 li
100.299 298.655 li
114.159 295.455 li
101.818 292.454 li
143.815 289.277 mo
131.494 292.121 li
144.537 295.13 li
156.844 292.137 li
143.815 289.277 li
116.288 289.277 mo
103.259 292.137 li
115.566 295.13 li
128.61 292.121 li
116.288 289.277 li
171.343 289.277 mo
159.719 292.105 li
173.506 295.13 li
185.084 292.153 li
171.343 289.277 li
88.7611 289.277 mo
75.0194 292.153 li
86.5975 295.13 li
100.384 292.104 li
88.7611 289.277 li
156.908 286.256 mo
145.29 288.937 li
158.279 291.788 li
169.87 288.969 li
156.908 286.256 li
103.196 286.256 mo
90.2341 288.969 li
101.825 291.788 li
114.814 288.937 li
103.196 286.256 li
183.762 286.256 mo
172.806 288.921 li
186.504 291.788 li
197.405 288.984 li
183.762 286.256 li
130.052 286.256 mo
117.766 288.953 li
130.052 291.788 li
142.337 288.953 li
130.052 286.256 li
76.3415 286.256 mo
62.6979 288.984 li
73.5994 291.788 li
87.2978 288.921 li
76.3415 286.256 li
169.375 283.379 mo
158.413 285.909 li
171.333 288.613 li
182.258 285.955 li
169.375 283.379 li
90.7282 283.379 mo
77.8457 285.955 li
88.7708 288.613 li
101.691 285.909 li
90.7282 283.379 li
143.16 283.379 mo
131.564 285.924 li
143.812 288.613 li
155.395 285.939 li
143.16 283.379 li
116.944 283.379 mo
104.708 285.939 li
116.292 288.613 li
128.54 285.924 li
116.944 283.379 li
195.591 283.379 mo
185.254 285.893 li
198.852 288.613 li
209.126 285.97 li
195.591 283.379 li
64.5126 283.379 mo
50.9778 285.97 li
61.2517 288.613 li
74.8496 285.893 li
64.5126 283.379 li
181.262 280.635 mo
170.91 283.025 li
183.75 285.592 li
194.055 283.085 li
181.262 280.635 li
130.052 280.635 mo
118.492 283.055 li
130.052 285.592 li
141.612 283.055 li
130.052 280.635 li
78.8412 280.635 mo
66.0488 283.085 li
76.3539 285.592 li
89.1933 283.025 li
78.8412 280.635 li
206.867 280.635 mo
197.109 283.009 li
210.598 285.592 li
220.287 283.1 li
206.867 280.635 li
155.657 280.635 mo
144.704 283.04 li
156.9 285.592 li
167.831 283.07 li
155.657 280.635 li
104.446 280.635 mo
92.2731 283.07 li
103.203 285.592 li
115.399 283.04 li
104.446 280.635 li
53.2367 280.635 mo
39.8168 283.1 li
49.5056 285.592 li
62.9951 283.009 li
53.2367 280.635 li
142.563 278.017 mo
131.634 280.304 li
143.156 282.716 li
154.075 280.319 li
142.563 278.017 li
117.541 278.017 mo
106.029 280.319 li
116.947 282.716 li
128.47 280.304 li
117.541 278.017 li
192.609 278.017 mo
182.826 280.275 li
195.575 282.716 li
205.305 280.349 li
192.609 278.017 li
167.586 278.017 mo
157.233 280.289 li
169.365 282.716 li
179.686 280.333 li
167.586 278.017 li
92.5179 278.017 mo
80.4172 280.333 li
90.7383 282.716 li
102.87 280.289 li
92.5179 278.017 li
67.495 278.017 mo
54.7982 280.349 li
64.5285 282.716 li
77.2773 280.275 li
67.495 278.017 li
217.632 278.017 mo
208.412 280.259 li
221.783 282.716 li
230.93 280.363 li
217.632 278.017 li
42.4715 278.017 mo
29.1734 280.363 li
38.3202 282.716 li
51.6914 280.259 li
42.4715 278.017 li
154.518 275.515 mo
144.179 277.678 li
155.651 279.973 li
165.971 277.708 li
154.518 275.515 li
130.052 275.515 mo
119.159 277.693 li
130.052 279.973 li
140.945 277.693 li
130.052 275.515 li
105.586 275.515 mo
94.1329 277.707 li
104.453 279.973 li
115.925 277.678 li
105.586 275.515 li
203.452 275.515 mo
194.201 277.65 li
206.851 279.973 li
216.043 277.736 li
203.452 275.515 li
178.984 275.515 mo
169.193 277.664 li
181.25 279.973 li
191.003 277.722 li
178.984 275.515 li
81.1191 275.515 mo
69.1008 277.722 li
78.8533 279.973 li
90.9109 277.664 li
81.1191 275.515 li
56.6513 275.515 mo
44.0599 277.736 li
53.2528 279.973 li
65.9029 277.65 li
56.6513 275.515 li
142.018 273.121 mo
131.705 275.184 li
142.56 277.355 li
152.865 275.198 li
142.018 273.121 li
118.085 273.121 mo
107.238 275.198 li
117.543 277.355 li
128.399 275.184 li
118.085 273.121 li
165.952 273.121 mo
156.165 275.17 li
167.578 277.355 li
177.338 275.212 li
165.952 273.121 li
94.1514 273.121 mo
82.7655 275.212 li
92.5261 277.355 li
103.938 275.17 li
94.1514 273.121 li
189.888 273.121 mo
180.621 275.156 li
192.595 277.355 li
201.818 275.226 li
189.888 273.121 li
70.216 273.121 mo
58.2856 275.226 li
67.5089 277.355 li
79.4829 275.156 li
70.216 273.121 li
130.052 270.83 mo
119.774 272.798 li
130.052 274.854 li
140.33 272.798 li
130.052 270.83 li
153.475 270.83 mo
143.705 272.784 li
154.513 274.853 li
164.267 272.811 li
153.475 270.83 li
106.628 270.83 mo
95.8367 272.811 li
105.59 274.853 li
116.398 272.784 li
106.628 270.83 li
176.901 270.83 mo
167.631 272.77 li
178.975 274.853 li
188.212 272.825 li
176.901 270.83 li
83.202 270.83 mo
71.8921 272.825 li
81.129 274.853 li
92.4724 272.77 li
83.202 270.83 li
141.52 268.634 mo
131.776 270.5 li
142.016 272.46 li
151.752 270.513 li
141.52 268.634 li
118.584 268.634 mo
108.351 270.513 li
118.087 272.46 li
128.327 270.5 li
118.584 268.634 li
164.457 268.634 mo
155.195 270.486 li
165.946 272.46 li
175.184 270.527 li
164.457 268.634 li
95.6471 268.634 mo
84.9189 270.527 li
94.1578 272.46 li
104.908 270.486 li
95.6471 268.634 li
152.52 266.528 mo
143.278 268.297 li
153.472 270.17 li
162.7 268.324 li
152.52 266.528 li
130.052 266.528 mo
120.344 268.311 li
130.052 270.17 li
139.759 268.311 li
130.052 266.528 li
107.583 266.528 mo
97.4034 268.324 li
106.632 270.17 li
116.825 268.297 li
107.583 266.528 li
141.062 264.506 mo
131.848 266.198 li
141.518 267.974 li
150.726 266.211 li
141.062 264.506 li
119.041 264.506 mo
109.378 266.211 li
118.585 267.974 li
128.255 266.198 li
119.041 264.506 li
130.052 262.563 mo
120.874 264.182 li
130.052 265.868 li
139.23 264.182 li
130.052 262.563 li
level3{
gsave
clp
[399.597 0 0 399.597 250 250 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[399.597 0 0 399.597 250 250 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
369.949 461.839 mo
369.949 461.839 li
369.949 461.839 li
369.948 461.839 li
369.948 461.839 li
369.947 461.839 li
369.807 461.804 li
369.795 461.8 li
358.728 455.839 li
348.099 450.113 li
337.88 444.608 li
328.049 439.311 li
318.584 434.213 li
309.465 429.301 li
300.674 424.564 li
292.193 419.995 li
284.005 415.585 li
276.097 411.324 li
276.068 411.3 li
276.015 411.256 li
275.981 411.211 li
275.952 411.155 li
275.936 411.095 li
275.927 411.06 li
275.123 398.996 li
274.305 386.724 li
273.473 374.236 li
272.627 361.529 li
271.764 348.597 li
270.887 335.432 li
269.994 322.029 li
269.994 322.029 li
269.994 322.029 li
269.085 308.382 li
268.159 294.483 li
267.215 280.325 li
267.222 280.278 li
267.225 280.228 li
267.225 280.223 li
267.231 280.211 li
267.255 280.159 li
267.278 280.114 li
267.29 280.1 li
267.331 280.063 li
267.37 280.029 li
267.383 280.023 li
267.44 280.001 li
267.483 279.985 li
279.408 277.88 li
290.904 275.852 li
290.91 275.851 li
301.997 273.895 li
301.998 273.895 li
312.699 272.006 li
312.704 272.006 li
312.705 272.006 li
323.031 270.184 li
323.052 270.18 li
333.03 268.419 li
333.043 268.417 li
333.044 268.417 li
342.7 266.713 li
342.702 266.713 li
342.712 266.711 li
352.052 265.063 li
352.054 265.063 li
352.065 265.061 li
361.121 263.463 li
369.866 261.92 li
369.891 261.915 li
369.892 261.915 li
370.031 261.92 li
378.776 263.463 li
387.832 265.061 li
387.843 265.063 li
387.846 265.063 li
397.185 266.711 li
397.195 266.713 li
397.196 266.713 li
406.853 268.417 li
406.857 268.417 li
406.865 268.419 li
416.848 270.181 li
416.861 270.183 li
427.191 272.005 li
427.2 272.007 li
437.899 273.895 li
448.986 275.851 li
448.991 275.852 li
448.991 275.852 li
460.483 277.879 li
460.487 277.88 li
460.489 277.88 li
472.414 279.985 li
472.456 280.001 li
472.515 280.023 li
472.526 280.029 li
472.566 280.063 li
472.607 280.1 li
472.618 280.114 li
472.641 280.159 li
472.666 280.211 li
472.672 280.223 li
472.672 280.228 li
472.675 280.278 li
472.681 280.325 li
471.738 294.483 li
470.812 308.382 li
469.903 322.029 li
469.902 322.029 li
469.902 322.029 li
469.01 335.432 li
468.132 348.597 li
467.27 361.529 li
466.424 374.236 li
465.591 386.724 li
464.774 398.996 li
463.97 411.06 li
463.96 411.096 li
463.945 411.155 li
463.915 411.211 li
463.881 411.256 li
463.829 411.3 li
463.8 411.324 li
455.892 415.585 li
447.704 419.995 li
439.223 424.564 li
430.432 429.301 li
421.313 434.213 li
411.848 439.311 li
402.017 444.608 li
391.798 450.113 li
381.169 455.839 li
370.102 461.8 li
370.089 461.804 li
369.95 461.839 li
369.949 461.839 li
380.798 442.269 mo
370.273 447.67 li
370.273 460.972 li
380.692 455.359 li
380.798 442.269 li
359.098 442.269 mo
359.205 455.359 li
369.624 460.972 li
369.624 447.67 li
359.098 442.269 li
391.527 436.763 mo
381.449 441.934 li
381.343 455.008 li
391.323 449.632 li
391.527 436.763 li
348.369 436.763 mo
348.574 449.632 li
358.553 455.008 li
358.447 441.934 li
348.369 436.763 li
401.838 431.471 mo
392.181 436.427 li
391.977 449.279 li
401.544 444.126 li
401.838 431.471 li
338.059 431.471 mo
338.353 444.126 li
347.92 449.279 li
347.716 436.427 li
338.059 431.471 li
380.913 428.153 mo
370.273 433.336 li
370.273 446.941 li
380.804 441.536 li
380.913 428.153 li
358.984 428.153 mo
359.092 441.536 li
369.624 446.941 li
369.624 433.336 li
358.984 428.153 li
411.753 426.383 mo
402.494 431.134 li
402.201 443.772 li
411.375 438.829 li
411.753 426.383 li
328.144 426.383 mo
328.521 438.829 li
337.696 443.772 li
337.403 431.134 li
328.144 426.383 li
391.747 422.875 mo
381.564 427.836 li
381.455 441.202 li
391.539 436.027 li
391.747 422.875 li
348.149 422.875 mo
348.358 436.027 li
358.441 441.202 li
358.333 427.836 li
348.149 422.875 li
421.295 421.486 mo
412.412 426.044 li
412.035 438.473 li
420.842 433.73 li
421.295 421.486 li
318.602 421.486 mo
319.055 433.73 li
327.862 438.473 li
327.485 426.044 li
318.602 421.486 li
402.155 417.805 mo
392.401 422.557 li
392.193 435.692 li
401.855 430.733 li
402.155 417.805 li
337.742 417.805 mo
338.042 430.733 li
347.704 435.692 li
347.496 422.557 li
337.742 417.805 li
430.485 416.77 mo
421.956 421.147 li
421.504 433.373 li
429.962 428.817 li
430.485 416.77 li
309.412 416.77 mo
309.935 428.817 li
318.393 433.373 li
317.941 421.147 li
309.412 416.77 li
381.03 413.747 mo
370.273 418.701 li
370.273 432.616 li
380.919 427.43 li
381.03 413.747 li
358.867 413.747 mo
358.978 427.43 li
369.624 432.616 li
369.624 418.701 li
358.867 413.747 li
412.16 412.932 mo
402.811 417.486 li
402.512 430.396 li
411.775 425.642 li
412.16 412.932 li
327.737 412.932 mo
328.122 425.642 li
337.385 430.396 li
337.086 417.486 li
327.737 412.932 li
439.342 412.224 mo
431.149 416.429 li
430.626 428.459 li
438.754 424.08 li
439.342 412.224 li
300.555 412.224 mo
301.143 424.08 li
309.271 428.459 li
308.748 416.429 li
300.555 412.224 li
391.973 408.707 mo
381.681 413.447 li
381.57 427.113 li
391.759 422.149 li
391.973 408.707 li
347.924 408.707 mo
348.138 422.149 li
358.327 427.113 li
358.216 413.447 li
347.924 408.707 li
421.785 408.244 mo
412.819 412.612 li
412.434 425.303 li
421.323 420.743 li
421.785 408.244 li
318.112 408.244 mo
318.574 420.743 li
327.463 425.303 li
327.078 412.612 li
318.112 408.244 li
447.885 407.841 mo
440.009 411.882 li
439.421 423.72 li
447.237 419.51 li
447.885 407.841 li
292.012 407.841 mo
292.66 419.51 li
300.476 423.72 li
299.888 411.882 li
292.012 407.841 li
402.479 403.869 mo
392.626 408.407 li
392.412 421.83 li
402.172 417.076 li
402.479 403.869 li
337.418 403.869 mo
337.725 417.076 li
347.484 421.83 li
347.271 408.407 li
337.418 403.869 li
431.052 403.729 mo
422.446 407.922 li
421.984 420.403 li
430.518 416.023 li
431.052 403.729 li
308.845 403.729 mo
309.379 416.023 li
317.913 420.403 li
317.451 407.922 li
308.845 403.729 li
456.128 403.61 mo
448.553 407.498 li
447.906 419.149 li
455.425 415.099 li
456.128 403.61 li
283.768 403.61 mo
284.471 415.099 li
291.991 419.149 li
291.344 407.498 li
283.768 403.61 li
381.149 399.039 mo
370.273 403.752 li
370.273 417.987 li
381.036 413.031 li
381.149 399.039 li
358.747 399.039 mo
358.861 413.031 li
369.624 417.987 li
369.624 403.752 li
358.747 399.039 li
412.576 399.22 mo
403.135 403.567 li
402.828 416.757 li
412.182 412.201 li
412.576 399.22 li
327.321 399.22 mo
327.715 412.201 li
337.069 416.757 li
336.762 403.567 li
327.321 399.22 li
439.98 399.381 mo
431.715 403.407 li
431.181 415.683 li
439.379 411.475 li
439.98 399.381 li
299.917 399.381 mo
300.518 411.475 li
308.716 415.683 li
308.182 403.407 li
299.917 399.381 li
464.089 399.525 mo
456.799 403.266 li
456.097 414.737 li
463.335 410.838 li
464.089 399.525 li
275.808 399.525 mo
276.562 410.838 li
283.8 414.737 li
283.098 403.266 li
275.808 399.525 li
392.202 394.25 mo
381.8 398.757 li
381.687 412.731 li
391.984 407.989 li
392.202 394.25 li
347.695 394.25 mo
347.913 407.989 li
358.21 412.731 li
358.096 398.757 li
347.695 394.25 li
422.285 394.748 mo
413.234 398.917 li
412.841 411.88 li
421.812 407.51 li
422.285 394.748 li
317.612 394.748 mo
318.085 407.51 li
327.056 411.88 li
326.663 398.917 li
317.612 394.748 li
448.588 395.187 mo
440.645 399.056 li
440.046 411.134 li
447.926 407.09 li
448.588 395.187 li
291.309 395.187 mo
291.971 407.09 li
299.851 411.134 li
299.252 399.056 li
291.309 395.187 li
402.81 389.653 mo
392.855 393.967 li
392.637 407.688 li
402.496 403.148 li
402.81 389.653 li
337.087 389.653 mo
337.401 403.148 li
347.26 407.688 li
347.042 393.967 li
337.087 389.653 li
431.63 390.446 mo
422.945 394.445 li
422.473 407.188 li
431.084 402.993 li
431.63 390.446 li
308.267 390.446 mo
308.813 402.993 li
317.424 407.188 li
316.952 394.445 li
308.267 390.446 li
456.891 391.142 mo
449.255 394.862 li
448.595 406.747 li
456.174 402.857 li
456.891 391.142 li
283.006 391.142 mo
283.722 402.857 li
291.302 406.747 li
290.642 394.862 li
283.006 391.142 li
381.271 384.019 mo
370.273 388.48 li
370.273 403.045 li
381.155 398.33 li
381.271 384.019 li
358.625 384.019 mo
358.741 398.33 li
369.624 403.045 li
369.624 388.48 li
358.625 384.019 li
412.999 385.238 mo
403.465 389.369 li
403.151 402.846 li
412.597 398.496 li
412.999 385.238 li
326.898 385.238 mo
327.3 398.496 li
336.745 402.846 li
336.432 389.369 li
326.898 385.238 li
440.629 386.301 mo
432.292 390.141 li
431.747 402.67 li
440.016 398.642 li
440.629 386.301 li
299.268 386.301 mo
299.88 398.642 li
308.15 402.67 li
307.605 390.141 li
299.268 386.301 li
464.907 387.238 mo
457.561 390.816 li
456.845 402.513 li
464.139 398.77 li
464.907 387.238 li
274.99 387.238 mo
275.758 398.77 li
283.052 402.513 li
282.336 390.816 li
274.99 387.238 li
449.303 382.307 mo
441.293 385.995 li
440.682 398.318 li
448.629 394.447 li
449.303 382.307 li
290.594 382.307 mo
291.268 394.447 li
299.215 398.318 li
298.604 385.995 li
290.594 382.307 li
422.794 380.994 mo
413.656 384.953 li
413.256 398.193 li
422.312 394.022 li
422.794 380.994 li
317.103 380.994 mo
317.585 394.022 li
326.641 398.193 li
326.241 384.953 li
317.103 380.994 li
392.436 379.492 mo
381.922 383.755 li
381.806 398.048 li
392.213 393.539 li
392.436 379.492 li
347.461 379.492 mo
347.684 393.539 li
358.091 398.048 li
357.975 383.755 li
347.461 379.492 li
457.667 378.455 mo
449.969 382 li
449.296 394.122 li
456.937 390.4 li
457.667 378.455 li
282.23 378.455 mo
282.96 390.4 li
290.601 394.122 li
289.928 382 li
282.23 378.455 li
432.217 376.91 mo
423.454 380.708 li
422.972 393.719 li
431.661 389.718 li
432.217 376.91 li
307.679 376.91 mo
308.236 389.718 li
316.925 393.719 li
316.443 380.708 li
307.679 376.91 li
403.147 375.148 mo
393.089 379.227 li
392.866 393.255 li
402.827 388.939 li
403.147 375.148 li
336.75 375.148 mo
337.07 388.939 li
347.031 393.255 li
346.808 379.227 li
336.75 375.148 li
465.74 374.737 mo
458.336 378.147 li
457.606 390.073 li
464.957 386.494 li
465.74 374.737 li
274.156 374.737 mo
274.94 386.494 li
282.291 390.073 li
281.561 378.147 li
274.156 374.737 li
441.29 372.979 mo
432.879 376.623 li
432.323 389.412 li
440.665 385.57 li
441.29 372.979 li
298.607 372.979 mo
299.232 385.57 li
307.574 389.412 li
307.018 376.623 li
298.607 372.979 li
413.431 370.977 mo
403.801 374.883 li
403.482 388.655 li
413.02 384.522 li
413.431 370.977 li
326.466 370.977 mo
326.877 384.522 li
336.415 388.655 li
336.095 374.883 li
326.466 370.977 li
381.396 368.68 mo
370.273 372.875 li
370.273 387.781 li
381.277 383.318 li
381.396 368.68 li
358.501 368.68 mo
358.62 383.318 li
369.624 387.781 li
369.624 372.875 li
358.501 368.68 li
450.031 369.192 mo
441.954 372.691 li
441.329 385.264 li
449.344 381.575 li
450.031 369.192 li
289.866 369.192 mo
290.553 381.575 li
298.567 385.264 li
297.943 372.691 li
289.866 369.192 li
423.314 366.97 mo
414.088 370.711 li
413.678 384.237 li
422.821 380.275 li
423.314 366.97 li
316.583 366.97 mo
317.076 380.275 li
326.219 384.237 li
325.809 370.711 li
316.583 366.97 li
392.675 364.425 mo
382.047 368.435 li
381.928 383.054 li
392.447 378.789 li
392.675 364.425 li
347.221 364.425 mo
347.45 378.789 li
357.969 383.054 li
357.85 368.435 li
347.221 364.425 li
458.458 365.54 mo
450.696 368.904 li
450.01 381.268 li
457.712 377.72 li
458.458 365.54 li
281.439 365.54 mo
282.185 377.72 li
289.887 381.268 li
289.201 368.904 li
281.439 365.54 li
432.817 363.115 mo
423.972 366.703 li
423.48 379.99 li
432.249 376.189 li
432.817 363.115 li
307.08 363.115 mo
307.648 376.189 li
316.417 379.99 li
315.925 366.703 li
307.08 363.115 li
403.491 360.346 mo
393.328 364.179 li
393.1 378.524 li
403.163 374.442 li
403.491 360.346 li
336.406 360.346 mo
336.734 374.442 li
346.797 378.524 li
346.569 364.179 li
336.406 360.346 li
466.588 362.017 mo
459.125 365.25 li
458.381 377.413 li
465.789 374.001 li
466.588 362.017 li
273.309 362.017 mo
274.108 374.001 li
281.516 377.413 li
280.772 365.25 li
273.309 362.017 li
441.964 359.406 mo
433.478 362.847 li
432.91 375.903 li
441.326 372.256 li
441.964 359.406 li
297.933 359.406 mo
298.571 372.256 li
306.987 375.903 li
306.419 362.847 li
297.933 359.406 li
413.872 356.431 mo
404.145 360.1 li
403.818 374.177 li
413.452 370.269 li
413.872 356.431 li
326.025 356.431 mo
326.445 370.269 li
336.079 374.177 li
335.752 360.1 li
326.025 356.431 li
381.524 353.009 mo
370.273 356.926 li
370.273 372.182 li
381.402 367.985 li
381.524 353.009 li
358.373 353.009 mo
358.495 367.985 li
369.624 372.182 li
369.624 356.926 li
358.373 353.009 li
450.773 355.833 mo
442.626 359.137 li
441.989 371.969 li
450.071 368.467 li
450.773 355.833 li
289.124 355.833 mo
289.826 368.467 li
297.907 371.969 li
297.271 359.137 li
289.124 355.833 li
423.843 352.67 mo
414.528 356.183 li
414.109 370.003 li
423.34 366.26 li
423.843 352.67 li
316.054 352.67 mo
316.557 366.26 li
325.788 370.003 li
325.369 356.183 li
316.054 352.67 li
459.263 352.39 mo
451.437 355.564 li
450.736 368.179 li
458.503 364.813 li
459.263 352.39 li
280.634 352.39 mo
281.394 364.813 li
289.16 368.179 li
288.46 355.564 li
280.634 352.39 li
392.919 349.041 mo
382.174 352.782 li
382.052 367.74 li
392.686 363.728 li
392.919 349.041 li
346.977 349.041 mo
347.21 363.728 li
357.845 367.74 li
357.723 352.782 li
346.977 349.041 li
433.428 349.055 mo
424.501 352.422 li
423.998 365.993 li
432.848 362.403 li
433.428 349.055 li
306.469 349.055 mo
307.049 362.403 li
315.899 365.993 li
315.396 352.422 li
306.469 349.055 li
467.451 349.07 mo
459.929 352.12 li
459.17 364.524 li
466.636 361.289 li
467.451 349.07 li
272.446 349.07 mo
273.261 361.289 li
280.727 364.524 li
279.968 352.12 li
272.446 349.07 li
403.842 345.239 mo
393.572 348.814 li
393.339 363.482 li
403.507 359.647 li
403.842 345.239 li
336.055 345.239 mo
336.39 359.647 li
346.558 363.482 li
346.325 348.814 li
336.055 345.239 li
442.65 345.577 mo
434.088 348.806 li
433.509 362.136 li
441.999 358.692 li
442.65 345.577 li
297.247 345.577 mo
297.898 358.692 li
306.388 362.136 li
305.809 348.806 li
297.247 345.577 li
414.321 341.59 mo
404.496 345.011 li
404.161 359.4 li
413.893 355.73 li
414.321 341.59 li
325.576 341.59 mo
326.004 355.73 li
335.736 359.4 li
335.401 345.011 li
325.576 341.59 li
451.528 342.228 mo
443.312 345.328 li
442.662 358.424 li
450.813 355.118 li
451.528 342.228 li
288.368 342.228 mo
289.084 355.118 li
297.235 358.424 li
296.586 345.328 li
288.368 342.228 li
381.654 336.995 mo
370.273 340.62 li
370.273 356.239 li
381.53 352.319 li
381.654 336.995 li
358.243 336.995 mo
358.367 352.319 li
369.624 356.239 li
369.624 340.62 li
358.243 336.995 li
424.382 338.087 mo
414.976 341.362 li
414.549 355.482 li
423.869 351.968 li
424.382 338.087 li
315.515 338.087 mo
316.028 351.968 li
325.348 355.482 li
324.921 341.362 li
315.515 338.087 li
460.082 339.002 mo
452.191 341.978 li
451.477 354.849 li
459.307 351.673 li
460.082 339.002 li
279.815 339.002 mo
280.59 351.673 li
288.42 354.849 li
287.705 341.978 li
279.815 339.002 li
393.168 333.328 mo
382.304 336.788 li
382.18 352.093 li
392.93 348.35 li
393.168 333.328 li
346.728 333.328 mo
346.967 348.35 li
357.717 352.093 li
357.593 336.788 li
346.728 333.328 li
434.051 334.721 mo
425.039 337.858 li
424.527 351.72 li
433.459 348.35 li
434.051 334.721 li
305.846 334.721 mo
306.438 348.35 li
315.37 351.72 li
314.858 337.858 li
305.846 334.721 li
468.329 335.892 mo
460.747 338.751 li
459.973 351.403 li
467.499 348.351 li
468.329 335.892 li
271.568 335.892 mo
272.398 348.351 li
279.924 351.403 li
279.15 338.751 li
271.568 335.892 li
404.2 329.814 mo
393.82 333.12 li
393.583 348.123 li
403.858 344.546 li
404.2 329.814 li
335.696 329.814 mo
336.039 344.546 li
346.314 348.123 li
346.076 333.12 li
335.696 329.814 li
443.349 331.483 mo
434.71 334.491 li
434.118 348.102 li
442.685 344.871 li
443.349 331.483 li
296.547 331.483 mo
297.212 344.871 li
305.779 348.102 li
305.187 334.491 li
296.547 331.483 li
452.298 328.368 mo
444.01 331.253 li
443.347 344.622 li
451.568 341.521 li
452.298 328.368 li
287.599 328.368 mo
288.329 341.521 li
296.55 344.622 li
295.887 331.253 li
287.599 328.368 li
414.779 326.444 mo
404.854 329.606 li
404.512 344.318 li
414.342 340.896 li
414.779 326.444 li
325.118 326.444 mo
325.555 340.896 li
335.384 344.318 li
335.043 329.606 li
325.118 326.444 li
460.917 325.367 mo
452.96 328.138 li
452.231 341.27 li
460.125 338.293 li
460.917 325.367 li
278.98 325.367 mo
279.772 338.293 li
287.666 341.27 li
286.937 328.138 li
278.98 325.367 li
424.933 323.211 mo
415.435 326.235 li
414.997 340.667 li
424.408 337.391 li
424.933 323.211 li
314.964 323.211 mo
315.489 337.391 li
324.899 340.667 li
324.462 326.235 li
314.964 323.211 li
381.787 320.628 mo
370.273 323.947 li
370.273 339.939 li
381.659 336.313 li
381.787 320.628 li
358.11 320.628 mo
358.238 336.313 li
369.624 339.939 li
369.624 323.947 li
358.11 320.628 li
469.223 322.475 mo
461.58 325.136 li
460.79 338.042 li
468.376 335.181 li
469.223 322.475 li
270.674 322.475 mo
271.521 335.181 li
279.107 338.042 li
278.317 325.136 li
270.674 322.475 li
434.686 320.104 mo
425.59 323.002 li
425.065 337.162 li
434.081 334.023 li
434.686 320.104 li
305.211 320.104 mo
305.816 334.023 li
314.832 337.162 li
314.307 323.002 li
305.211 320.104 li
393.424 317.275 mo
382.437 320.441 li
382.31 336.106 li
393.179 332.644 li
393.424 317.275 li
346.473 317.275 mo
346.717 332.644 li
357.587 336.106 li
357.46 320.441 li
346.473 317.275 li
444.062 317.118 mo
435.344 319.894 li
434.74 333.793 li
443.384 330.784 li
444.062 317.118 li
295.835 317.118 mo
296.513 330.784 li
305.157 333.793 li
304.553 319.894 li
295.835 317.118 li
404.566 314.064 mo
394.075 317.087 li
393.831 332.436 li
404.216 329.128 li
404.566 314.064 li
335.33 314.064 mo
335.68 329.128 li
346.065 332.436 li
345.822 317.087 li
335.33 314.064 li
453.082 314.244 mo
444.722 316.907 li
444.045 330.554 li
452.337 327.667 li
453.082 314.244 li
286.815 314.244 mo
287.56 327.667 li
295.852 330.554 li
295.175 316.907 li
286.815 314.244 li
415.248 310.985 mo
405.219 313.876 li
404.87 328.92 li
414.8 325.757 li
415.248 310.985 li
324.649 310.985 mo
325.097 325.757 li
335.027 328.92 li
334.677 313.876 li
324.649 310.985 li
461.766 311.478 mo
453.743 314.034 li
452.999 327.437 li
460.96 324.665 li
461.766 311.478 li
278.131 311.478 mo
278.937 324.665 li
286.898 327.437 li
286.154 314.034 li
278.131 311.478 li
425.495 308.032 mo
415.902 310.797 li
415.456 325.548 li
424.959 322.522 li
425.495 308.032 li
314.402 308.032 mo
314.938 322.522 li
324.441 325.548 li
323.994 310.797 li
314.402 308.032 li
470.133 308.814 mo
462.429 311.267 li
461.623 324.434 li
469.27 321.772 li
470.133 308.814 li
269.764 308.814 mo
270.627 321.772 li
278.274 324.434 li
277.468 311.267 li
269.764 308.814 li
381.923 303.896 mo
370.273 306.892 li
370.273 323.272 li
381.792 319.952 li
381.923 303.896 li
357.974 303.896 mo
358.105 319.952 li
369.624 323.272 li
369.624 306.892 li
357.974 303.896 li
435.334 305.196 mo
426.151 307.843 li
425.615 322.313 li
434.716 319.414 li
435.334 305.196 li
304.563 305.196 mo
305.181 319.414 li
314.282 322.313 li
313.746 307.843 li
304.563 305.196 li
393.684 300.872 mo
382.573 303.729 li
382.442 319.765 li
393.434 316.597 li
393.684 300.872 li
346.213 300.872 mo
346.462 316.597 li
357.455 319.765 li
357.324 303.729 li
346.213 300.872 li
444.789 302.472 mo
435.991 305.007 li
435.374 319.204 li
444.096 316.426 li
444.789 302.472 li
295.108 302.472 mo
295.8 316.426 li
304.523 319.204 li
303.906 305.007 li
295.108 302.472 li
404.941 297.977 mo
394.335 300.704 li
394.086 316.409 li
404.582 313.384 li
404.941 297.977 li
334.956 297.977 mo
335.315 313.384 li
345.811 316.409 li
345.562 300.704 li
334.956 297.977 li
453.881 299.851 mo
445.448 302.283 li
444.756 316.216 li
453.121 313.552 li
453.881 299.851 li
286.015 299.851 mo
286.776 313.552 li
295.141 316.216 li
294.449 302.283 li
286.015 299.851 li
462.632 297.329 mo
454.541 299.661 li
453.781 313.341 li
461.809 310.784 li
462.632 297.329 li
277.265 297.329 mo
278.088 310.784 li
286.116 313.341 li
285.355 299.661 li
277.265 297.329 li
415.726 295.203 mo
405.593 297.809 li
405.235 313.196 li
415.268 310.305 li
415.726 295.203 li
324.171 295.203 mo
324.628 310.305 li
334.661 313.196 li
334.303 297.809 li
324.171 295.203 li
471.06 294.901 mo
463.293 297.139 li
462.471 310.573 li
470.18 308.119 li
471.06 294.901 li
268.837 294.901 mo
269.717 308.119 li
277.426 310.573 li
276.604 297.139 li
268.837 294.901 li
426.069 292.543 mo
416.38 295.035 li
415.923 310.116 li
425.52 307.35 li
426.069 292.543 li
313.828 292.543 mo
314.376 307.35 li
323.974 310.116 li
323.517 295.035 li
313.828 292.543 li
435.995 289.99 mo
426.724 292.375 li
426.176 307.161 li
435.364 304.513 li
435.995 289.99 li
303.902 289.99 mo
304.533 304.513 li
313.721 307.161 li
313.173 292.375 li
303.902 289.99 li
369.949 300.785 mo
358.975 303.484 li
369.949 306.306 li
380.922 303.484 li
369.949 300.785 li
445.53 287.538 mo
436.651 289.822 li
436.021 304.323 li
444.823 301.788 li
445.53 287.538 li
294.367 287.538 mo
295.074 301.788 li
303.876 304.323 li
303.245 289.822 li
294.367 287.538 li
381.726 297.89 mo
371.306 300.452 li
382.249 303.143 li
392.66 300.465 li
381.726 297.89 li
358.171 297.89 mo
347.237 300.465 li
357.648 303.143 li
368.591 300.452 li
358.171 297.89 li
454.696 285.181 mo
446.188 287.369 li
445.481 301.598 li
453.92 299.165 li
454.696 285.181 li
285.201 285.181 mo
285.977 299.165 li
294.415 301.598 li
293.709 287.369 li
285.201 285.181 li
369.949 295.114 mo
359.557 297.563 li
369.949 300.118 li
380.34 297.563 li
369.949 295.114 li
393.009 295.114 mo
383.109 297.549 li
394.011 300.118 li
403.895 297.576 li
393.009 295.114 li
346.888 295.114 mo
336.002 297.576 li
345.886 300.118 li
356.788 297.549 li
346.888 295.114 li
463.515 282.913 mo
455.355 285.011 li
454.579 298.975 li
462.674 296.642 li
463.515 282.913 li
276.382 282.913 mo
277.223 296.642 li
285.317 298.975 li
284.542 285.011 li
276.382 282.913 li
403.829 292.454 mo
394.417 294.768 li
405.27 297.223 li
414.659 294.808 li
403.829 292.454 li
381.242 292.453 mo
371.361 294.781 li
381.722 297.223 li
391.595 294.795 li
381.242 292.453 li
358.655 292.453 mo
348.302 294.795 li
358.175 297.223 li
368.536 294.781 li
358.655 292.453 li
336.068 292.454 mo
325.238 294.808 li
334.627 297.223 li
345.48 294.768 li
336.068 292.454 li
472.004 280.73 mo
464.175 282.743 li
463.335 296.452 li
471.106 294.213 li
472.004 280.73 li
267.892 280.73 mo
268.791 294.213 li
276.562 296.452 li
275.722 282.743 li
267.892 280.73 li
392.081 289.899 mo
382.681 292.114 li
393.003 294.449 li
402.389 292.14 li
392.081 289.899 li
369.949 289.899 mo
360.097 292.127 li
369.949 294.449 li
379.801 292.127 li
369.949 289.899 li
347.816 289.899 mo
337.508 292.14 li
346.895 294.449 li
357.216 292.114 li
347.816 289.899 li
414.214 289.9 mo
405.261 292.102 li
416.057 294.448 li
424.981 292.153 li
414.214 289.9 li
325.683 289.9 mo
314.916 292.153 li
323.84 294.448 li
334.636 292.102 li
325.683 289.9 li
380.796 287.446 mo
371.417 289.567 li
381.239 291.789 li
390.611 289.58 li
380.796 287.446 li
359.101 287.446 mo
349.286 289.58 li
358.658 291.789 li
368.48 289.567 li
359.101 287.446 li
402.492 287.446 mo
393.545 289.555 li
403.82 291.788 li
412.748 289.593 li
402.492 287.446 li
337.405 287.446 mo
327.149 289.593 li
336.077 291.788 li
346.352 289.555 li
337.405 287.446 li
424.189 287.446 mo
415.669 289.542 li
426.401 291.788 li
434.888 289.605 li
424.189 287.446 li
315.708 287.446 mo
305.009 289.605 li
313.496 291.788 li
324.228 289.542 li
315.708 287.446 li
391.225 285.088 mo
382.292 287.108 li
392.075 289.235 li
400.996 287.133 li
391.225 285.088 li
369.949 285.088 mo
360.598 287.121 li
369.949 289.235 li
379.299 287.121 li
369.949 285.088 li
348.672 285.088 mo
338.901 287.133 li
347.822 289.235 li
357.605 287.108 li
348.672 285.088 li
412.501 285.088 mo
403.981 287.096 li
414.203 289.235 li
422.698 287.146 li
412.501 285.088 li
327.396 285.088 mo
317.199 287.146 li
325.694 289.235 li
335.916 287.096 li
327.396 285.088 li
433.778 285.088 mo
425.667 287.083 li
436.329 289.235 li
444.404 287.158 li
433.778 285.088 li
306.119 285.088 mo
295.494 287.158 li
303.568 289.235 li
314.23 287.083 li
306.119 285.088 li
380.384 282.819 mo
371.474 284.756 li
380.794 286.783 li
389.699 284.769 li
380.384 282.819 li
359.512 282.819 mo
350.198 284.769 li
359.103 286.783 li
368.423 284.756 li
359.512 282.819 li
401.257 282.819 mo
392.745 284.744 li
402.485 286.782 li
410.979 284.781 li
401.257 282.819 li
338.64 282.819 mo
328.918 284.781 li
337.412 286.782 li
347.151 284.744 li
338.64 282.819 li
422.13 282.819 mo
414.014 284.732 li
424.176 286.782 li
432.263 284.793 li
422.13 282.819 li
317.767 282.819 mo
307.634 284.793 li
315.721 286.782 li
325.883 284.732 li
317.767 282.819 li
443.004 282.819 mo
435.278 284.719 li
445.866 286.782 li
453.553 284.805 li
443.004 282.819 li
296.893 282.819 mo
286.344 284.805 li
294.031 286.782 li
304.619 284.719 li
296.893 282.819 li
390.432 280.635 mo
381.936 282.482 li
391.22 284.425 li
399.704 282.506 li
390.432 280.635 li
369.949 280.635 mo
361.067 282.494 li
369.949 284.425 li
378.83 282.494 li
369.949 280.635 li
349.465 280.635 mo
340.192 282.506 li
348.677 284.425 li
357.96 282.482 li
349.465 280.635 li
410.916 280.635 mo
402.803 282.47 li
412.492 284.425 li
420.583 282.518 li
410.916 280.635 li
328.981 280.635 mo
319.314 282.518 li
327.405 284.425 li
337.094 282.47 li
328.981 280.635 li
451.885 280.635 mo
444.523 282.446 li
455.033 284.424 li
462.353 282.542 li
451.885 280.635 li
431.402 280.635 mo
423.666 282.457 li
433.763 284.424 li
441.467 282.53 li
431.402 280.635 li
308.495 280.635 mo
298.43 282.53 li
306.134 284.424 li
316.231 282.457 li
308.495 280.635 li
288.012 280.635 mo
277.544 282.542 li
284.864 284.424 li
295.374 282.446 li
288.012 280.635 li
380.003 278.53 mo
371.531 280.304 li
380.382 282.156 li
388.85 280.316 li
380.003 278.53 li
359.894 278.53 mo
351.046 280.316 li
359.514 282.156 li
368.366 280.304 li
359.894 278.53 li
440.332 278.53 mo
432.957 280.268 li
442.986 282.156 li
450.326 280.351 li
440.332 278.53 li
400.112 278.53 mo
392.011 280.292 li
401.251 282.156 li
409.338 280.328 li
400.112 278.53 li
339.785 278.53 mo
330.559 280.328 li
338.646 282.156 li
347.886 280.292 li
339.785 278.53 li
299.565 278.53 mo
289.571 280.351 li
296.911 282.156 li
306.94 280.268 li
299.565 278.53 li
420.223 278.53 mo
412.486 280.28 li
422.119 282.156 li
429.831 280.339 li
420.223 278.53 li
319.674 278.53 mo
310.066 280.339 li
317.778 282.156 li
327.41 280.28 li
319.674 278.53 li
460.443 278.53 mo
453.425 280.256 li
463.854 282.156 li
470.827 280.363 li
460.443 278.53 li
279.454 278.53 mo
269.07 280.363 li
276.043 282.156 li
286.472 280.256 li
279.454 278.53 li
429.195 276.502 mo
421.815 278.17 li
431.387 279.973 li
438.739 278.24 li
429.195 276.502 li
389.697 276.502 mo
381.612 278.193 li
390.429 279.973 li
398.503 278.217 li
389.697 276.502 li
369.949 276.502 mo
361.505 278.205 li
369.949 279.973 li
378.392 278.205 li
369.949 276.502 li
350.2 276.502 mo
341.394 278.217 li
349.468 279.973 li
358.285 278.193 li
350.2 276.502 li
310.702 276.502 mo
301.158 278.24 li
308.51 279.973 li
318.082 278.17 li
310.702 276.502 li
409.446 276.502 mo
401.716 278.182 li
410.908 279.973 li
418.62 278.228 li
409.446 276.502 li
330.451 276.502 mo
321.277 278.228 li
328.988 279.973 li
338.181 278.182 li
330.451 276.502 li
448.944 276.502 mo
441.911 278.159 li
451.866 279.972 li
458.863 278.251 li
448.944 276.502 li
290.952 276.502 mo
281.034 278.251 li
288.031 279.972 li
297.986 278.159 li
290.952 276.502 li
418.45 274.544 mo
411.072 276.148 li
420.212 277.868 li
427.567 276.206 li
418.45 274.544 li
321.447 274.544 mo
312.33 276.206 li
319.685 277.868 li
328.825 276.148 li
321.447 274.544 li
399.05 274.544 mo
391.333 276.159 li
400.107 277.868 li
407.811 276.194 li
399.05 274.544 li
379.648 274.545 mo
371.588 276.171 li
380.001 277.868 li
388.058 276.183 li
379.648 274.545 li
360.249 274.545 mo
351.839 276.183 li
359.896 277.868 li
368.309 276.171 li
360.249 274.545 li
340.847 274.544 mo
332.086 276.194 li
339.79 277.868 li
348.564 276.159 li
340.847 274.544 li
437.85 274.544 mo
430.81 276.137 li
440.317 277.868 li
447.328 276.217 li
437.85 274.544 li
302.047 274.544 mo
292.568 276.217 li
299.58 277.868 li
309.087 276.137 li
302.047 274.544 li
408.076 272.655 mo
400.708 274.197 li
409.437 275.841 li
416.79 274.242 li
408.076 272.655 li
331.821 272.655 mo
323.107 274.242 li
330.46 275.841 li
339.189 274.197 li
331.821 272.655 li
427.142 272.655 mo
420.1 274.186 li
429.183 275.84 li
436.201 274.253 li
427.142 272.655 li
389.013 272.655 mo
381.315 274.208 li
389.694 275.84 li
397.384 274.231 li
389.013 272.655 li
369.949 272.655 mo
361.917 274.22 li
369.949 275.84 li
377.98 274.22 li
369.949 272.655 li
350.884 272.655 mo
342.513 274.231 li
350.203 275.84 li
358.582 274.208 li
350.884 272.655 li
312.755 272.655 mo
303.696 274.253 li
310.714 275.84 li
319.797 274.186 li
312.755 272.655 li
398.058 270.83 mo
390.704 272.314 li
399.043 273.884 li
406.385 272.347 li
398.058 270.83 li
341.839 270.83 mo
333.512 272.347 li
340.854 273.884 li
349.193 272.314 li
341.839 270.83 li
416.798 270.83 mo
409.761 272.302 li
418.44 273.884 li
425.458 272.358 li
416.798 270.83 li
323.099 270.83 mo
314.439 272.358 li
321.457 273.884 li
330.136 272.302 li
323.099 270.83 li
379.32 270.83 mo
371.646 272.325 li
379.647 273.883 li
387.317 272.336 li
379.32 270.83 li
360.577 270.83 mo
352.58 272.336 li
360.25 273.883 li
368.251 272.325 li
360.577 270.83 li
388.375 269.066 mo
381.041 270.495 li
389.008 271.994 li
396.335 270.516 li
388.375 269.066 li
351.522 269.066 mo
343.562 270.516 li
350.889 271.994 li
358.856 270.495 li
351.522 269.066 li
406.801 269.066 mo
399.775 270.483 li
408.069 271.994 li
415.081 270.527 li
406.801 269.066 li
333.096 269.066 mo
324.816 270.527 li
331.828 271.994 li
340.122 270.483 li
333.096 269.066 li
369.949 269.066 mo
362.303 270.505 li
369.949 271.994 li
377.594 270.505 li
369.949 269.066 li
397.133 267.36 mo
390.124 268.725 li
398.052 270.17 li
405.052 268.757 li
397.133 267.36 li
379.009 267.36 mo
371.7 268.736 li
379.315 270.17 li
386.621 268.746 li
379.009 267.36 li
360.888 267.36 mo
353.276 268.746 li
360.582 270.17 li
368.197 268.736 li
360.888 267.36 li
342.764 267.36 mo
334.845 268.757 li
341.845 270.17 li
349.773 268.725 li
342.764 267.36 li
369.949 265.71 mo
362.668 267.035 li
369.949 268.406 li
377.229 267.035 li
369.949 265.71 li
387.777 265.709 mo
380.789 267.025 li
388.37 268.406 li
395.352 267.046 li
387.777 265.709 li
352.119 265.709 mo
344.545 267.046 li
351.527 268.406 li
359.108 267.025 li
352.119 265.709 li
378.721 264.112 mo
371.759 265.38 li
379.009 266.7 li
385.969 265.39 li
378.721 264.112 li
361.176 264.112 mo
353.928 265.39 li
360.888 266.7 li
368.138 265.38 li
361.176 264.112 li
369.949 262.563 mo
363.014 263.787 li
369.949 265.05 li
376.883 263.787 li
369.949 262.563 li
level3{
gsave
clp
[399.597 0 0 399.597 250 250 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[399.597 0 0 399.597 250 250 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (\710\742\740\755 \710\742\740\755\756\742) ()
%%Title: (cubic-03.eps)
%%CreationDate: 7/2/2017 12:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]l@oD&@UIQmWM5SQWiF!'C-_Vp3+K(g-*5i`2kbjN]-heW6nGNT#n1V5GM^h'f5"%@?T=*8Xkh+:XJ<--Eh)"!c,rk0&>
%!\p.AVuZZY7T1#ok8u3)#KDJSq]%2)Q3T"Th9U;iZJOoDbbj(\D$<hp[<CIrX2-Gmi)XbSc+a<p;_'f"NH3*)B8rd[27kHB*t[EG
%#-uRbnRW57!<Mg1_o:fV(4Za<^CMOig:6$uIF['u)BHE?mP"4$dHc"a^1"Gl,7%:0'F<rThU0CT5\qr9_mK\5#1@ft)`7Gfc[^oW
%+8_0#+qY9SFV(@(>7&XgNA&Gca>[:C!;7/&d=3e&qbQE3'4:n^kpN*!UHTNH+A`*!LS#Hb!WB/'"BiWp`"MF*SX.iDoZ#2m67M3%
%:/gKEGY/jFMY$<nq02%lN=HVU;.H+5(E*!J&Eu0n:iq5s+;,p<A]_f5og/Uik^RFQ%WnhIGHGR\])@6N"/aZgR0C;A2"g9JgZZPb
%"UpU:N1H=N]a=7KRqJ3/ecCgknD>!N;<ug*5%q+P*2!Vm$:moFVh8#FqlV1:UodD;3dSDO?K$He\:Aj-Acm-[OomPe1'*dVm9,^-
%!6ob$gEqhl+::#D&PZdW2"n"de;X):a)OA6joe>HpU`o6<Fuf87/k&>`$Nb0ZMhNq>2[*OfA$#gC$%Eui`R$rr1nl>cEo)NZ\9a"
%LVBdm+PO&#RV'h@ebt)L!tp6H`=)r5T:4-BBHtBDrc(PZPFhBj!W9Ib2$]\iG1HN^O#<bCQLqtX?LF:gR+=mfXRlj,,(VVaA-9fR
%<X'K3h8+q`7ORa56/])M#KX*q(4V$fX6<nTm9r/1BlOFjBVt`&Djh[W@0`O7.tMK<g[RWnhpg@`2h6BsB]k=mn;@JpF/cc*?XuHH
%3Zo^'#igkcnH"7)-XU.nrAkd*]j9k_eB-=)_%WI`P(iA,P1_[</Vfu8idC`Y<3JOMldtt1jZYN42C^E)6=4MNlu.Suf-pH+Z*/B+
%B5PM$GL3AqMPf'KV+D6"T3P+Tp.:aAl,5k/f)be/]>RWOZY@q#>,Q8&a3c"#]@5/\[_>_GN28_@a5NY\cJH$tV1*5,b#AeRTG).Z
%LH("&[!oOq2QG9W\q^4+Jk"3n2;6up",2<RfA66X>9+Cf"q#LTK>7aKlbR]-o$?6*]Nuj!qst=VTXMO?B"tBH$uf*KJ[N[E>AJfe
%W*,bn_Z?I9?lUbtPs>;Ys7;<=5Q=9T+'tq?bPNYCFCjhI.,o_4eBgX6E)H'V%/!H@N*Q&u1o>8&*JN/''lj=DoWRjL/Z0o\P2TU`
%[fG'QJ*^V^YoLK&lOr\5i_+krL.f@L$<IS;1gCnV_bhB_(BYHt5lU6m7#%5IM/Z%V%%"i1E2C'$>T#/P/tRZQjr)qta-/^h0Cf`\
%19]V/j\pPqc_0UM5PV<F#rGlq>cb^I]R^!;JgAEh!geeJP`UVM,@j4M?aRm^7Q;!9Mh3@7&mV^J&X0/L.U4DW/S;r&6qK5RWN=%S
%&:g])8W'<9Bj4'[?i4Q6-t]caXI>E\!_a&eV)"HtRZTBKUPtEL5l<0HCBelM9(Ob0FIGg5i(Bj,P`TA)X=YZca-U1>,/,=Ma`+4u
%V=4X6ck9_/942GC(l!_Pe,`8r,;CrY$3PUuUmNuD)4#l4B$h^GdS?U'6lTu+6lH>gJ[LMO>_].Af-!o1g*Q6]nXrr4XA`7=+q$XJ
%oLB,18V>;2D*a%0J;u%N)&^d."uLq<oH>MlA-rO]5ncgjA.ZPKJ&iL]K#)K#KT`&X.P/(\Yfa`m"BA?2<DcaRA]om-5J.[PQgDD9
%U-*Hf'/+@B-$V)9BRf0b?JLp+*HNt/"VdNR'`IH?rn&t-8Y\qe0(K6#>eDhSOl5__bS-o_<\_O!(05G[eoMbl/d6#pJW$UP8OS%2
%C]ue7&K%U@PQ4;dp&\BV'PINQ,VjHCW*inUUe[R/$s%&!c[t#h'&[1V_)a#QWFQj)#b&_b'goEg!Gqq0"$;:>>mdr8!H"&dW<?`L
%5sneZQ8Aju$PkQ.g8fg2"^M<_/A\On+Mr\q1SF+LP@ZMBr@(3ieK=sh+sT'nPb!38(\,-'h&fb4mN6&X`K%XAYnul]"7IOp\\r]Y
%o^5'>"(Xh![4Z%O;XFk8L^U:HX'H\L5dJUl$nFZAb^a"t!_T<L@.7=k%gP4iT6QBn70,]!8RaZ8+p7ng4<PeF.!'k:pQX/K*Y4$*
%#,-Xj'+h1b;`'8MH-cRuQ>ro8!/a)B@QHc/VZO)-]VG:(FO4.>Zl>+[!LN6t9H#"+8Y\Qg$5SB!XEtE0&R0T!kH\P1NcW)G*+89g
%e;I@p5lqK.Ca`&oOg9QK'R"$DKcYF,J\hq"<ld$u_$:9/Z8goQE&9t7%1,*''OkUWSheY\`8LiP&_OtK3-[^.$^=K1@V:7nKE0:a
%"cnOG"UhSpW1ZAn;'7e@@lKNNZRH5D)P7(,"26(Hb+pKUIk4\L&VY![W.SIlHm]:c%#0>g1cT89b[b/D1E]L2Fr''TE9BJ-*'90]
%Il:j4:P:l<LLLHpBVq=c,Kj:-;L066O,"Rp2AGJ?6(c6;PGAB'V4=nZ"RX*u'e^sN]Md;e![ZoEnT&,*Ijl,^%RM4mKHRuu;)o0'
%&>RZ5(J2Fh_ZCDbma"+:<^Fi1:gt/?LkO@e(b5pB(R>%h:Y=e#fZhm2EsII1CJM[*S3_$4]C6NGrqll1Dcn34OR"6R)nG>MXD?@,
%f]Wi]3G\m]D44Q3m'p'^[ZOQ%E@O=\2iCs#G2Cl"B<_iji+.XK.I0m&95uT;\g6Y+h+MiC-QQ,Jl'@l\V5ukn2Ue.CZ$;599scJq
%[Y)?tZ%L!kd?aIcS?UYSHnq!a$AUSYbPmWgbI2sa::O]-fG;Uhm8Cs$>pSt"XM6ccJ8mOP,Cbo!beATO:<pM%0\h6e<XV6H,]n\l
%$0<!cS3q_";$`7=U@I/=V/U+G>2^K^+`XuIH'7Qh]S"'%?5<ck)3=pI(Y&l`5\mTb+S+N3aN%fZ!Es$[*(gM+V-94;0CjldZWMX<
%kU^"0(K([+o:W%:ZEt]/09giNcCV=BK&QpNU9uIq.gU;b?jM:h:&qBT!19i'-hmj*O+tCe*<)fdq8cV3.p1a`CPBNf-(2+d)9!hc
%pYdc.7jS$*#/K$+!8%a3mI6I_"c;ssYU9\\p#R<)A0<4q^pIYqSP8"h:B;&ZT`CpC"V%.S"2QNWJ[Io.%%/H45"R`q6&?#<3Jq@N
%hP*_fpgQ>lN$f`ks01)97P;I\Yq7r57@0jKN+?5"S`eu?gIP_:>\TAq>#uJF/.C"MK@*+KA?DBSXl#(<D^<NqGYO'*:7T\T2(RM`
%CoF@dNQ_3\b;M.%hu\d2^h!aTY0$3g>l9]ROXpT&l9<,p=b[1r/411":.j=\&GnZ:LER%gLkB_NJ8c;._@26hk2:lBU2lhn`:/Ts
%-\V9pJd@74EB?bSd(dq^VGV`d_TH6u+j+ZJ686^Un&,!O9]4gJoA\DA?6"seIrd.s4c0e66-Lm*b$\q>X\iU3?5q*6#:kL_W$m;Y
%+seglTbU*TKSs<m<#Xa>'g`nnp'C@![Ls[h/s(E'J!3um`*B$X+k)LHHLeOSrN3k+hu\ccNq\=42#cCG1AH@rmgoEu`@V"M[JhQ@
%gahLaO8?iDJ5HYS@1^N_'pNQLn7c!j800`S9HdP(Cad)67aWB=UVdKCPpo_P0d8SKVkh.[XUr<0.q#:(<#-8o3*>V^fQC.Mb[QdZ
%i=_i;9kF_OaXf?*/2i%\2LEO#6/7+9e6-V;Ch)Ts8]692<bWHkXHD;"`Epg3&?RM2/Q0?AQTWY.B,)0sX/sBoPs]g@.QODH=cp^X
%7A'q#S<TI@0_$Q$UqnRcfX?se;8<bGM&oo)Tg,K=6[TO;$R@,g/0I#'@S'2Mm>s/'=Ip4m.#Z8&&h]iQE$6"P)`T>P].Y3F'QQf:
%Z:(jc<Gkf6o]_TC79j@t@B%Ws+TZ,*8uj4ML0,&I0>r>Ia+WeM;3_@#`8dSlN/Ht&VG,.418mSZP#o,gRKDTK<#U]7$N`ge<E)jB
%feNY5`IWJ(!Y2f=K#XW1jeZ?J1./AD'n<==),Ts&@JcJY+&c\s>sfo>+4j?WJb'R'4!=V.Nsh-kNm(TFSM=.f6K'=EM^,Wg'tC'@
%L^i\c%W4h9,N7i\`"AMI"\0id?u\$Di/!E%lGQgFfk#,EQaSd^E,j2RpW5DGPAn/^ig<NGMMrO8rE('>0igjZeX<Q#(WV,A*"Sd"
%:rPkK\$5:db2"8O>NGM!b0!u<38R_UKJ2>pT#:(\N?e6-No3M$/m30UM:lUD@%F_ueTR?aYY*E(';+$UBfe*5SY@t&`8l)0mM;Q@
%?iYOB%E7>`8:5e.qNE*[bi_J.pq-<J1dj\cN<EaaE5<4s#E9(SYd@O)!=)dPa!3-dI)*SCE,>/Bg68hC.*4T2.^Z./M]2.AdW._h
%r!+Po9&/n@&J\$\eR!_+0g>]nfX"U87=Hdmm:VDj+!%!.F?Tr<i7lLJmaS?%piG.;USD^1p\Q=&,m%k3\!h1/0rFX@?)'7?lb,hs
%!t^`8<u]+-f8XC=X1'ef'A,F#B[QVfrRLq.c2k_ACV]=0,d:DOU@$YgdPn9gYd"*nLNk/=Tr8Z8_#Q%!NL=CUXrFcphZl(uij@A.
%_p%"%q"T3E=nqE;L%!K#_8I]G4m/e/kGX9)4$FGGK=<#jBlU*l4tFlQ?$iG5B@!OOi!LWEp`&b)fu3l_>8f?kG$4iM(8TKYdVt"<
%B,/E8rc;+4>#3IfosXs@mUo7Si(o7kk&\i%K@X29YC4mu/4VAa[!6>TKtbqf:NEueep8/DSb;`pgCX(cQp]'_F2ke;Dp\.:V/8Vm
%`b*Ydl&Wj^\]*0YT,A*aQp6o7$r;c.T![4+9L$C_Q?Jr(]:Z?:G4_rg2nM7uED`XQ:r+,nbPFC_;XJ+SI*L$ff*ad,gr%0sI4U`B
%1^Y4JI6N2+ZsF1e(9-*50saF4ArD@3.Q:#"*4JK#Wa-'Cq<"YjoY+'Uk9EEfdp11R`\);B74u'jjVGD^,*uNpEaLemj1\DDkDPb=
%alR!U(Wbb:0eq_a*+V+1r_7;Hl<;1)CU&"n3uFLerEAqNX6DmQ?V0S@%/eU&?U;"7I9M#`RY+2'C6#(OI;R?s)-U78bh[*Ubs'XZ
%il<6DAikXJpi0#n.JbB@b@B\:QW^Hao_o)r@?/t9)<Pcg=*YHJO6F\DAc2>>^Zq$SQ6AKa^$2FQB]2ZYkBn9@kRG+'XfN>]RQlO]
%cke%f?a5/'p3&?]Zu5l>4daY]SI^\^Xp7\'S,'[+[e7'N[b`s2)MA%b9:>0R?i);Oga7*2E5[!Ynt?,kSdj_8h9::2$q\,c2LbF/
%j2]YZN4`l3q`0-pToIqgN.SH:F&q'MQU/qneccgN"#Cl6r3p1+q:Xks2%/?[/Mnfn3o7tD8CLHg5<MUhJ.1t`c#c)$@/]T1c8H2^
%>Y&@^*on[Wm`^#FX_[Rp/\UUc:O0+Uic!U*T2P'UO.Rr;E/srjpp9*eJ#:XU05!=@oPRAnP+9^/a8\L'Re-&R8$P&8o;gk!H?%)?
%&iW`RjhpuRB%G.o^8>G\Mjj[6Rl40Afi5Sprkld"jB"Rd7)s`2er:`n1@R*;2WD(j[pl$)[XH9Qm&M*`o>/?"m)f*lO'c]fITsI!
%Fusj=c9!+CC'N.KKc-A*1\MQBf5J5(CK>^`(pEs:p@&72_tpqVDUt/`O8YC?=l3/f9B14Jn2WZ9qZUnspSD$!^=F_t&`]D<h='BC
%o&B(dMmo+a]>*DSH^Phnj+EbFEBJ=AJ:^AU>J.#Un*LE[^+[<`;U,1AOtYcT90Uj?I]SeFAq%a'9kRDBa6$=#Y-m#1Z_08MZG2jU
%q^0eOn&!*TiQq,i^<)VQ:"nfRRT`j4l0\J,esT0te'`c:O0-=1aE5de'?Co5pQ6Nnpc67eUS!@l7\"1N3:f>V7nmiLI+/iO0_i7r
%>RK9qI.ED^Qu2`_CG'4IFniN!E\=!YiM5ru5HEWG1LL**9%E)ZSZ:(RqE'8XS74<0anpE8Np*</IO^<[Dd'7;YRV_OSBanb#G3b1
%Jj1h6gLf2ql=oANTJcLP_g[Ct&+[*[idIb6`Qsa%#hHB8kit-/nhEFqMU=Asq3i?0FbW&#[;35KfK+sL2'qjV!LeK.5BD-5B[+<!
%mlhKp":BRZlSG=ZR+#NDBs`$-a3?DOX][hBrS.M66(Mb&Ts]lG0,qRo]128n*m>C`(+2sk,!d`/V3<<VR$j<3`Sr/c/CeB]C"BAh
%oe69l5X1;]>F\-eGajPr.-7XS(<$e?oAY)Yr%*_dcuMn,UA.WdfftDc-(JWD/"K-!_p%*kb2Otps2*MAcD&NbY4Ka9Pco?J`Ks#`
%Gou^EcD()BAmQ\HGs@5HCG'4IFaV`G.-7XS(<$e?o<RY2jY"e?SuM6;QTnn9VE("7rU;pV-bL3N0n0_3R%K61XeV9G#eng[$^JWm
%1k$dqo.R6Xc(k=0;t4'Sl"B8l/GjH@?iJ0FbUi,7ce(*`@Fom_?t%Y&G&:[>k/+94\c>ldCL8Sse'XsDXP1OkrO8o_,$=_?_:lc+
%/ZdZUg8]FBKV#*G^HH?VnKEL6]-TO?)h<iXo^g6s>V%*A,$6Ck`A/@[)4h3)4q@&oVD!=fiUbu&.iS<2]NQ_%r2hpL:$qiL'^g7:
%2-oY8/T]o](Zt,D/Om@H=,lq7(N0d(lg!\;5OIbS)BR[JZ1`mC9CnQW>We6_*+q(s:`A&K&h]bJ1F93<i0-u`*V:nIcWU+B:I:Jp
%.LON/L'l9ir(R@Qrrd_(IhV<=i:l"B1;++WB:elRCSB/-HDf[#+OQb*q-78[)P<Kdr;P@E0-9/GO"H6W^S?1NTpjS=,bHT!f'RP3
%Cj!rCUon?_8TsB+g9YK3Js=O9>Zq.M`P0?f>*=(b&CT&8#X3L#[&5b!"#n3Gf`r%ON\V(6^s4hKI[ir=ME^)K,NG3dM-ANpf3<RY
%O,KV\htV7fAZgFADgM3<QZ/,Z\.S7pF#u=9JJNJ+/bXZ1qnKJJs#Yo>&'gUr0D9l3qnJ'fho5T`@fLZ-$n_1&^\"!LVADCi*FOUo
%pl$I7HbM:>fp_GWa^WS?Z0/aOoDRo-a%)5$<3(YCShf'Y+kqHfls5N`.GK'[feia*SAh@&X7lW<<^mVXoYKL"K;h;=IP!q'kEG7f
%Ybr6opb:f^DAC#l^MF@Sca`A3F\cd)mk<adHulZnO?$m37>5PT+o=-BY7KO&.$MnjR;DEahF3iK;'u/dGtOg^eb+(eU-q-F^<<IC
%M/S.%eGG**?:gMiXZ^Z2HVm"s`Zo\T<&=1oI.LKZo&*9fS4c%jdXE%86%@>+#)=b&NB-)U:"mC:L`?aZVKt-H9bNGU(%]YGg4M-V
%aq^11nR8;Q&&"!0L7#IIg[6&K?*1FmchuUM>f'Pcp3i.(1$HNYfVAD%9(Vp,Mo*Z3n?OIT/.+%g_TS\CZ7*@:$88#t.TC"'Kbpcs
%KBk1K_TN@#TSp\1cP0]_(L2?YF$;BY5UokBcWjP5^=k0H?g]W^5?25sP`2JRRHFBT'7Lu6Y^"g=D"'.E&"E(+_lQ(=_Z)p/g%UA2
%p-BA,nPpW/MUhTLc'VUO?T?(D2J<K]3#b0+X?4J+n0Fm'bXrW\EqUNrh"\n.':?Mb':=5X?5HCE>!.4I>&*o+Gtq51Y#W]\(,)Z_
%C3Se:Gj<f<Y5F[o$0M51FrrApXS@$=.7TblCAHgsOrkP#iU9oV*]%`Jb\FP`pX*a>l4op<H/@-M)<UJ(Qim8Mg&7A]^oYf)=++6F
%,")6J)&gas/"^V@?Ui#d\Le2->5jOor@h1%r>gN2&?!KBN95Pmj!U.]@OU?!#sU`C'P#ks=rh,CYiRN=`t0#/N&f$pk.Zj!I=XG6
%+!)2?N1%q4kAAHsl55F?`iRG/U5lLWA'@Lbj1geOoeg)(Y.f42<paY`^=GD(%6s%#8\7d[iK0Z=9BBN.RV+Z/B&c(H"]NiqHFBlh
%%J4hs:ED3A5:tai49_TFBUs]`Ie.\4[24*l9XW,3hrpCSQ$8!5":22E1k"mPKKZ^hjeItr2c!TI_ou1@qhk[gq,5_A5A8-!KjQs4
%B,kP?n8Ou<Z[!lncd\T3j"%pFG0Q<po7t_ja,,kD*q`5lEP"4o/f)c*o!<4gSs;.Gim5q52X#?"IYrbqC![!t36t%0`R@U0n1sss
%f6jD$F&K%:\XU5IKi1,mN3@?]b82sUF5Y4P1GaL8b7=u=_d9[SQ/Dijc]desrsr+qqO`IQo<t2T`Mp%FMYD*OB2OMpGajO^4Bc&u
%n'oW,Q[@lr(:i6#I+9dR\OAEcaQ>t&=_)T3D!o'+c1qYB^Nqg4"cnF9E?C6BR+$0&#A8s:DNW3rd^_e-2o<QYSQhn2?RME)^J[,U
%Mj_+Ik@4'"8Eft+Yt4+k,Gi"1bt>+=q/M$o4eMUd0.l[Un15X%0`>3.I,7+Q-a/)jqr^R&Sr^F,Y/D;D=(7'2I3%A@CEAQlSRQ[S
%!]fhCnuYeg.lS(A!\ui@g$!qCnl=E2otNHa<2hI^C$D27f<NZH3qCD=]I]g/;S9PF7K;^70oI7=X=fl/F>-.af#&#E9RSMI2W*uH
%oC;G`li!8$Z]3l*m3bODD)!VrqlB/N2YX*A@dr#?<lE2>BS1$hkPG]mKsKhkN#TX*(0<[pP4St7W`I^LZ8ITT87;H4)nt4=4#_W1
%ru6X+GemVRnZ3nI$/^,rLHW.G1QeaLF/&Ue=p&-dRh"Sfpqa+G$I@f/?/\`9^bJ1$hhLL;mi2Tk!]eH3cXes-e`32hA2)Jp_,%a\
%G]'5X57c\Y3R@WZ1#':C,jB`@)9sGm_>Zh8pqFio-s?aB^G.-?`'h@f+9cNicZN'k31rCo[JQR')\t`dU=fD`".dFW*:ID\UhQfp
%O'nb<BjZ@G#B$tqR.P?b+Wf:hk/!*/BhZp<pof%i^/rgq7_dg.ID)LcY.Wdr4+uBGqK^>QQpNEqisZm6Kl`cD+D',pUE:Ohh)YIF
%<jH\+ZgU^+^2a.#j#gA((G?_teY)+"fT,cqO5E!U\^ZEgp^EduoiCUdr.*J>]AD];O[Pg*]P!77[Q/gk;+h"34s&0,(H.cn:t@Ml
%P6:WN>Pumpo!/kj@:d]re(TT.]ap.!c*<PL\+?,;[+8jD9RNu+kc6o,j7hFC2pF3:pWpp:q2!.*rZN/aYOId8hcFBX$9Mo#U\eJt
%\bbLa+VXldHKJV=jNARKqhb)hk"Pp28jF:rr/shXT'o#L5;tMWYA1G:f,i7L4RJ[f+*SCDgFAZhJGQ;am$k$3bo5Ceej!b`LAP/r
%cg8qGFcm(+fXS^*?hl9<%Ui/dRUcZjo#4k&OftQkEA9]^^:Kd#0@XglC.<]$A#<#oE!T3Ycn3S_Y1E#@rOb^1#'KpCcfHg[*jZl3
%c:&^IZu3I;oV1t4DKbN32l524A2sTg?Pc3`J'S_Mh_]qWHjS5YE_'-TR<HPp)%q\o#kWLZ[du`f5@Z*R_,\0\[(X6Pq8[44+1IBS
%Db@KG5`_r5JYF-nc+i!-)q(%[HPi[clg5:/3ed*6AL\P!:/c@uW5';Ib<CE.Xr@g90&WqC+H$:'=\;p1H%p]S-!oZkK?21t0>e$`
%'cA&YBSPXQ$t4BU%brIgN.%Mbju`E_"J9!$p/cdA![iQr7k.@2'7RSZEsFj0@"A%I16ShBcnZ5qLXj^^QIhRO^TS=5ng256aAWM,
%R?7Z0`?-L_JQ+id;ma>C,@.prJG-[*(DenoG)2!E+%W!@5Q(=I^-#/6CY/?T<S#Lr:50\D!7f5O?Ul`V"/:SNDrL`V*L`]RdWs@X
%X!>9Le%m"pB1VLJcQ,=ILFNhX%KBQ*hC=pf7-aetQf/3l;@h?Odq3mPJs\^'og(,Zc^Qfm/IV2naJl7';h<1$?#'XP5'4K$e#WEt
%a*%Ho`ug:T4P@:JZ=Del=(HbW09aWLb4CC+FQId"h!R=Te%362V`kfVd1;l3Us<Y"_dDS5<,G/WrCEo%Q5f[uNs!6DYu-"Iir4!'
%91Bl6JF)lkSq%20;pbE>Ql@-+HI75=;Z(m8Hl/ia4SoeGJVl.q<ed67T"6-D]M[>Xk2.^4gt>MK`+OABl^P!o0Rpi;7CRR]$9"$%
%KluTd;u[["VXXB^V>p45^=H3M<WAKgrLO*ahJ4%kY@GR4MIPS,FNAX84HXPh0AseoEF6ODIK!oOU-</5hs5OW-p00DSN_*Li6LNP
%I<o^s$tG#/qg@*]4jT*Xn9mcN!m@@-k"#?6bW\E4-riFr)R[nlOa&SK)pM&AJLr/s^uG)(cUL;'Nc$2`dF.nq"[]=u0GsUm%jk8\
%W[YZ(c@`ebhQ%*$=@$jHB`5;@cC&7GM%[HB7Mr=i%Q<gPG7W.i\DH,$-kJaOgK`*1S;MYPcPt#8G0k'ZV4oKRgOiqOY>u$;Ei_qU
%Id?45`]&=\CK-lYOIa_qh06F-!#[B'+^AZbUM<l'g4V>^\+OXS*;#^i>7^B&?*iK@86_J^R<^E,bW`S8c)fPQk8B;B*$dP;Fo*I`
%lW+)^H2%Ce;![D,2LLD;FfGb,#Ha%F_`M$<h16(.N(TaUr,BLU%q:iDK*6Qcd$dH(HQ]59e!ofn)=?-ETKKLl4L3AgI3Saa[,*(9
%@Kh)[3a/@88e.<`7U[mNf,1'A*XLDMZ,k,Hd8i:tI"YQ<F4\r'jY3>9qI\YPl[`*JP+b(-l+[.@IgdeIYh)^Ed5K/W5R4!PK?egK
%3RH/75d=t/##4jEmR2@jcNH'f!/grGC+O1Pk?38>>0qfgfRlt>>o!2Moqtd<1Bq#j-.]o?QZ,Q4J(&]I=8qiR&Fs,?Vg#o?JKfn5
%OJs(FX^iOh[BN)DW'doA`NpK[#&>-s;::mO^@.DUQ2;6.@LQFk$QUKSYdPDh)h\$1MU@M%%Qa:r!Q'(HrICfE"egpX`CL+ZHEZ`b
%'qS],5@-3iS"'ra*Di(u)Gr,bn&C^Cg9lK4dfXm%j/C`YS(4cTC4=XD*E8QtIF=kF1cd=eW0m'5W(IL'j]S"CZ@('dGcUDQ5@P#e
%rL(-EhJ\i:72L8_d-M2rltNT]\B*F[4'F@8(j$=!]`?pg$(T\]3@c/,Q-F28YDb2*J^%-"5Q!T[RuJC]MdkrD@=#<L;9r*QCRpRo
%)b!Wna#p;r50bjB)9^B-U91>_DB-.mbH7aR&miPaqY)3-qTX8=d)+5YD2UBF/jd&:4;#I9\=H5"]Nhf1Ih\HrVc66qcGcU!OG(`b
%n36%P+^+ct.Oan.NjBI;'\AiL8fSMB-=RI]OjkX-UBPEihLsh(+(jEsp_kNrmWsWWnRr4maY[h/#T<p8XV*%1&#?h1TA9gRL>%!O
%G:X!\;;k6hqHRumR/J5uccD+*^!d"@L1?thOC$0E-q_ga[CuR-R=L,q8BK#15,=#ic)T1@r?,jgP0n2.p14)K+RJ(_GgCE:)fN:'
%k9Q:tfnO50UN#KC4qOaS3UhsB5=4d=ib$dB:Sj%jAYYVmn2#3nqnr(;A'se>XtbCbIE/bj`u8V7fm=Ah2%^;T46'07'_0p*SG(*r
%B)2</VMZL]gV",?)3F\+%QQ9&A1h<-RTdae3%W"/)!KIQNB!_q&<M?SOqF/[*qr55N7!IGp+2.5E'`O]7c.K<EJ>QNkR]@KHPElK
%fV7n'/YOlY1Sf'C*;/dhE&qB4NHWkMPSOUh93Tp\IZ7d2(Is$Y)a^#)SVG#_=MQ(]+A>1AC#)5hTauLGpOhkPRktKP[%F#UqCWl2
%hXQV1%FoVd?>4jt_['/<>;b.W)DHir)jHkX`D0fd9Fa1:;DM(ip9E\?ge_8PZ1S4;[U.EZ@/(U"E$.p6aH!_sJ;7HjX`sH!jFFK,
%rePTOj,EE`SbR.2jlY5@B\i)ig4IeKEN$9hW"T^o^Z7u!a%_>I889lOTRs*;\5uYC^r;3TlT,O)m$(6E9Cn@TL?\@p;?DeS)13!Z
%!(P;WL@>QjSX&tAjuYoiPGk3[l1TLL!K:&"[*'O0G)W9*gLgI1>=`F1BrRl5+&Mkl,:L%6OjRA$@UBQaAl8[^$UTf/e!'@)(.;im
%3,[M.!#!GEg`1F;$V-FP5&U)[:-(:AX>Xh(otB<kjnbU]XKL`"V16?L)8r=IQGg#r(:t*\0LUAk#p(#0TVn^41+j>e[]-Aa&j"OB
%fI[2s,4fHXpZ/:-/p9N5;>Vo97gZcXrsYq9/uRIQ;=>UijZ#\Z.)Xg43!$Rh7.VX)L<t5UUBAnk]A\sDc2Dla+.8rmLk*-iVS*_k
%[cphb!_++FQ`OCKI+IMKJ9(En?#I/'NQSr5*j#j?FDhTp;bWl_=3<"8>n!"0hVk&/-/l^;nXl8'<cf@L[qpn@8F:?eMUX0,+_OH/
%i1>pomJIYT1\nm`8./jU-8%X6Vn<<+k5lUBRijG;jATS)`DN&6e^OTD&M=W$hfNVc@n+MNFk=:r\),?ph5]lm\@3#CVJ<lH<D`6*
%d+T581AkQ4R'b!ZhN]^-KaZf,=q13pGl6gO82D@$rL;5V62ROO%%;SH1rM#Ap690qTVIC@5"<b+>PPSVj".7YDDZ]g0Ymie243lR
%fPUi=M=hHBjm6W=nCl:D:.haf<6PtoS^(E>$0A!qVb\)DYb_D:(cWa)H.SQ7b!Tt!Mrr\)fi/EM?_riF4I#Utn6Eg(PH8_MBAraO
%p@Z^G6G(o1@`)h52;-f(e[K;\i))DBZ*p)V[!6Ll\3.h<TrmD;rpC*%\!;;B4\9f%AMKZ_:8AVnj$FI19>@?>)q8m`nJ#>+DJsWC
%akebY$/Hj?\R=%/3pNcRKC`>gS'q`o@qW9@NlP4:n+t1,DP9EPSR'n]n+QYCf12+<Mesjo1Y77^man5G6>2HTF3E2#CNK.e\k,u&
%UXE7ZbG&5VYKlSYP[Z+k27ZdAhUZ1W]9.M8DY<"kBR40"OBpVE<1t6^YO'I(fcXRK]GB%0Z?`cV<U9T_?+cqf,k;RCQg*:0EdM`t
%RLk':pJOep-PJ[thpR:F_k7p3?C-pD/CZ#!\Buc.kXL#,Mj?/1rd6:tkFN@AapK)JWi$dhd:@"b17Q\slap4gTmEG<ef*b9&^=9r
%Fj`-AD/*P3=FSpYSrP:8F(K8Ier;j%P[#C0L)>^l'1[0\\e,QVO%H0R?>W,T:(j%*lX@gF`Q__S<P%9Z3ni5\*KoOV;==i;-a)ao
%2+prXN7=^/P>%V8XMm)>[416BKSS=;8htP!*P0O4a?7&q-[g4mKQb>!q%VZ!Wn_MIV9gHa]A$WmQ?IuT&=So3iEA3Z,>mj.NJJ.P
%'_JDgUZfbF8U==i%VLFA].WA<5X.A>.Mr?#Th7t5*<$T,c#-aX[]_L-"@';VGp1\)>NQJRpkF[omUeAEoNlCT,':N)SZ'2m52k1:
%7L\q7<8R$IYgan1#`nBbkd?rhKV``,`Wt&d1DY1<n*P,3Sa]f`MWr`+]"31bQI3(iAQ:-aSo5^HT6HQ0^"c][bN0D6aKS2='_1]O
%"H=mTR@BPVJKlJ8]L1ELe8VBYc$8uuT!V]X>qKS:=JS2`MaVbVM/+k>Lba(9H)@?<.X,ru9m4/A95a(VH4S>b`#Dt_AoN/CWg`M-
%W&094pPRfC'q&;p$G&esG6Vj9FH]b),CU%"g8>?GBNHUMa[EDKU_JmdKD3e6R8&b+mFf8="qdqmCt`+K:e!l2\<-CM>.>5;eV/pn
%9SqJ0:[?j)#,UL,'$a%(6l^4-p6Fec)XH1%lm7RUlu>.9paU$E'd0h4(#E-7b1Vu)P"er;,`4c<<O/SrlP<^Q1%VWQ2MI];QakDg
%mG+ZG`R)oO+J9YjLOPQGDli0LfD.<[2Cqka\i/H,G8.4hT/QQCSY_K#7ha\BLeJG:O=$f_SfqLj)8"3NOjN'<b?%$f$FaD;?UU!=
%SO@[^mZ-X?CCah%=SR"b\%^aLY-aG1b>ET7fNHB1!nGg'5q/Cm[H(?X:s3IHo,Hn*4%a'**/Sbm)s/T5%1?B!0_#6*;f97%m2ka`
%BkkR[L[S;c?n6G%Q&B6eh2?K[*IoSDji!)RH<`JE/[V2jO%$MiSs)StI$Vpg($QkXZ5ubBQ.;cUQZ/)35"C3IbQo'D[LPrg09,mE
%WrPJ"%!`mio6##QqdsH8=Pa'ESmTAJ^KHTbmKbBC<@M`0gF:$"Y9;tZ#c3nP5!Fd6[kiC7s,+@dXg\UcnKbZ>2NOdrR]h'^To.9i
%Z-FZ!8t0;hi8fJB4^BOR34PJe,0Nb2H9[ZfU//Col1>I^QaZVONO@9-"5ANIL)U_($q"B%A0Fm]-2oA.Em-Q?FU'jLH:T3H8k:Dc
%Z)l$edML.!>pk8$[ZQ85p^!%+qGIpVWCr%hK/t!LO`Z>mla02j'Ju=B*YTRtiW]Z;A2&g<_D<)G&l91V&t#-B%Akj0,rFh*^#H6(
%ck+=9YX!3'"SrihZKFiD+J[<r6+1QcF%6K>/5iC8D(dj9%.8R(^V2(*A1!t=Oi\`*OM"iXQk:mL@>X>Y^>,oZPgf<>3sb%^GX?Vp
%.Gfj/63`E63IHrqh63-ANE$K2\q,ra%UZBQN,#N7bsZjE&74l6Z6cg:EfH1,`lW@6a[.qH(jAG/Fi:RC9Oi!c3%;<grcP#<HZ%UB
%kg>lnWSM]^(F(/5-tAQ:_AQh>0dB(d/T.jrQC+g^EI.o[U!d>J,8EJLFGTCGZ\Fi-B8un\1?(=!KXU:?J4Fl.89Eo$Ij.hLn1"cH
%nLBpt=4VDFZI2c+WjQ=B30--Gr^/,@*Oi@HRVkALq^_Qi+;TE#n3eg[o9J_0F2,5V9MkPXS#G9-kuoXD7j>"?PaZe?OOcf^'Qp"t
%b..fr=)?P!>NBDIXHMKH]Q_khjO*8!Y$A=YWDo_+qZ+qAikY6?@cB"q1elr%S#oUMD1MAng)911$72lVfCh#J;mUKU]%BT5r2MZE
%RNc"o5Am<YG(Rm^Bq1P=?X>/?_o;`NT&Vt\'Jbj2gBb!SjGd25[C!Z>\X;I4JO'#TYB&5g_FZk5"T^C97Qd+fD:QU4*E(pZ@jnAV
%/Klun1D3^B+Z3klUr3S(!&l&"CP=Pti`ZVa\8;pqEa+f0j+Y\Z8jKNB34F@,9h-\RY+/<o^o$f9P!-RJ*h&RJOmMngoUm-Nfo*E2
%U>Nn!85og)l!m^q"YGRqYkD#>hYo"UI\[$4o8k4rE*!?7;RLhJBBfC9F$28k\Y1,:?@-))8D[8=bE[gi%Npm!)8W,=__]g?61`5n
%,9WmaNE#j?"Y$<fo(&Ai5G*qrRu(sM^LO"Mq_'[.djVf9<(@rNV`/N(p>EFO%5rT[I;]!uL+0A^.-7G`EN'%0/B1@g?O:I#nY.qr
%="1.!V[cuI(u0^Ol_k%<2c(rLj0BK.(Wp5-k2uY7OV>bik6FN?G@*bC\?<_K2)nAug$cl*UO-(rRn]_-i^28em1QLPHI1'C/Q@*X
%;[WDe=,?-c\kMZM.-%"=D_,h`n#Qs8*HJo6Q2IjfmgZLgE>"<PTo90#pY$E5mMaVl`q982]1-\_l.soa5m9RcEMj$rqt.B>b%B@[
%(M6*R8M5!S/E`&Co6_2+j_a>5._;9E3'T!"@E$,KO>P,RKhQ=+9HC""2kVDY0r:8K]Zb%B[:hC<F`Ur[s8Drrh<'W`>s$n%d-MiO
%8"$h#)@l)eC+H271`u,H8MPf0:7!rR0MZQIfPWQ,>dNruo=9fWg!98J+0K-^j<0aPlE7mL^5P3"6-C*V"HWskU0rUtjg:J'Y#F#/
%,We[4<>fQGmYZ(DF^%@0Ci+j.G8\Hh0<e!L'UJoSERDrtf7g6jZXTJ<odP0oh!Ymkgc7"$V)PaIAt2&pg-@&TOA1+DW5a%UbN6S&
%&f)5Pr0p@6a9i?2,CDD_+[ieQ.<q;@gueK?(Ns*;o_8EdGC-Gs'Vc2,(ST;JT3f4,M#AY\3a+I;1#W\NWnR.BEsjjo.A'+R;#*D0
%7\q\o9bbJ/Cj>Oc_pkQj)Y*H\90J\bKEY@M(=PdeF&Z.8<"DU/jOWuNjSS2q\fs>h,+\dh3#H(N/_Q-*",K42f*E[p.2>q9`sdG2
%,*a-EGrR7KpMZ8Go^Qp`7\ug2QJQVU*eAt\`UImkq]#r-_-AJfqd,<fl1d[nQJ=NLD0Yt!RP/(ugJ1lT@LIoaBC)a^aFLjm&(7G0
%d#.^)bhULmc?/5SQ](#<VD_=FeS;LT_Y/V-&3]fBpWO43'W5A=:>Tka`$-W-rnYa7'No9j"ufBrEWpIR,7i5HnA'!T8`f`L2qn\L
%`oareU&Bm_fg(I.4&akGl\n[P#W"br\"f1L=3e60a2s"gnUum^^S+RFO_!JA1(VlDk50Fcf0ER2:W[GsGb<WTfV0$%>8&G'Wg7pe
%eXGE<NoQNTXcQ%UJk(siE"M83&F5q+G8&SQlUKM?DY@#,W@Q[3b:T!]XY`:%j<_%Wg`G[]Gakj:c^?L3AWtlR?jF^RB8nEPDrkDm
%H#W!Lrna>)r1$dIZ;lUGVtX?rlfMrcOkeg\UnJ_]B*g#.="`<S`leX]-!3fd/LgCml[>UY_I\@^`r0!RWLgUkd?gu,;lh7mPT*5l
%W/1!JdPUGhqle04[<aSp"&pUhO(SD[D4U(brckj1^L8TF88(LTN(!462E8tZ<l:N/K37^0pr78gW+^B&je]6Zeq3!a$RXd)b5+r<
%Wrkd?F_^?5ZW*SGG#-\brKYSfl^<?q@s3Pe]\hVTRTn0%OiZ*&eU63_(O!CE)n4Q@Er@028KT$S)[AG8*&F<GfR'3n)+smWpH^5:
%M?>A`'@*RN\\(S9c.>S*R8lg-1m=EOR9YqR-h2P&;es_7q^$3jJ_'#h2QV]_LK%Z+,sfJr?VPG,1lALEp*='lBlc^lIFBg1Q[M/V
%O,cl`R==obB[_BlQ*\YdXE%b;4=g><U4da"g`-p;ETM^o?I\A`nk'dO7Ofr?LIuA@V**>7WP*uC=d4)O,^A<$6ia<#%d$T`C@Z.a
%ok$NL#cg\nJ9J6cb;"ol<=oVtUNBMX5^6.ShK^cX:da1P*Y6X.d96=n\.+Gbk%%18E6nCpBS?7T+d>#cg'?q^g$NUdk@_m\m<=c2
%%i54?h7b'(/!HN\o(Cki(A!^D:*2\9g$G/Q:4&+7V$2`u]kkY8:Ic/\ef\Y>KTP5A&8Q1uS\u">^O*6XiSi$:au#Q$IJ[_M3FC[V
%!kVPFU"G4agX49Qc)\<S5ulB*/t8s0gu(;EN2Cl+q.1<;b!q+u)Nd-pnIGq^A$2nd;E+q2;N+p&$D;t[cVC1oDb)h3:cc0:JO@)[
%g_f'Z@^$QtQB33#6UMQnR?K/cUSo;e.SsjXPo38_F!o=ZMkE4ubN8BD=[J^=#Q"*!G\eCt`M>u3^.3P-:E;!_6O?P=5"_r?0&$bQ
%PZQpRifU@,.!r-3M_!tnPK%C1DnMoA1ZpX'E=uPHWV\.pYAFg'gVQ"1ZFHo*)i#m'DjtDR,tbH.CD#ls6N?0Kk*6`_+e!Jak&@d&
%5->nFgfijILa((?cMgGEfMS+i;]7R>e]k])oJ3^'>]0,kk`0\lqO!*GU.KNRP`&ocb@X;=N\8!b@^CDX]L\TjH[!P4W/9QroKt[?
%KTD;N#H@Jh2s1\pnC4H@2DCFdX)%\4gq7T6ii4$\U:hH$Gt;kAl,1Yh5CKoIQGkr5Bg(,%5UO$NT0HG'p*fQ.!f"H!ERjI<RFli8
%MLM&T[b8&Um3^MEgan#k@3<<,W?(G:K_8dn)`quZhhf>85oZ5pSTKi-QF8^V%u.=c[[nAEA<%7Cm$I+L/X+_k1/4,Gk[l1k/uA(U
%"W5Hn8h<rcmJY?$;p;?jDH/1JiYJ;kkLF1'0(.WPh6bY]o=jLU1^V=h;e_>AGoY>]WK't`28L'P&t0rUd;f7sS3f-'V"u!3NVF,g
%ZIh$jl>fU5QYLEj1.:\iBk:5n4k=\?K31U$k`o'(T*E62h6(usVhG+raJE!\`@!U-Y;tORFZksk,;Hr<6c@WNH4%'.g@:DLZ21K$
%gLu@*]l%YP+`',=dBZ+b_hMXOcdpo`1eIQ;"Bi!##(fj_XIL:QBIG"77?V'JQr&ZU%I8Bj;ngfN'ABkiRbl9$!h6K0A=d](Q]UXR
%DMNHZa=kElg&3Gk&B.oJ@>).KN._u2-d57eM"'\$,[uSs_t3*h_DeatX0D;amkV.PWMX^fCs8XU`m[BdXCcBVGWXLM?rcH,i!m-Z
%GMG02eoqb'Xi?Ceb!u_o=3V^9X]C?$*je:b4\sUl'l]#Se?ra8e[=A2<j!mmhee`%&I]u?!\.f`B$,`P_p+\+XoG)tmj'U>#KTKs
%XN%F)hT<n*o4Ss_#o]t/DaBun\tQM*Jp@V'*uVF6*n!Qp.chP=7Jus1EHlYG+`,t>Q@Knpm1FkII=0^<$>5ce,H?KmW!N%b&G,B@
%CkWpYSRgaAk@j!'.`:P0DSTF*U&ZZAhM&0rE>e0qbEnXoA\!!?Ks;Y;-lI7RkAjsps0q<crYn%>Qc;g=nTDijmJa?C*8o<:AiK4[
%m`\-Fb,;SljC&&P;(:m]T%mh+>3=),iS6+Hrq7:QU(L6^1#$<NhDJM`gAJ!GScSWc!9j^km"[3<fL/MA!8^UWLHL(&cp,0OkU2tA
%0OAS5dR]enMXgN#E=5Sq(b*1]@7XuPpZ#t1qUpkrFrTaeeDECu`no3QMj:s01^atlFSgQUh+#]'($Hm&nAAa6pthn)-s%MT6(ZlA
%J"h')7JGb,'3]eYi"k:(?I4Vl;XQ\ca%!]#6cJar7p97Qed&<T>;M]ih5FpEZHfWi4V,!s\.oe:AP^@0.!ffrAbaSr!d*8q=HX2]
%>[^Gq;eri=(J'>Z#QVGTQ`!>gj6fCD)l<$eR)[Jd:r_C"kI(BHq1iQiS/q,0FSrh-rZ>hER<UhtANcCD+0@<KHPb)Mo8]Y)1@Z$R
%qoPUa-Lg0td8Ap\fl@=Qm5!>UT<iGL]S\9UAqCU:VaH7'i=S](r:\Hq?IA-;KF:]#?*g@"F4tio\P8OaV6f3!d`7jf0?SKtIPbHU
%8H0<^^$sedrDW.SYQE9h</hE,,P;"PT8u^iYcuudmSDHfp^-eR>?",J!rPf2`#/MjVGS;ok;c8/:A@r/plWp\?)*)nZ6+:W#PC.u
%HAoXM*O;<Oj;V2!m++lM)kn>@J3OeUR8HdjhrF4kqHC-6o+qDQ*pD5KJG#_0!)+i!4aVapl?YP=e%Qu"d+SL7SjmZ\3u1=u/YMd`
%O7(gap2eaC!Jgji@JIH)g'nYnD@Q^gLeIoD#s&B:nLt6rRV&o/7[pamGTu1-!-IQ=BELok-8H]CecQ,j[o!Mi2:CnSH7GH9l%%G6
%)V5pmlY+(hW3U6hg+G,.Zdg-gDucXkX6tLs?=;,tTGPnl-SGulZn6K]c6rA>4,XDG`3ip_1A&>/bW'kaL[j=tUQ1`]Gp:k<@>jD7
%)<7Le%`6%W8,jjujKKo2]7YM^Vp>@Vd+?tdpPqQ-6aMV3e-A0LdaLlZ%EPsO\Ohn0_JdBhV4<4fcg>5Y?naBuo1/(en90#B9lHUD
%aGI",dbRb.eWWgi9q2E?h.nJWjpj#,>A)'lCh-<_IRn+\K6fGgTBlFMnKSm0]VL1rp!omHE:!p2A0a@*3W%e7JSp'5Z?q$k_h[>+
%qH?9Kk"YWTEXmRN8c*7#h^9WUf+A(V]R"s`^k^H?r&+(D5!2/='DSWN8r5_'oo("0n&ekuCDhV%UiWsH+4c_hnSL_;^K0;lA-[NO
%'sRYe\?Z-Bee-K]`VrKiP_DmPVl4kfAb:kLkUR](T8m9sHLN(Ij'T,A^&*Pu?D=X.bffG/)Z$,C?S\f?ohlTU-/?Qq2M#eW#h`2M
%ET`*r-ZnXA;NY/*DPm_3SB^H'Zg)-RY8#l?/(olmc@ERZ*]'YSXa>.G`_-)P^cl2+@<nRc/"V<j&dm3XoHARuUmLPZW0]%2il@+!
%B=XKGKHm6='P"Ur9I:TT2s[U%W')NT*;tL;)GT1%eXFAJ`Z5)+IU2AnF@&Vkf$S+=7*Pa]"K\aI568E*fZ6]iBSt*,iKqFiGJGD'
%)YLbI-a=2[EI)!*]t7)n.XPS]ZPhclLt:Rn\#3nc\$;,'RlB[1l@\T#2RY(SagYJAok9R_(*.P8PW^4hKH"i%bH)/YgY'J#5r^Kl
%>6YVHU7%2bNHSmPBI9'/("hV6q8\Q@`mJc[]%c\2QB^)n>LncS[0h4cP1Y*5NMEM=R(980<IFFJo=,_#`7@)"3AR1i`*r,m/5r9$
%#0QIQW!`.l)HC;<q)tl1j8H5nP?"+M8nk66,sS,XZ?1NuIHO;#0F67)C5/_U.s*_)DAb!."m=M?RoW<[G"3q2RaE3ZR=>?,&NU[9
%D3eDBV96Vi0UTT:5^Bu@?uYS5O%-]k9its)E@D_b]m1!gDoq<Ifu`R^MR@c^*mqGnG0Q8M+2W0%),9fK2$s3q6V8C.#FE;g>J\ZU
%qD>_+6qb?2&QWmrk7!o,%BaSGqn]\Rk'\qH.@@sEj$Z!H4^V*>)cog:_:V-;2&J!c,/MNmYnNp:q=>`b'D3Iel7WCq_5._(_qR[I
%@3bCY'^=du:eI=`5rm+/"Lg"9:VfH0N2A&6'>>67]=URG_7cn?=tnX,UHs$<4WR5PLRs-dE-F=0c+bQW#:l@#i8Ifd'KhBbP[I6j
%Gn-G673fWr=?$_\QP:ZH3'?/OQdj8kn7qI('YH.Z1;UTc*HYg:pi(:'#+s21&&FSV^C`#&>nhmUS'H&Y>1q.(l_`5D2T!s0YdJWN
%(,X@sqn]c4oinZ8_&P!0&%05OW2#q8L"0"EBrui*\J.d*;+n1Nb0(E?U*Z+-qP4;N/FfoJ7n_:plIo-FX8T90];f^$-+gX)9<%bV
%@4D(qbUji!*]B@*%gQ`?B9a-Jl(WI[?FoK1'piee+S;<`Q^43N_<7Xm$bEJf%[eX'&dYj2S]@R%?91L1oN*]"cr-RL*"$b6oh`RT
%?&)kmi?1Op[o/"mZdFladX%VSQUE]q]Qh*tV,*/t63dZD)p2GFG!c"[F"UF>h2-i'6]opGUYJuZBmHg"dVFP;k`n/WKl06EMc;jh
%$S/XHV6dl#o'/]E[N'_LY:ih2j4@j+GhH8d+.hAUGE4i%j]%[T>s;Y]f^_W+RU<e]kj9p.a1(c/+#^=nbM$"\I^scF>[MB]oENL0
%rdK5@Ql)KC/69VHVn&)V@.dr^51S@;6=5SPCnHH+=&c2'=P9mMf2k_-G9SO@0qMX\?0^=K4>e'r/!X1'=F#=Dafffdj]4?CdCA[\
%UN.E9LKg<'-S?^^>C$'/S2:pZUCZf$=3'9`RmoJE$ubKcn':Z#@?!%PE)#Na_sR)=4?SEgY#iNSle#rGhn3+RXrcW(M=\['Wd8K%
%X+t>Ab%goaGAm0.=R3%P%I,=A<T,jIg<(F"YP&pW4_,"'GB\XSnZ$uC-HO'Tg<QbK?cusn2esdK,M.h?6?qnV5qB-=N]O_YVFh/1
%IJ%h6ZE!3OaCZojO,1@%DIi48(Q[ptV0e>P]MXO@*2Te_04s]5@dFk-2j(SH`36A?hkKH,n9ntUGYGlSmi?A,o`KA??U#'jgA7qN
%5HU9@g;A6SGe@DPS'UiV8>PqrAL-k-RQ+D!7FNnh20uirDFUg*DRr\^WOELg4d"aOrmCs2>._'5*)\__m,@3KG0IVVaRldX``]hg
%g:2RTZQ&!B2RCd\26LF^m:%:U>M5"U`3#C>;bl5QA&lio)8"lMf\"Bbogu4s^So0W[6#iZ<UW`C6FbO(-gMf&:&Od$m5f]]gKonU
%a-R&$k#&b$\TGc-DoOC^8t/^)`,DLW#>^h%>CC\dmdfRU'@`0%I*4a>W3nKoRpn$<%;LsUZID`9+/5oQl"d;@cLOpR3i5sgf?c-"
%9qOm5l((/::*46#$%6NF$sfT+-J^l,?SO'LL;GW+X&3K\bVYaJeC-!jZQA":.XFBkhK#;i2Nf]"=b2LDYUTS5P0JpM&c3t0-e[*V
%:#_JAcRA"3g[(i4gs3>Fk)O>S9AIegEhCg!Q[;tu?1.71`d48DYJhf:5F#F20/q3$HoY6&ppZ6*;-71,pB6>%3=rL]AjIhO'V:"V
%F0-n(agY\urIGVM3E![PFR;:5hhY@G9LGn'c#p9m6-eWRlrr+,39WoR.@$+bFq^d:EL_EA6YAt[B(Y,rXG3o>np.+H/\gMmYk"XX
%NNI?`p3^X+]+bD>[C<nnX4KF;7WA[(%neGq2pDJlg<V+ol.'+7R"!7*.b@1kM7uGbDc:EpIQNsD27E,Lo&7#(4[ca9Wcp*XZ+\oA
%cL-!)Z?*%rb<+$ObJu]8,G*`IfK\flm\EL:];N^8LV(lV-V+Da4%:U1(Q5+.Hb633a1\fS0#+;q2q!'/N[?,4ch9;]MTDqI$Yq9/
%A>Ri?.)Dh%L;I^"L6AOkes,LSF]E]me`uGbG2lSfcNc&p\3kDh-ZqYLG.M7lopgo3Y-TR2amGr4rVfZo>2$_`0Ad0fC%:PsQTdHg
%a4$+$FX>jh3@SJs_n/B-Q.@1JbD2aR1"KR<g"#E??8f&kQa<T9j"ah"lhC+*>EPJ)4siG[+%B"&2uAXdjcfYPBV]u?aiCB5FM?Kh
%\>a+a%pJ;Dg>PNkGkY$k6s^BWn&q]J=*_Q-'H&U&8%X'qH;l<D+-5\gqX3n-fmW=6kO.U"(pXMeN2P(LX\%@'gs.^.mXiUs<gE>_
%rTaCT,XMa>:3I((F],k/R$1T/&Nl&1[JHjHAF<6sq9\A?C\o9'(-fnfcI,K&F*>;TfJn6$1fj3A>moa)pDsP7kPeE[4SW#!S4d"+
%l244]>Cg\;X&1$\Z*p'u0)!q!n`!0pgq.6j?60h>p$cO$J+KC6GWLb)MSZ-EBMg8ID&;eJCM1Ui^KS3R040DcebeC/bI^+3r3BO#
%1p6VO*W#&s^3am#%;0"N,AI8Hf3^&9lK.]0['Ff0XmTe=KS.=sS$V<^ihk9d.GmU%QGqVNj(7KKnXbm2JsoQMgT'H1mYVrfk$9JN
%akbFrhYR1*>C3rb4I((3,!4oE6YaTMH[$r]Fru?tnM#(VQoNnO4^O]rEfXh;.6_a?&:-AFhGp0VEW,GgIX.?,5$Xl%kOM>1q@_`s
%#;<&7h0=4Vn!CHD_pX1GQb9o\mZRBt2E8pQQP(,1I-IYOPqR:39,D1([#aVu0,Js,IG$_He1/=)mBpt@VRi&DeU9jKN[S5[n(amg
%1R5JKZ3P=0lIkjTT\?=kfc&&<LUFHTppnu>RDCq2hG2SlS#r`;ZdJ.Ygd<>qS6p0i)su)o$;=f\I/39>n.9HMG%udo%6<4F1p58a
%f]^"l[,uPo>\`+*BYCfqe(SXb[gT=h'9bRoYHH!JmE@'Ycn96746D87n!cfPm'TtLm;@+bl7CH,(S4tpAi+`8h7Q<4]DUFVTsiG[
%Z>mRIN'CWkT@_'\?=]l^&+@oW&)8=.C[X_E969NJ%*%7Pb4pfJ)nDPagQ&q+F9TA('Ku$K:X;+"E=nYP.@7JLXGd&njT*Or!W9sh
%!0<e`d[u#j@I*t7$09f"$Wjq<EUSdr4A8+S:9^>kS+'-8"8\kcZuIqLBCr?2r(c.=^]+.@JB":)S/2J.Ia9Zn%hEq):CCToO#ccn
%+s.-6ckd']/\*Oi<U4<(CR8o1R(u=eAj:Z6N7`(0NUsHoarX,?UY;>iYd+\PT\&2?'m%)D4R*4NXhr/ZW$><5,WSL?+GKIhQ:hGl
%-B2?Y9Cn=b$2C(''LU@1jh!@%?S<Cc=IKuX0d"cCGo;p)Mk\-7k'8,q1BN>b7)1!`K.32r&=>"N0MZ42&FY-;?4N4eei_uC3S$Zb
%*#KpT0[>6sXP97dRL=^\Ti+X,J`R23OR9;o]M(E3"kH!$.'#AsOp("\(rn__.EQGPMDgie)2iXA.lL)^/WpMogG"3@SE@1ho>L4n
%i6f-D@;+n5(_"Z@EK\5O+Nq4O=dC:1(*p@L_i_bCU>)2MSA>TG"!qV#D\&A#"G+?*B-%pIc$!%*&I/E4Yu#/4\NOX./M[fp'("bn
%/DFGd!_%@p7G/Fg_[Aks]KgHHb\>9]j(:8dH?eB*L9Y:M4=rU-/B\/od$eE06YS;"3_mS;Es0Y="%#fg-3D(1eqFDG9TWNs-;'1_
%*2'fg%^^il!U"8Qj$8/-%,s:hL+tGV@%?H=0bPYP!s92#Mdp.W_XMS(QkNaZfNJ\nGR#S;(5u^.)"199=ht,s=9(19hTF+$0sFQG
%L:Gh91Scf8L,Flt[)fg4L;543-5Zq;.V1K8,aU"QCJgp=hPEILWg(H50TZm$M%i1/.V5_N%#2m@0S[#%4=j9i9O*lHB[AbSNPURs
%&kD'kJL(gb$kL6,H\Z$]79-./YFlG,8rWB.W)+';o[B?4`Wahu4+dPBU.*0-E>FM7A-?Bk)YGA\^n)sab(</.+@cikX]63+afb4)
%(rS1]X/-d[#`D'C"Nd^m3=BRRE"(h1(rU^NK1J6[KZ,H86u)$nFu]U<.E;pkoa)13mmF,m5VT4seW+1Z3okO:a(U\F&np'`PB_kM
%AY]m!EU=?rd6u)2$.ru9&5PA16*Qiij<T:5jd_VlfI6r3*@l'_;uk@PblUG'_0D2[OBM>a+P'FV@a7EC/M"AKGm=#Z8rf;crW.Qe
%#7GNi[2!C[-K&r!B<348LbaUN@+!C>EFJq0>gLKQR:'0CfIMit_)VFX[G/!Ga3tYh7X"^:!31`=OtA3)FX*i[!Q<)i7+]J#X9EXa
%Ce"pYEG_<:!^Qrn![J%;+=FJ1iJQI@nbD&*M5XZ\!GY3;V'Q@>AFVF1`=F"&O&)W=]/XVi=ZS/AQk?QfE=&uZ!Eh*4=CZ"e!#'t9
%!@u);(-=?VJfZ=sGG*S9@424"0aJ""(^.`$+RGjWL]\^@Ub0VJ'Eo$c#)Nha"D\0lGi%k>UDV[%/$QAiA`+d7M(XUjL-cji#$I'%
%K$*f^3#'./"PEep,QjMA7,s+o+<F!`25Q-Z@47"k&;Xs=&Bg9G&.$r3:9rQL-!IUJ]RYbG1M)W.(BiNZTdY79]Z:AEV#uL5gWC.f
%7`=.SPTXANP%JA7oT^V<(-F`7FpnHbK*2:]]S(si"_\JF/kM)l+Pm?UH.qg&PTW"@b(A$*di;n![T`9I"u-go"6-,\5K,<JYe2-?
%D('slUcAI6?8-rXZjYo2)"3/=c"Y!%DE;0>/=7:cV8n4BpS2-0KDf].$/?r<["hj:'a0_g;>FYaYb2$8:bG[k684?7]lSth+VE9*
%-&bU+"O!8MkRjp^nK7NkGsm?_9:<:88)J,:c$L0=K1I3EkV%[QKYa_R(sKV:d@.j)_-(r+l!Tms3t'#2A/Hjjc3d"`OTG&A;9i(U
%WtrUC!BGE;K!LWi)VG-"j!^BiCb>ueZ9,N)$O6489bj-?$mX/OA#TaX0j^/;,>c4]LWK7!R)h5kOg,-:Z49<\KX_GC%$<Y]Go9)'
%\-(oY*\5Kc<cC0@9cf4Q'/#-JI1nO=%bU;+fM@Ssf>5DnA5&S"[SlfU)@;I0)fH/s:EiE+.0M!g&\tn#rP^66JfVdD1X33NbfB&m
%mD/u6@Pd)GBEEWY4,:F;W_9\N+<f:3(^B_l'HNDW.lmjj%K7RJ%kPd=%#to[Fs6pDK63OFRNS>iln"&lg8%dkL;r3U^qke$75S0"
%=*odV+bncE(`<X@E[X3p+[(Q4l&b"'^.OI-(8m*N-LhEN;B]LD]Ro6r!6HM"ZS7+bl-Eif;*H+R-=X7N'I<Uh*PB:qige65_F>\.
%:&G7#bDIQ>RXf4<[Q9,qOVm(D+aJ_e5a/`HlN(3k)X)_A+Hlm0-G]ki.7'D2c_Nr@&d!qt7F%M!;9I0X6J0J.nY&Ss"=M[X#]XNL
%Oa,2.%[^sdp@o6BA&uA#/-f)^bE3&G"t3Sb+BYk<5`a%p"mF#i=K*''oOJTC:"tsb,kr@9IphJ&AbR[J3X2"%PX+gcOl^$23:%pk
%%bAtKRO,=5&.h5_ZW;Z<L,/!,U`g9[jR#k+OZe(^K`\q3l/,<u'XD!G5;Kr-Phuib`$Iu+:Y:=qXcut=PZ&3k;/loH#-BEtf`I%!
%jqEhnddK7$2$<.ji(d_I@-fTbQtCSd>c/cW3G+WbcH9oM@,&&j?BK)f8\%AW6K#qDJiaMl@^gnN$R)/p?Ug=eGn)iWU:\)",7uOu
%dBjo<N`*=^K^_]H8<Qa=E+0Md0QKIPQd4YpEBOb:Z6Ee>6srPc#eCgsdA^''P-u6>cr\fH!=9(S&hc`g:C\9f0UD!Ma20'F.uo2b
%YU6<3O;h!MSQ'd"N4iP.Q6,E-Jh:,58'-!hGl)kag$4_jl9O-[/[3e[^.5[Ce13/YE&eL8*^ddb6eUm+7cmV@l36ShKF;Ig>(iC]
%78d?NB$_0O1+?X2O2fPTHUW$)dXXgXipC&<MGDC31IPX/]'P,@K)m1qN#'6r8oA)h&_An#[&lh\@.BtXNjW7S5o)sPKgidR/3Q<i
%K!:,U[fl%ma,m`G+S[lCSHkW-3gN(/lifj_ZQp`e,I>;=#lLeUMRMVUBTeds-VM%7;%\l=lX9QL8L?=r)-;inXm$X1EEe?n,oJ(a
%$<8>o&5gYHgOhc[.EIJpCU(pR3KPg2+t,Z6nL2+ZClcAN`+L6[b*,,q.'+U6&W;S>#JEqXWEYFWCNTmjc*AefOWp),\H<.>qIkmX
%11G(k_c*?X!IZc&Ao',GR3oa-UcPS&=C-B.Y\SZCC*RO$GUF+mdmh1\`#&1)pqVb'),^\/J/L0l8YYU7N0&L$HYb/`bK,ckekht=
%ApC@+if\:q%!DB;Z>4e0LLIm5C0AiQIP4lD7C7R]W^g6;J7ui;=L-sXgHc,N#n8J2'r=@CM;>.Dp)+2G&]]j1$4[.iZ$>nU*,W/d
%OXsO'nQT&<_\5)&77%AqVa)0NI9Js;*+i`PN$E1`.M-[c/oJk'E2ZMqC^<l*_?`mWeR%,]H_;7m%SU\C0SZsj-]m:9B/>GhVB%kK
%!cOQ,Y\%F3ct3`LQPDPbdKSAqMtY.%LNXqa@nGF$KPWO3CdV(NP_*H_7=f8#^m&l**hes]EV=E@HRM!E?(>3H(Qmh$N@/SH;,ius
%]jr\3c8+Ck5*;t5.;jeIba_AMUKtS]9R;qbF!03m[]irRB7SHq7mr8o2=Hk2M6(+I@J*2:EZIO!b#6$nOd_-YGN%&hogY$),BQZb
%IB\</m((4.!Taoa]"UGYc?@87?-CU#B[_L@PY,>b%`'b*,j1mu/jq`g/Zm8S87bpsGVBQJ>-98SO9OM30;EV@%aeOCSJ2qJN.dKF
%RNdq!1Cjd)&I;!U.8iH`OGHC170KG`m2W0d9LB$.g4L?@lad^[=;gl>F">q0SKZFV,oN!llZ`k1+E^$UD4(dM&'JW^%N"mgj<KNK
%)+3*;9E_DF/#2Zn3"eHnm%Y0p46e_+Qt_:am)Xi-qin#pk.6]f_P=i`+`7#fL1C#kHs?c8KON:]!Uh/fPI1jMLapN*=+2aEA$CPI
%+qkmS.@G"sHNcrpLR4c;g>ck1?;]6DTLbX0eqb*@0epUWGh!%A78[Ssh4kVlP.*u*)a+NbNj`e4dC\(g_m>[sM\p!Hb&BI(Np<a*
%5]\.X!kU=PA7hF`1QJo_/(!6daV1't[Y,qrE/Sdr;o7O=`jV?0$:jbTRAEBt_)U.LY9M\B[U#%Iil(sl*$PO-ieV*#qgr]6Ja?mh
%B[<-2XOYFSNF7i""3QDrHUfsV<4b\p&Z^LKdWea.&kQ=WTLt,Q=YRiF#Kn;`\B3;:WY"ZC8XGTrXN-F1o`q;29!fDL7>*%NI/u!@
%>g[(RCuGj,QRE`W:ZS35NjRUk=@e/_]J=2(g<!4aM#>WLJ;5$X2QFmIcB05BK&\8C51_I0aXMULMA+C*)VWk8'T&1`f\'ZpH!%Kl
%-9AcA&Ge-tN-"\*)8*p^TWFoD0E;L0fm)XUAW=L\j&%r-[WXQV_(XMumS53EY_=Db0\UC16mWi,R(tDlnWB?W=p#Sr@otkHQlodL
%1S7$W!=X#O*=fV?%-*jF:E6lYVn$kJLQu]_0p6T?$C.eKN-:*GX?aCVe".S"Mb/,1=e;nNT`g,p,l;b#LgAi]Ga8c%Qe^%eN"$HU
%"&lSj[-$1C7P\WpL:Ku5OsNbgAbY8:i%PWV`]XaL=fA]S$j-?o"_6@u$5@,3k@DChWdkG'(acgWU$X*6iru=pb/qre_,*2;3K=N>
%A"7srL:-*fdI'RU#&emABgcV3LtpC?3Kba%0^jU%M@%KfT7LF`"f"47I)LjD6c2Gqi>Y9sfW@G#J2YoJj")a\*al3p["OriJb=b+
%'^NP"759ar>s&^;$ZV9aZ]]GLLIDGh#R_Kn3)E_>(h=Xn,V[5i=^totgTZNlDJN.EB5rAf@V:]fB+^!*(""0N_/jdUG/9DiGRA$`
%_eAMT.u(j\m[\K@$&sI#3R9E-')Dpu4HnitLm$.43sluF[j-nX0V27\89;uk#.'i\Jh9rjF^Vj-@[JFiP.,Y9\KhLL_(UhR#:2rJ
%:0Bp"3e9Y+&qO2@22S!1]!+:B4LC@oH,PTUeq"qP-C$e'9KQX(\cK]>`]+$0>Su^aQ'%(4UJm)d[,gKQlTtbV[m1?)7eRB"9X%p+
%8)*Ou!h0k41(g7b*/WNTkFA$DgDIp;mMRYHIi*pofJ%=oOTk2(r;XXjY2u)u\IuLjoRAhZ!o))*/&*n-X7:ECL'KgWp3?"[Au7-f
%ZmF06A+]4q.q1qXm&E0b\m%56W@+up<b?_LXQt#>nuZ/\<Q3$Z9Ud#?D>?n?'H'4VUg67t8BM[s`1ikU*cdS[XBgIX?Ui,mKsQRU
%Tsa/c>nBdu/%['kP"`rB44TK]#OQOTSl%<O>+&sRG$Wf#]L7V2oZ=5/1V?DX?(9DnnZiO0EQ3]3UKSL,bNl,nKUc;`MlmZGjjljd
%?l-1S+,1+Wqs1o<ghoR4puJS/DQ$P;D<IP)7L\AGV,Uni/'SI3b0loGRr=%\D';t^5GI+j<ns"T/V-OJj]\9GK95]-14t"K1cL`=
%%T/ZZ2YNX'\ud"MiONfHa8WMbCI`4f-1>kn=B.ub@"VQg8kT[VNIU>=)D!qCm2BiHr06=k6]=Fg$q.d`DYf$VB97!RcVu_&-<Ft'
%ah1,1Y!sG#$G.nEqh](UrN$oDbQDQ.\TFfCh'6"&W3963*;4MR'6plkHrs#iEhIaW#'06#/(G(#K'9\l\lW:T<W:>BoBQ!M"X-^=
%<Nl(_2uoVZ?$p\SrTA$#Ok7;,;]kCr<pbmDQ\a1(Fd+h1-*L5b'ots>huA(08SKZI=ZF=)7&eT*'!n+>5$Fl5cqj^?GCS_g0[9WD
%GX5#=D<dn&H%?LkLkW:K=02oHg@qG!]q[H"'u_[3g"a_:"K$haL;q7$k7DeMZ4n`:oerh=#+oqI>pMsX;2=?oWESLB+^h@MjKY^d
%A6#[$"F5;b((/8R.pr1q77DV6YL70B"b)8Am5d8[*,6pUMRKAd7I=G^DZ&g#a"@T9M3#f1FP;5P7q\XsK2_B0>gMJS-Em/JX:em-
%[/'V3@[>!%[\a76pq<sbTP;sFf+*DFb4fKUD=<%'PC^le*5<Oos.&g`eq1R(Xm:\@RFWE,j)tc+^HB8l;(^-jOtVZ)Xu8DY$FkLL
%DgD?*Do^3;EhT?%FmPAO^!IGE6YLakoc.n5OR%^H:.XZ3qUH9`W!MK:(@q%>/JfJ8'e30+(ke4QDOLtGEpiqi&2up+Rg-,CZs$b<
%:kB"aGtFV64/I)sR3E?!(2DhW5F%c;;2ADP\Hih1XL.*8?.q;:4#3,^+mCLD0NWPbKmG6tG()h2;X\,OeP_DgLZGiX<&p+!^2g8m
%eGlt4niOfhIWg.pICp+mYnF-p4[Za@(1>?(+ZQVRUY9)d024,EY!?&#V-B@Q0?@'?n]b.%XVKs+_[^f1Rao:j\6T(L]=7FVRPLsU
%GTH<B$r;M*Ge^%["6nCEH"h'6M)XHupFRC['oi.mC=R:Xep+KU$7J7dleuEJ0W#RBDtYR8(8,KJ?-6Z$@5Z9V`n-5^6tk=gO50t\
%X$kj;il%3]at8ZWa<pG`gZuSW,@.;GLT]k[ae"6JPk=#OK^C,"s7=^ZRi`C&K6?-$)5p`DL9K4QN4G&'f7S2FEO,ugUk#>]2p0KO
%J82p;bgCuapnlj?]k/$g<?GHQl@.7U%SOt-mjrS:mrr1;hV;:Q/f-G_dPI:i3++m32to3fQ:=!A\_@-J5"sP_gO^-JAsQ7LU[_0V
%6I];Q?"*BAW5q4IZGn#p)Y!;,?VO1HmX']Jn=LA(rlTSkf$ju303Bi;7C5O%Zaft7>BJK[H6pZDRub%*1Oa7X6Rd=%\uc_5.(R-F
%S'RXggneUT&6cToE;aQJP;i4NM&<Y?DSu+T:7L==60:n(>,\<4o\0U<R6.@V3mVUq_g^K,AEE8mdcSK9^GO>jg!>.i(]2Y)5[]&A
%,.iR!9a^_Z00S9FqgnEKG9q=&Fa'[$<:g#(*<,,E6)tgi@Y6DNP+UdP`]<DQ8Ei(V:JG/[gX9Z<H+@gQ>)Z]%$nG@u2M<];D<(R@
%1h1M)@80LGo&_U]S[)V'b!%T,Zh]i4o/+K&(G.Tl/B3aSG[UL,hHT59%Tn1[oMSi/Xc-8O>DCK\q>t5.`5$$_.o.+&XpX'_lhd>5
%ZtV-4->FTJ2K&,l1CY&>XN]-nU!M@23@9%ZSc%RIriP2U/fpj'p!"9cWE4G[^"/$PF,mE"0Cq8$)fMm:j.S1?'XP\[Q(OLQ_f6p?
%;Z5!E)<8$ndD8G4.P7F7T:W](DpDT#8gh(cfjN)%T.MK((WAtG)CuAGE+V`":YVTKhKsVHpK.2ZlIRD;DnnQFn<#uMf_?OQl'o$X
%d-JCKR_LEK/jk;bE3E@*jetTUGiGbhT;M:ShATs+l@8tLXr.a!fhaZXVKLF/c'o+tl+n`&M5q\BDiqD/WJ"/$oO`Ps"Hpb/mX8o2
%4U=!WWWe2S]$+$`&-Wn5UNrm-5-_ObDoJb+6+u[)f">8q/(?%cct/I*A)4UWS*%!JpXI"Ec]PP*L'\`5Ks);?:gTJmi=@\>S]X?j
%`F`;H%HCbl>%/!q^KM/fG)5R=Y+:m(KX[du\)NQ1s5ci`5.@kWIidK_*]TXjLLm>?E4/mk]o%5uqUjMRdXn`qgJq'pSD&5Sm>3c'
%KcQNGf<P+<.X<'YW#bS?LJn4o\^p?\SN,@W9aF^fqJ+Q'RZ<et$>`B3^li*d%KWUs6'($ATk.lGj&/OAr[M9FpYMp#Jq9%3XV;XU
%;61-TYMp0Bd6Y>=8X.'P;ci!JOp&mMp;&`rgrilG>NVo=&7Juub4Xmii7pOPYPb&.Ac!7OhgF<ZaLG%RV+\G'_MY'gqL_FO&XGO5
%hFa8TTC!=%cJ2b'$>IkFDID*IOcnEh't3e[R.:J_.mkh1*mDXKD*:XT82k[Hp3ESSM88dH4"&=^k5>POhd6P@;FB&hkk#LNffFWF
%rS+>$rC!hR9>&mEj]HV7%\.C\mO9TM.G]I9e/U#-8i<A,s-d/d.-oX4c%BRppFf1Hj:?W4Z6Oe9=+m80m.B(Wg[/O0@bbGOg*n@)
%PS">JRc_W-I:ZI^hjj*/N'3j<*RCLJA8f(rb*q4q!`r;f.$u'''6Oa8)PdT!M6l$]gVI=Dg"9-.QgP/0>>q>?IrHh?5rkP?iG0Jo
%S+p^,3U%tcG?@6KCkm^k/&Ib+Pj]B^p%L`nO0(Qb2TKW9MSP8VA_o;Ik6WUEUM8G.*/hJ*Z>Mf8d>>@2dbCGD0Vok@$MVEmHakOL
%`AN8]O$?r_AiD)_=&,jaVqsW`CIA_2XMQ)L6JiM0Vg41D-I:U)/S^N/qN'T"<PPMX$d2lGak>6uEn;q_S,$pU03`L4k!KO9\RC:O
%k_'nn)H-;gR7.K2'>A`aVXg=[pG]3X."E_a8D:[$Nq-.5dQ]G@>47o,KY/=n`tTGMjdIm_lgeujjLpiAA=OJU?b<IEUrYNXrU#X]
%=-LP?q<HL)B.ZD;=DCNah[Z0cp8jPTZ%UdoH=:2p$#?>:GHtpuacU;%Cat<E-f**-gUHT-/g%P6a)f@Z2F?OGS5&&Vf0$:og9[Y:
%_HqYh-8#),pU*VA.XS2i?E&*Dc]*?ohEF<X$:@#k%)/#!3^M+CFfNn)c@ijhe@Od]Jkith.\_(^2E^qCdmDgJW^%"hXnIdQs7Y8F
%n(Jh,jir(?$27ceGkXG&Dlr"Mgh5$"Zs`XiQR,^_$AoM_D(!Qn13(mF2N'o`Na+n.^@#H!UqV(%AEBr&.m;XD6Ejma_NQo[7F)*p
%IPnpKFOf+S@LX.g`jI&A\TgDl.rI'CM]!-$fkpGC:YteLZSg]<2=g7R>k\<8gFZ8dBqZMf\8%P*-1(9`nat7AUD%Q-^?AGO"6D9I
%q)NqEFBlBV4V.!u(gMt4V_51B^""l-l^/Q@HgM$^K<sB3fH%=g0\]B%*\^JQG771_R=fiu]+'h4S&=W)d*g"05btm42JKm.S,B<X
%h"AaC<_?s5?<gG\O'WoU:bS]0I,^S"c6h^mg[a@Ui.b+m;?k/.(!C)GBmS/&[K+pE`aa?k]X_eNP'&i(U0MY!I@?h",:KOeiOs1a
%OPJ!;S:tHpi;DX"JA-eC\N,u&?^`&Q-Ehd<:*XU_JNT&kbAOr^_OO_tmOi/^Z64]hJWEtOf2?B;ghX/aF?i?\!dL,V;3YmbET4+$
%Asmt]![9IB1pQ=SGpGlT'C)4C-m8IkRa.3RF4l%YkI)UfO]2^[Gh]5h8?#COTNQN&clUN\;E-h?0KI[5C#P:Ofr<*NV6S3^U0)3!
%c1GO`?PT1VR>ob#c88>6]GFS%#iDT%7oE&kZUh+$haZIul(AO)=0gLs:VO93PYPDfX]J[T&3SZ6TUk).=h</!/Cr./.SFUl]&,%n
%5Pt'trFBd.#ULA;3`4@8^]rp?@i6<+F?;P"*f;+05h#*QmIsdY%F^q*B9N`=KcSm@+XNK*/AO7tX#N0mP5B]443(#u;F/b^V5+hL
%'m4VGPrJ#G!jY'c`f28:JAm2J:>DZEe$m$":cjj^<o@ibU6i]'jiR=8"r\HGQ`?%TECnP=g-6>)"<Lp.*a!>:n6.A2j+bqkZuJ`I
%H`KPt24"n59Is27ZhCf?#Mu=MV0OG[N"7MSjo]FEN8W:]b(@?U1?8n2(7KntFPpsn!u+),efqX*bc/p^JX:=_?l[Cn`>RVAi!ml$
%6=gtq`1*ecBh>N[I+Cb>ak.-I'Ur(35;N(&/?N`4*H`QsoCQ9?*;Gu1M`H8;9"C!dP9]B:$A,>8l?I#+6'-,mi1OAfA`A9Ifmkj1
%V*oV.;-S&r#o=k/Q.f_BW<@K!Y;4R*qO`#ecD&BQPr'Dq[/pMihA1X@Y%F<4U.YBi>X6Pf,rbuE+OdomrEKTY[cX]6&ks]-!VeYe
%YMOE1a\"-=9fZ@nh<iMb0$`f(3^$d(of)@,^uXR1`Fa<d\1=o/#X;+3`MG;#Rl^I5#hsMqk,2+DS)Y%!>S8CT`Bn=El"FIk>BX:i
%e1oS\h4hUtNB2+#1nX3u@Sb_sJ$:i)OATh]p]krlCoQ;3HGtdG!N!Y$hdol6<5^HPARhb,q]Aq0r.E+]]O<152O*I+.`EeccJUs'
%!C]HG2\Rm4VT8Zj4PXPQ`P37ZC2#RHdb3!Y:.)?5@8/JD>Q3b_C9lem?V;G"Rgqjl0L&F5ZpA8&nsNgm[:1eeX$:d.AEoSdXZ`pI
%j18p+;`GSf\1p@WJ"Il=QS!Tq:IVh@FKjof%%TAI<J6JoIJ[:Y`nbg;[1DW),51U"_6A+^ZR3BQhV)g,Ybo6n%[,-.q;=\HOp^k[
%5tZjcRR;R%#S*p.f.laR+VRV@c,`>K=LXfh#dfY]k_i/e62\QRDEJb?T]MTh879hfPC=n1p-YZ'.?dJ%3h$;mEc,(SF\/'Xrm5Xf
%Gs7t`8\Z[&B4W2#PBL-Tp+B.l[]%[U/om9c*a,kDG!OM=ddY4E&_ED^RUm4`Q_@[j76;fEcE(k[9T[VYIu4*gI?C6jD3VR'1_^CG
%*"Xmf#Sg=spLN_jX48.(7c[@HK14\()41)/>\75b/+^`MQ0oCZ7:0A6%OO4FR!rbGQ?/)J(B&l.Yipj:W*+h2(Dtb,*M*'eoNJmk
%^Z]?dN5$mM/l@beB`:S]^LmusXFir[]N8a1??B/p5mo9oTuf,iSJ-MrEUj+F<GLWbZtZ-2PB/G@'l!cnDb%9bf7McclhIu.],foC
%'&Aj#\VnBB)&rp3iqtRpS\'T6[$<QK!OUY3+jaT_"-`L8#Mu?(jtCRpoj)*=XKjB%m#9LA8?MX<0#HYqo`!I6^KGJjrmGVTT,&=n
%(/#,BT\cDlEl7TZ_&Kham/Z*YSQM@ETA^[B-mH2;/:=%c4q;mm`N$<ZnQOi[S(<kF4*4rV78]T"+guRC5ADo[=qr+?!c6TF+"r\U
%?DV#uH4#B?Dd-5A[_jd526aogo<X&TX:<F<\n+1-TicbTb2Y&U:V:PpM$j27!WF8>WY+G;m9qfSWr7$*JA^$AS9,=\rJ<I7`?2>_
%Fs%7/1u0`0e4Q=rDkKmH)pP3ibPB^Xnh#-jb@>RA`X]X1mlSOLGUutri1mlpWNRArMm>rinV*;AeOFReJ)^F5le-Wm;6V(;HQUh;
%.jP=HfL;P?jmkF<>TV]DMlh(A<<h$?,$+-XRC@UrU8.Y(+34r0"CSM7AhU7oWM[_Z84,_kG7<h6]RSd:.6(m@jNc77l,T_PlDG%g
%Yn=t*8<rBe7+2`O*fd?XZl*)iD+35$V,a"(XFn<BQ33G61WAF!@dsl))440+roQJSfiUB1BG/5b`SrW#0S#\)Bl37P0"uS1"MPb"
%ZA"T]@'`<9Kbe'L[&mQ2QbBtZ25LmkB;gFhg9m4Kq/l#@&2GpYLr<eQILW(:j:.gAf7"n5#Sm/WK(1h@gCmJR<h9V7DgKb/IBICb
%4kD$G8LU2"=E5[Z[d:NZ109f[RPPWr$I9HD-i%hNLAGiaf/c]aA:jN^l+[ft-C*0&VIfdKSV`hkTXA`]`oMk":TIq"1oJmgIt$Xu
%(:"^A.X>h?L%!>Bf0[+DmQY)]$t:$Ya[=uA1n6/I?8oE2Z79-+s/)U)8bg:ldlgQ3"<LGr/;=q&LT6QcX=?'@QI$UsBTluP!j^>0
%/hD0$b?/:ESbcZsg!eGsnI8!ae8/edRri"*73g65#9#@4=:*(VeU3Itnl^E4euY7%mnHY_&%"`n\4K;.S*QnFQ9q_o@"f8m?`Q,m
%pQ\Hj:;(Kl-'_3i#(3d9D8Rg%&L:mfdG=O9%]1k4.)>>_?&>Fu:Q-)>DNTBN&CGBn?pqsU6r8WZ6cE_1:OnV9?!#-3ol=at:W].I
%[(&nG\%36ARPmcB$=Jr@J"E8s5iR9/4b'Vh"_ZU1-XZ7V*sI-Bmd2:%LCYUc8="L1oC3QLReDTcT*m.-2XGAg.@cB%:4P`tV5LFU
%p/-^FonUJ$*iNn_'l$YAURGCHrrS"P^JH@'eF8Nf/WH)(&I%P,nI'$[5jUm1$MSfq.IZTX"NUn5hPluD9J?g6TcQLmN8HnCHL*)(
%KYf[DHm1oe\:+ajqhm%Cj&NoSS_Bhq'T2U8Rk,:PhGREF_^N5tNj>#\8)5/sEhl_LiN<UDIV:0^M82<WXT[c/&ld4967LA`TBSNt
%!P>5W5J=MV9a\\3[=5.N/r+]"Od/n.Q1.UIO+NHPAN@bo-6B+Rog-"?[fR@j-s*.?l%]ucCn!]ZU&;Ap68u%+m**N^Hmnkri2%ha
%e>CGXGc6C;,N)D</eJC_N_M?r"<>QUAl]3tPV4bI5ilUD_+JG4rl^f6FVBT]Q(=81LXM;qYNC#(@m4af;b5XKD$Cc`D:$].DthFS
%Kc2JpN=Rb#LZKl,FEV%?\""9/,l*QNf2O:O[t>$fY%;DOC+j-%":lkA@Ke=j08RJu>h"_B'unTamNOIOX@iJYNb0ndibC6AH`LU9
%ImrYJf_?f7;V8<r^I#Q6*=dj,W6"&MZ&tkNY1Fr4`6#"<RL9j#>k+]&O`3)jDe^0s&Q-T<160HM&T;D%W@/P3eXEV%>&>3sWYfm.
%6+eWo/\[*OYCL0(8b&[@;6u3f5Ztbu/Pmr3Dp"Bj#W+X"PWsqHF2aVhP"`/Jf\\T[>aPECUsjIN3X4Q?Cg/To6d_d:;=GdXKo[(U
%51a3hFt/HN"iCrq@K3,s&/$",Ir:gpqI@TGnnX>J8t+"/.+d!V?#OX;FXhPCMipVCXa9S(:%HbEf+@/5R[d=o.ll2rj"%=VdB/_o
%*%3fX_m*rO9>b_ML=8a*5ZYkF\@)OGniqm8-Xp*0Zl+Cq=sT<oDcH/lqH&##[7L9%-hg.qd5Hc&jH,GPrPS,:,i@@jT"ck2h^3]C
%YZ7mo&osUO40-.sp$2u6E)hf<$[,mBfamoSBbes/50cI70JgBZn^&],<I(+=qdhJ^om%M`IPi0Z(F9]0n@n=C:/!4NMfL>,XSn-%
%I>E_;i[#fr<cXX87q,rHHV6o2YM2cB/A%#k#7-1Jih9sO`%l<Z@RUm6r._gI;b/I+Bb49t`,ZbA)Bl@jUf$gt'$IeBPU%N?rCR[!
%8h3]B92)E8T*^?c$],]J,aNEajoUAc$/PO+%ReH3%on4+Fj`&[oaVS@qEmh_Lhb=7JPi*Q=fX`n?S6ph[@XBr!Ok`m(NqS`\U>u9
%%;344?P_l$NeP.I[g%=o*mF4%-o`q(,V..52NUuR9nO]\]pSabgPl^6\ug!+YWhSh?kPoR(XE,(L:4@-<j#[Ogcj<VTh/&1!p9,^
%*:ABb`"`6c@cdnG`_W*BQ:-T(>4MEL?n=/eF,A+`+E2hC8F8;X26oF8rUBp,U3,D7h?F;h;K8Tagb63PEEarR[B(1Z_40hQ:[+/W
%8am*"H7B9W;%V:.,Cu-t6@!uBh-aS%6KbrYiR7b[e)Y@QZJF*;=@+E,i,!Al[HX_:;U+D=!"IG&0;IfC8Y.Dl3gJB%Cs4uFjtC#Z
%"pq?#,d,cdnk`-@I?@#@&XQ5#HqEk"#FAK+lr[Od'43-D\nXUg<?C]+O+FF0#BR6ckk'H$-Ck6?^KDZRo"\9KJN\/leJO_tNa%3W
%%gpr'pJp2+o&Ct-fcJELlK,FB!p=2Q%7m7P/7&4"+s\S@\t'oN%@nS!f(LOCdXN`o.r9DM7"4UYrC8%l#%hID5b^S34WXIGZDrE5
%WS&,9KT!sm'5r=l!ET)D?:TWL*HW0ehm[!--$4NuNX6i=4]ig$^@rDn=ZXmC6C;Q8C'^WnHY:_X6:eA7an"`0s5)5AH#G6$WqW%a
%._5\s!0!b2Kj4b&NA(BjNi+fIUTi6C_.U9k5*].d:lDcc:Y***G3-mFZ"B>!:\n[t0R1nIJ\n0&p$qDZC_,8MK"TjXEpsp?4aggP
%q84uSGM9bX/Q)M\LWPs"b)>M8kih5q(""WgGVBdN8-YQ7rMHFqb%h:%W4T1`'bb#EiCZ9ol\^R!=2,N8m8H:h3)$[cMcgpa6aC!Q
%J];n\EIDaSl;EO8fg.$r-i3NbE2r679i?//Jd6;Ib4+Q^4\ad<'g8g%D_S%R&K:_hX%S4-(0"2sLKA"Pl/kBN=>EE<jCDtmQ)ZRs
%T/17g'_P*Kf]&@@NG9a2Mi2$Pf"Irpap#sf<RcK6"67;]U)76!b0_>4/3Sd1:O,.5CSA/,i%o*":nHQkg3CA6?!36-8"HHOBV)[E
%687l9.(V7(q8uA#=+B\lm-!d912%3s6kUoLKS8+@>M%+gS@"/S<k1>C%Fd/AgDRU\SQP3V`lhEiaEQO3\L&ll-.\jk_+2W!*)H![
%Mpe28'$,Y$M=kY&_<:fil7\ON)DO^r`*hoff7kkogu(uAFM>ib4RKfU:Y"E;p_mXb8"o6IA!m]@7r--KM5lKG..bmrVa[:*45].o
%j`4bBf;tF^./1h4">Q+2d<h"6-9[stLiMY1CO7Sc$^u#&KD"1?Oj/YOitBuACXJX,2.79Q6lp?m")BMmJM*Bpgb1\"[j.R0e6fh7
%0A9Ao`XO.,kBQF_J[_`g5/V8?ioGjpU51=c%"_U+5a</o!)CJL6=lttGk&/WAKH*N7s3#0q:J9eNmY%1j_X_N0KrD%e(/Tf")BM=
%G[T"WZ8MccU)TY\(c$h5$A^`(>p*hn&ld]:'HS<ee)g+`[Ja"I_AK`QMe,*qG:ao"RU;'T!1uo2_GFdQ`^W5\g80b3>1l;fik8F\
%l2]_sqm9!@ZU?S[C?#"j`B*Cdf5R#<I[=:s=Kq3&+Sj9.Dsu%,#B\Cah#Sb$<bF[M'g"0qQ_qMs/%r9;C/]a*en0+g`$b"**cB_(
%m0UuW<KCIHN&F@q8fR@R#Rgbj:sfW=WFQO@hsu>74sgN_HELDODa7\DH,N//XLEGq9s%:I0UaI0C&?Ui.3DL-&b\j3SsJeomI#N_
%(KKtT(6?JUra<.s6)qFYrHU;/2dJf.0cm+mDd.?e#F+*IY$/59rTha.1e2c=1Nj-3-X30dk.l>I3\Sa2g4e^iB%0?@THJK?$SR6Y
%.R?02>P-$`Df?b^1.`i&fEP,odA4W96J,$l[Ib8P?k.J5nS[6Sm3EF;af9j;;g(UYXOKn_Fdg6E<fBu\Ud:@U.!;e-bOUF\S@?;K
%m?/@>:u8[eSkDD%033mG0#Y2I0)9*qi^f0(He9k_JQ>"D2tiEA5_&,8`ikYrT,[Z>lur?Sb=0CFiX\jD`O42a;]R#Ebu^r8;s7>7
%[!"=\[*AEk=4^A]gWTbkC$K.j/I9Al*`HEA7Vh<!6sN$9O7&?:g<,DAQrC\p2d>$5K@RdiY+6N3pq48XF_H=[S/JGBOd:'_8'B+p
%Q0f-bXgrJ!nE#*CD,/[fT0A)D"pM*Ag-tjPRdJm60%Wbfr@FBRPqb5!kWSFsJd]QCk"Os7?VoHNkZ-G*/SHDU0a5G&\gjfh6<Jud
%C)7J)?u10>(uC\,[m^R<W&plJ)^5g*!MUQ6m,"2,:ATbZb#^BBU>3kpi8;2VcCBbp;?RGq?LLT0f4Fer'[#$GmC;`[1:?Qk*HTtM
%:Yp#dBmcj:X$Z0%X]gka)WSX]15W%QG]1!82+E/,B2k?h].^mA=M`@VHR=J3lN?,V+*__/c>#R**K8Q+>#b#?+ZbeXj)g)d<s'e>
%U]Y,033jjCrEal9X;UYTeckA@dGj0):u(#A'b>JG:9=2aQXWJ\4obGri/"!l!T]q1nDd5=!Yq'',f@U<JbNKY1Iu<0N2mF?_$GXR
%(s!5--F8.jH]#NNB3Q&6*=[Ib^pZ+Q`&9GdR5q<J>$GMNCAo[=:TSD1b[&^n-rkqLFt9g@TF!::V%3AuOX*m>&s,+pPbL:a\B9B/
%SQs"(YJ5?n/_M]r(JB!`]YE2%?+ZJ6A.=gqZX!2R=0Q#F3H'NqdJ9D\?>5Jmihbi"@`</K4:nFnNQ%H#SJ^-_Sl?,*qT[\]+KF*s
%,tKpN88@m>-soo3%/rq5UY)GM.-54c=IZ\$Lb75g>ElaRji2:Y0*,$YO8ZXc:0(.=D!cd.D$75ddi%;9TRQ-`[HRJjBm]&k*/]<H
%\SZ^9TEF'n$Q>A#[W/+*7W^\tGT)k^gQ?IEq7B"aZ(l,bf[3r_\f^]FBaZh$ip@UT]h[g)eAPr3gcp'K5X9*M8dYZ`TfTB?b`Zm\
%`&b-qob9;"_Q%dM2^?ru_do$X-DO_?>1#+cCbML>$?%XJ:#BctT>8KDQO:k3Y3-LhbOX9uCBQ=qPeJp\;6jdrDU"EXL>ap"Z_q`\
%K.e$/o$_`sj9-rdC/Y!;;_-US3ZtWuoZNCE\;7-ui=?`j9te)X3C'D(*_g>JDJ9<%]A=949$_-M^h%4i07I[#Ugq&^e!0ZZXkS);
%--K$>nj/=pN-j"f*'1/`W7.^>DLPYqEXL(ndj<(+OnXFs[diW$M9eijd>-kP-J=10%QC#9*Y#HR?drOE'Ud(s9<7c9cE+Li`Qs'!
%QmgR_W0qDD!ckiT=&9f^bhEcOa:QZcnq$Jg_D=@t1Z_T"a&T1!_X.jtJ]ZND#Mu=@A-V^_>P=a>VmoQ1)iSkFUCOkHDJo0iXF/[Y
%"7L*cF[`V._a+s^/kS)p""a'8E/9FtbY^>k-e@#pkcE[H)dpe<oXZ[%r*s`ip*B^&`/mj+0dkg_<Qr<Zj5p<fLb(WR`]K/tegi9J
%+93[`91s@7M\GEik[:X87,1:L.!A<T\V3Ib;0a7:S@jd2>""3liZ2(Mg*RWhAju%0nL38uBLf,fUXYTR,]sLi'5LedOeQ*T?M]c\
%<5BSsQqT*S47H%j"Q9!lY,@r4::tFD)>ou!p>o)@=*+%-<K/6CA5:Xh5SgP)o@O_Aong/[MLi,UnWCcW7k_rh(-]t+Wa6($HSu84
%(N/?7RbQrQZgDsanE-`)NI0FR>?`EuEi=bcCanZ5VI6lu(iXRf0J_K($LYZEDK\6hRtuT7S@j\fnD;5?&ap_P:j6*INHOW@`F6Wt
%f`:at-l=MM3:JhG..)N@Ee8_62*De.]\+Zm@DUEZ<bDe0,m1\P5V&it]GSXNYVpV[oeUDB[&+40-uhs9ONWiI1gQID>k?4ne1*MD
%o]XtW;8]NkdW9V@+h-8d_u7.W;PG,+S'/auRl/H)7gA^O5ug+(pOLsXJrRuLVJn69/=o=[S>$*qg.)eiF6mnW!OPp/EK>\&"ZCB/
%rfrr$Nfk:Kb(6[t-U!$LSQ3R6ejDUI^0)GlgJPp_P?clHmE)rH':eL-cq)B3/UsCO473ee!r2XiS%Q(#6hjZ-#$#H00g;Kmg:-<J
%@hT2eihT<KjQao?-I`_"coR!n`\>jcH0Nfd)U9m9b5aS'5S^qb%Z2bR/QT7jm_G1dR<?`*.]-B+^5m/P7D4=[l;R<N(g<`IN*OY!
%)@i+=HCDFa5^L]d47M?`Ki%<d^/BNbV,0b2DP2@j9?\;$rb=7s6T(4D_c6S<GuB,e9`;>/B!r6dlaGHoqJ2<iAW@ZuQ(*A9Q[?&"
%5sFcF.p8IDZbYPEQHS6;X(K%F?b(8f%a)-cl\lV'I_-"o!s0l['tA;W$aTI[b3W4garU8gGI!*qW)ENd;<L9(%DfXH*(ip6>C\Cf
%8h2t+44^GqV=j*9aS3aQoh52AUb'%?8B?Y`H*fo))PlMO.$>BQ3toM$*/hd2U5\p\94g:HDuXA5bUks7YKQm.``+cU5KiU7FNn-8
%S9*Gq;DfCCAl;d.c@P_5:pLipi=Ata8qqD\"%T/e3PF]f"JU_T^`kds90CEcH1HE0.*h!cY"5_A<FoF's!Zn@RD`)9]XN[ELR3t_
%]KMKk`LO6Om\/ESh]I1lEUq'u?J4;sNm!(Lp/#e[,_@$IRTceTq`7CNZ;oiEGWs'(9'g3CLZua(]-sX6<6f:KTeE.21%EO7$15>X
%l,BJ$!*7h?&oPsNpGONP$ZtdEZSK/XUrFf$P+X#ObM.0[]1hTiN3_E\RYr@nX0$FqkZC3b'FQ1D0@ZZ(Pc]VT7%KPXCM.^QM^RA.
%<C*YoZM^K#:7prtR>fFXi"+%e4I;D.WnF]X`7c!GY]Y/c6t(LWr\NpWZr"JuR8A)dW%<4\<igbuo\54HE/YX\1;3UZX/#4RW,1uZ
%]k_>cC?FKX@FnUa:u`q[p01CR]:tR!MmD8I9p0CccHK=nA;3RjjMWmV9WE1M\%F`UP46@l6V146c>IfXN`K60(B0(8KdffS`DFD;
%3\fL3W7ePFi"F-Xn0[3Ykg1meU)@Fob78GFpC@H&e'#4m]^:WoB"YdOI5#EaQZ_>FdG?HJ6^Q6gE#qrr=L(q%&+dBiXNgW0+$@RH
%Lqgb_9",[kic&#L":eMV_;SdfAlus)K'Mpr*dF1LQ0B2N>GSMUk!%ebU2,HP.LQF9;MIP]]UU%,3-*W]6#b"Gnm'5!oCi,872q@D
%$(Y3KpjU,YN)XRQWDIa(d('ZWTkI6:q!B>A7I#HqG5[m'6Q$\]rUP1b.Gc&dRgk,E(2Y5m>4g(n9GW/(be7/d*,]CF5;s@lgu>Tk
%Rt[YFnTbb]ZVS:lb"s4JC-3);+<b_iT5C2BG]J]3(Cu1t5<iq,H4GmV`@9p)3?J*ZQuFQ]k,m>hJLf?poA&@q?2cDDaFPoPCWQ#]
%Dtf$qnp$#nR5r0\f=p#6OW;QB".13UZdn.U4KE@&2KNUpC=\ke[P!/Cgku)G4/bN^^Y<d+[>&<-S#$XCq>2kNPJaLFC=MU^FkiW%
%K5mu`NlhM64I+>0Xm;CY0eK.Nn;H!FroVB-ET=EPiBgtf#1q5=VHp`/7>#ZsET&[P.!k:S)EOk$8=,HNoF>]JUC!Dda?s?b5=-*X
%)caDU'0d*A3R.Mt^ld[J@!rb?p.QHaIUL@lZIai^9+(_a6CiGSM@=jnN'c;hX_#?)+>c\G@gcdf$^&=;Cjj!^LG`TV(0')HH]2LD
%;].W4Y6rfq5m@SfAYc-p22ZPnr>bY0NOY;K5>-(E7ib$@U'a61eU5M[F`STZ7gL8T]!OgEn/?&A*k;2OR&;C1.A"8uA%R:bD8WCC
%o$pu;e`ecJf18A:g7X4pm5_/6F5ZAEAfKGOT*;j>;8T,ER@BHhK?+i95am!E.(l@@!tVYU63:b+CZ39aZUsQ]VG?t^1*^R)cSVX-
%mNjfq"RZVgKZVreWp`c[`(:Y&3)ok^f%\NP.d7*QVe'e2aBHS7F1W;uqJmu=/n7!OKWA)Imo&a)n$ep'I&Qt@@PrV:$FBKG-LutN
%*a!>>Z`YhF=S!qbA^c.]?^,&6JQ:J\0]DZo\A&:"B'/$AcP4\0/NW,kI%2IMH(ab%_Vl&%R/UDO8LNBWARaq<N`UbNCF[Zr+p\X#
%jMr9310mN5@(\/uc=XX[o:n`$1+.%!0<'DA&.,"9a_-jj7@.2JCYGgkR,Ph`f?=<dpatDfl:A1+.7u0#\]_RB;8f0OfpDnfGiES@
%@NKHm^n?MRO*YqL`Z9`=%(.*,p=bZL02iQ?2i@PIDd*r1eGW$CIFPO4=<8;Y:rXqpkAejMGaX^tn$\M9M>)2eRSJNUQ2FLoWG%E=
%d'It`XRM`W.>tf2%2T`RM=l&dmU-!*GfZTZiA%7XN/='84ApW1*dF$GF^<Bg3O.`GhL+%_3\[h6keSW-G/<CZiKug"aUG/-=n]1+
%hT`.)"6Y)[B=iQTUNq4%Lq>dGeZ5g/ekr!k*3q1P&OMD#`KDh/>Pau)D0I]tZhbrU`o^P(OF12Dm=!+?^b8AU*npm#maBGAhHjg*
%qS:ef&oX)J)6.:&6<94(`$mD_'D!3IjPF3TjDP+.,+4WP9i<'XF&i"82A]9H.6Y@p93=BBYB!_sgdt8>=*KNCP,@AX#%+^sHf/`b
%+27#a$U0h[k.D3][&gM;7+rJFl+q"<Ak'&1\+aN9g)YF-G([9ho*hbb'/R4Ac5!jemFee>;MJ>C3^M.3LH5JV/(q6>^1KC\P,G<Y
%C0]uUk186r7@c2?*c)I,WTJ<?M?h.5+Us&Dot@*)17?UM4"JCuWB^)K;Y$YJ2tk%UQ6=1RNtbBD=Ci4iJ`Um+`+'h66QlGB3\`I]
%TEA\0EMBZlg#I,L5N4Y(:4<^T"YORs+kE>6G=(Vsbp9NOEo9UV>)(k8E5uBl02tENqbDEeGRfM$L)[;?5*e;iEU[R5B*Cb0q@[>-
%VHT>LRSE'5;)a4L[MV@qJk\0ijrO6^Js@Q8h9kZ_rjlR5MuVW>S;K+BL"MoT`Cn)r#aTAdh(QKIE;a7nJ<ZU<)%s/@["]'Q&I*Z7
%XgH^aNK=K5dEi$(XF*u2qp1*LpJ[^o1K@_qoXqQ,'-*]P--WMScnD#mrM:G%)_006'rtmog\GI)?\^YJl7+"F;i,OPi/,%&"gMQ)
%X8'XT$V7"haV:-+eiDEFL?-GU(L+%tJh69meJWTm)'5Z.k(j%k`KMr2PEX7<.P9>L_HJh/@ags!NdUf<,c92P!)nEC<a(8b_G9H6
%XT322kVdXbElP<lM-`@NU:[?'jNB34,aGt%$c6G2mG+/L49:U!R#.iKA%u/9M"kd$Z_[*bLkK.3jFO@=^bj;jT=fXOf1n`jcE,:c
%92u36B$%X;A=V2*;?[3@L<Y0'rNSURarG1$L_fr6nD"c;)i"@ITt77SU:%etekb!'Pc4'tHJ5Rri;;Q.!c9>Q*meA!13C*sqnJR<
%^'i1u3l25*@-A(0R64CB)C+Q\3q3+<:k?UhEeP@cl!YU.=`N5tojkt.f?o%I`[Y_r1]:3^X=BR0HD'2cYA$;DESZ^#M*N/]0UAR[
%bP2h7"t[_0X]j%9h,obiaaB0&/AV-pD;$&@I%#m++F4rFdIW-]?%"oDOV%[8M,o-l*8/N:CJV3[o)<pR$&h#AWNNRXiu`eVQO]1:
%liWIH1'cZJ9#8R"$3BQ?o-$aiXgg;42_BCRg.AO0eVX2&Ao1#tYR0rN?5P&'ME;YN!Q^U.AAf.VToAn/>US*7Q,>04:$/SQ0I!0H
%O*K15+Y3dOM"^u>1,u9c>bVo#+-.,WaQmg@5O(A4_6Jal7Y@3gnf"\rhQ^F6J:jp_nM[l>4u8_lAJ4FKEF\8G#It"QdR\WtEUo!H
%oB3PE4L$fBZ<D;(V=d=`A)/J"Gt<+HcGkr5&D/aV/Sh:-8G<d9Y*re7Id<d?LBK)CGuS1-6nB?W*OSer_:RqF_G7a\<FkK<e@ZlD
%=*VcaVR'r\[[qBmMfF`I77':;+'@9dk`OI;1]-0!mZ[=bgD3(OA<#F":(&:>IX??mh(WdHc'taXk/-g)1T_LO=]G76?p[hc.$b:$
%X)'FfZog$G@OL#Z<R0BD"7i57KuGTS0FK]!,M$T]AnFBhAZDVcU:kj3D**\m8D,"m>+:/3:=ZqBBKQZ_KE5LtM\pLm=)i<l1S7IU
%\a!"!%=MP.bm30.2O@KCqj3nBJdp1`"cNIj(^UDYokrY.6=MgoRkGQlqqd'q<6Yf'ZXo>r+4)QP%^Qc.@KQ^&/l8N\N&92N-WaR_
%UETr`WF;HVp:3J!>WUA/WmVge?ZesMX)=A%cL,GAkTE6d]t&/DoI]CD=;V<9q\dYhQUb%YjBlKBJ0l3R4@f'7"C"q2*)=a(7cfQ3
%*LcQ"EZ?VPs/<_*@m,*)]Nn70F,(RJ<7q)WjTkM^CKhH8ITinR>OiqU:<sB]#P(djgUPch(H$7>hql1.B3TB78'LbU5C1;OUoCtF
%6?(R19(?khjD#7t@\8brCG(M-XYZ:Kqa9dT$Lr6HZ8CB`2%6Z^QC53G,Mqk)M79Ya"l]ZHXfh>*!Q7R/%KIUp=f(qBbP6$K$PW#@
%m&a/+'d9>=J5>T'De[5SL=:8>^60M38B1909aqY/o/E,ak-Zqc8p3`JPQ1ug3G;;WH&0hSc<&s/k$G\7`uFMT\S(pe32<kArNI`9
%^%b&X^pmbu"V<&E0&O-kDD;'0>E0&060S\mDS.>rWsDFT^_#59s12csG!PObBH)k]^SOB'VV1m.ZNF35\a/Em(8ClSQ;/AM+r>b#
%]".uDE9TDA,R(CqK\!eY=4!E&YA<^=d-ZnZUH'HM%"0:JYlMWD2kWp</NMKFUh%LoR:FK9DKV.]^-ZmGV25>9dQE+=@8^L<gLOG;
%=`)>6CNM9Wk7a8ID1m<:7]"@(W[.8KBo:4<!8k2c3,>fd;2eM`Q:oh8GB-k3D=[W7KXRMcmu!:2\S:oP&9[B,KbG+s>(kZTMTsC3
%BE?*W*uhRJ"#>n0;MYqAM9>u?_Z24!"'-oIjrc+5[3**TYL84X,dbg]#@5EAV?;9MZh_(_*Si!-:$tcJJ]n**!'Dd,kq]cXDK=L]
%hj!,6:)@qH9&kgeKkgRqr8Y(c&e]<m%]9O&$[Mq5@YrND%@fH"dZ:,j$F\J,2tE0Z^2T]0Yu#GUI8Y+D\Ih`;2J+r:PL,&E4ttb>
%Ti'SJgaB(ibpbf*!6SJkHi@2F)eTq-CReYD2Gm#UL;!Qs0Sa%6VXaRh+CB]DO/q=SO+Pf_H(aQf"NC_O\QAJ"b'q'X>gbfq:=Ug!
%;YtB)X'b$oBEj4qR`Z;3mDY$C?5tiBZFn&gNp/JGI:5R,PkIg&Jn\6uIT6hY>X,]Z*NSR:-:Z*;aGo)A`1[Z-b!PE0Y"b+l#jZ-f
%XUQIHWPb\l]sOSR$d#ctQ_too+tB]"g*1AAafMFa6cP\-m,eKr03)/U*'p;amK&%1Q7,(0K;E9(U"+ZYW/=3gH/g!@`*R-/<mWc=
%Tp=lES/7XIq<);lKj+/qMp@Q-`N-?GZ`*XE6>hg/.EDNV$U@]gqEc\Ej3dlfD;>Re6>2_?5RRJ>;8ElAT%#YqZ9q"]Z(6rQkqmo8
%J2SSOPlLC22nUG1.&@ZV6(/._\HueIR?70e%l*!q[L43tTp0Z0M/'gD+@k4bVOMZHVJ_G%(6m2$mPHICU"2r@c(<\j;1Nc:kI*60
%k5OtqX]5=cfs/*+]N/3nLA:a`?X0f^5YHQ:$630EmG`5?L$DV2n0XnnKTi#2VI&T2;"ATJ,Y,%F$>PUTN[nmR/'2XlkE3t$%V-fd
%%ML!>nj]*3""+\m6VQf`c$Crp5)grq7oNE<ILtPA=pb0[Edq4/";sqic%;XoN1GMnd$oPJ7B.(Q.:rm""=\A-';9Qh2DGm[OR!!&
%7;14+=9M_0[,s5CNkloMLU9Zm]S+ipD:ok&#KYVTAoMl5,>,d]FBXP"\R<R1PW"&WU!J[8VSrb>);[+6GW$];q*MdrGrTu,K&hG?
%*<8a:F?j$c[b\0d18_<`7*e3;1$(,Z6eOtmj$`isOM$#R^fgCuZ4,10/.,"D/k;jYC;*1L+\WliJ"#JO8g;K-&Sk^:2@/Y`fGB>6
%;S0S6DO6Xlk&rMigR81!d<)t5":''YEKH?KM4l;RolP';-<Mcj@n(#31(!c-h5%J`pHM/a<t2pY2Jq0?Y<&<6;'_Ja\XgiLE)e:>
%^\X_s`8Q9Moa`lqYDq3]56S@_6f\I_$-BmS#%X:P]XLaOqZk;f_[sDd].nh9+U"%@VI&8+`4uRt#[dP]r:^BCT#u"AE1ghaj)LfT
%<%-Ip(!duM1KCQ`GZq.5`Fu\:S8DYFETUB9$1bB[Eb+&H+EZA/2..r.BgJ"i7O:()<'e^Bd.22i6P#j@/I"99f]%Q.0)3K9f?!IC
%mB9Ua8+.5qBjKV8GsY.U8@<&Z]i555!-WdtC`3GQd&OjVa]'F!%hlp#d7:;Q>jun37bpr4DM^RUcZSRYKg/Z-/etQUN]J^Ci`Z@K
%I:uS>lCM3PH)p[?<)p/:o\lInWgHI`\e&skL$gShWA,oFpU*+(6N%8^](/c=^W:I#Edqd!$Jit8c!V>e*KcO,<eNlGVU&6ra=JWa
%2F5P#%I%_F$YIU+ne`LUYd',bhQuNmG)::`6mL7TY[VaL7$SA2)IgDYl;SZ$#"2;<8Hf1uI#S!cXeATs\!l!kJ8"Q&C7'l=XB*H7
%WZam+hgg]uB`;Ga?!nI+8mOQ!FQ1LeYY:NprigXd%q`qJl:'gq%dI6^nKuVcXBg_-:Rj!_;pC8X]*iZ-CD6Fm,DE4!\T)hUk/iMp
%SbBNPnRh&qX.0HeKor!K&eb%iA#m1t:G][-A1<PbJ*lJRn18sK<P#kU=Y'QQ[iEs%%I3kI&cq:_"Jg[>HguKW"\j>n;:i[QegK$R
%'T&[?9O(s^W%NDpU(IgLJu1L3EfdXZ(HI=/7kp9JbJMC8+Mcl!B@d!\3#k<3WVqC=,U-Rup+deUeRRQL5b8qRd+Ft8g\K)@=6';&
%ktp<7\7MW4[O.fS_/SgF]bS9$M=ogU+`jJN"#Be5Oa=AVQ1dB]aNLfX%<FtLqW#?b1jSPng,[n)[HC+C?#%>(gL;&![Fg.4U%N:%
%>e*>4O53qf^LWMhYcmn6]t\;oX1/&D7sBo%B*3@G\:0_BGSU&*MHh45T3*3/(BjnE#_i4oX&um3YpgeZ4d'F;\A.bBjM18mn`Kh:
%N#H"i[&Zb[q`pb>3P_F(l`-.c(SVV5FPk,FXa7,Zc,#r1g\0K.;ps8>Hu(#fWaN/'T>AL`aRC\-i]am>S,J3<H[d>%V.H"Gh_c6H
%K.3cin*B5m+KX^C8;&o$[AV,nmr,AXjt%mG-DI<6&j]0b@VeM&V2rnO&*RHm0bVS3*jAM6SG>f2eGmh7P-U.+Tc(?SSS.UtZ(RhM
%@i`GP*>fml(:2]([@#;%eI7kr>$hg/=]o3i?0j'9SYq`1GP9moU0,qb5HH1\!mnIn`/O^nE`7)M,'B3JfQL&Gd->dn?]=e*'BYVU
%f?jaf]NT`f5XS<2>3-=HP<L"%Sa^f@`p[1Bo6dgFZS:-k,[d%dNIl/eackB.X#"A^4&:?coL1:c>\s!u\mCAkMCtR)*Q*EA0K"j+
%B3K@["R[bmI[@,\3RRl2\?cFkr2F?ee;8Wo;/B>RjM(GG'n2:Y0+-te<c**!'C3R8@WqJ+rk_?s)HB1jm.IsM(qNukN?d[_.Y$i"
%o&fpX!eI(@7fC="Ts>$&`*;2Co($t6N]QO,TEi:+SEWSg(*QB$JM2MMJ@`K2Pl<Ol9f\D8&T[0ol[`.NgSVm#^%i`C'sX!'D-uJ&
%JQ5!CHCL%k&a-BH]iP/K:E/csWj'&'_H9h#"UOX!(d1)Z56>1[/B+T&lD4@'_p4WBU-iF$"/O$`d3RH,!5^(Xr>@H2[otVF-3>BE
%X[!jr'A4bi>d[;Fq$;J#<L`UabpWDcm5mDgj3%RG@"727g>7Vk<s13BboARm9u[XW2gA"'F-OHif\#XVrIkM)n&(RP$b7VLZ4?>.
%X!4Amakg@r;^)%V&Nus77q"9%[I[Z6XS8I`o@i;_UJFaJ5L>73B_@k^Y`H9`f:V-0*)5S6q08-Wc\I9CFaRF.`Og!]`*24Yn;)uD
%=EDm#9aKK,3PY&i]ZAKE([o6=:"Z\%fff;E\HgEg-FdTuOZDaW;H]3#W!h'fPQ0'92-$Y98F3fW#$ENRY8Z9eS+loXSJarXA*9ep
%@OnN07tZ%LRu\90C3.VNWX%Bc'a<u^dJ,#NDNeI%U:C_MF:n43MBL7[KG)2`&@7_jH5k[OnrpK[e:@TGGCF4j.u:U`c?h]8N<>EU
%GC;FWA<9Zp?`ls[JiDT#?DSm'lI_Q2Xk;e*$>#7+#4GdIkf#eI=D@aY"CREOF(Q^.]_Bu02/D9Z<#Q0Q:]+L_[Bg<>?=qkIO>3m:
%&k.,aqMC#'IcA!N;<buW]omJ^WEa2?;?6I!bV7ZnTLs.l9-+1qSJ(G-qCNPCc,W3PLRj,fVaN?<K26"j(-SnYJtZF,mMB`)`,U!@
%F&CK6Vo+5qXNjr>Z+Fr"EQRlr?9Uua)O6=1!3^Ftl2>m6n:ihP+IoS:n%EJ<g#g`(^#5mt3tfh"QttpFlWW4@$HlHD'ftjGMG"/$
%>G\=SE`j"1EGBSbRBWK$^-8^1fQp`^(1k@6[4M_Dq9-e;cg:8/nT)Vi+7u#GT5PYV.2ksZOf.N1pFGC(rC0YV#u)aF\sl9;T29nS
%>^a+r0G`s`:^U[Hks?hs9eF`]rIM60:`2pV,85t18fp8M.=un1fUuHdRW8(Z#KA*HcsG=Fgan>tS9fHu/]>)0n@sq<,&P0X\[;\!
%_5?\=-4h-I-r`a.Qg7(U:ISuE*d1jpT4J"L%F]dt$4>t4gO:Z';V?\L+aKAie]Dlf^k#ea!dkX7Or,lOMnR>L>%k9NZM%k`n&]p[
%3]V<B^?bM>8LE^U9hjZN=/L/ZYF1aQ2(;=F%LYXV[rX$i]g$/d[_m\23ln5*4^\!.C/.R`>RYUO3UHMVV/s%UjHS0N_Z7kP_0b+R
%^M?uPnEqOQX0s(k-_^A@FCU`A^.W>jGm/GSjJJ=_JISAAEF?J@Y[dt2%n(nfK@^ssKNlpVRKVLM>Sf1sJcf3L'g$`af=&@7]XKdV
%YW;>80t76Q3"-8b]&$IG&cca0O(<g;c[N&>SDUp-fR-A,f&rLN>H\-qa<E6^i4Lp@)E#S&qG:n'p"J2d%0RekQc/:eMK*\J]XP[p
%_u$t*A:1=7W0Y:\!kDT)X4p,H9T#8UnJiQOs"JIm%7J;k!@()djl_m0=f]F"*<;-d%3BE2M)?)<0LUicr4^W\R5u5I90+WEnV['H
%?Ek/#BhO3pn%EJ*3eGpngP>-P:)G;99eJk]EIr!/P>s8o2jbjQn[;HdDq<O,*9X=ZFn\NWp#T[rg(%>I@k2CU6BM$khR9H&T[MDT
%eK\)tY(`IS"J&p)AW)=D,-dfGF)[4u5T/[ohsm2FS`#G[A[;mngd[JRY@NMM?.5iH1(dPS\.)/*C\bl%WIk:g]<!cb:u;oJ.6W0J
%/;$c=pBJ*5c"&7+gr!B$:?4l*U+_PRQ-V1oJb.-5>:hGg)YocN@O6q@<A?p7HLN@3VD2>^Yj-eK8c=M>TGk:uL.g\0fsnjP75>g;
%6M.V.?]1WAYe^RqVVd,:/GSJ&W[SpF)pXVF^!YHlF;-Q2e<M(fl,9'lB%R7>?@FN(/n#N\DO<?HU.$_<!B6`fV*7-hR8+`[n;8UM
%p01BT=mSW&Mk@B_)FW][:97g5?#/b?`W54Cd6l6&8#[D7$^)B):YpHK5))XigB71hn!/a#4e[2W5[j&Q,UXMJ=*PT7<^h?d]B2nj
%D1aPK?"&7=r(Co&#C.pO3@"p1="rZAP9ZGYY\_<M`UmsWGQQ:YkKJ6*]!P9Maaqm(k7!66N$7%bBBGq?VC9rIq&A-rV.oNaNq2;l
%8)C=a;44h".@f02"$i"m44o6P1=4AeNO(q`c_abkkB^<3;DJp\^jDQ)6a8-2#;TDOAmrA0L>NU*mN02XXJc\@Noam3+IX7(ETH-A
%rfd)b$Z":!C:)8[HAtqIVAn2i:.Gp!YRsoG_C,'(b@2q0'Asd'huiFb(NrtOkd`MT))/W[p)`&a#6Sq*p56*X']0Se[p`rtBG_NI
%8G8Kk5'[M;QcLARH/Q=E_lNJCpPXc7=.%OAh1Z':rpag>1oESUj06-#hV0_8/-`Ac6,ToZmd<81+EO\o3#^fH0E63EO:JA$[DZJp
%ILSJ7#L\bDQNgt1lAO7Z9EhI!fU(a=H^gdi#^n$*Qm,kj,oQ/0.ROT+b^q+%'JV3"/N-A*\L>C](20+PZS`1VHj`8?Nn'j?50,YO
%=J^7[L6D&AHN2>`+A!7+[(@?H@#KCeoQUaq'X*)sW@'.9r"F!Q'aCGQ_b=KeaM)=$GYi<Yk+oa+(79>A@B6jNDd*sJYhQa`S8HeO
%27Z^IhEIiPQC]O<fjGi#&QSX`pYOk&8-#oDlEXX#-C\@=Tk-EH%+,FEO0[*[cXjO_h%%bp[G@:1*a-CV*Krg>_3/]%kI8!odehqS
%%kNGVIhR.V$2uFmNoX7;K=;-m=OOs<+p&+g<?123:*rXhAYjY-W>-#<[V]8chn`@cD5'P?gZC+EgVc'#L8<)MG"\)d,o:7sj$5[O
%DcdSo8<_oFFfTYo\Y$ODbrlj^ONE89GNo(6W`[[JMi807_H"8kb#^aq2N<T;$?'&;M@S$r=*\\eR*js!AMP6Lq/<Rp4`E=6!Q,MW
%%FP^j[<QHNH&T[t2Lf-W$l'm''+DqF`7sW(Lo;(/Z>=.:9&1Hk].mb_F2u-DJ;^"b>q`fE-e;NZa[?TuIX;(>bg;lhmod37cnh2(
%&l9kB1P_((]hA*+c8T\=WL*jdD==qB]*e"ce8d94EG7^$c.k'RVdb61X,KI]B9Q[(?he\S]batTR_(7STCu26U!sX:jH5#i.@M!p
%Qo`$9/g_]HC<0flEQR&DqdaR@$a4'-@_/_\)CXN#-dtbg1F@8g/?Ej4+ok`ga>p4@bNKr)'g(pAX3S_\q9U%HO+*2F50-^J,B<A9
%,sXas_d=;ip[Bq!TFW\319\rRpHD5]Fc3BX_E6MPdtU,)6s1tA,BT0c#kIlOAS?oFb3.[Bc.c8fOe*=G_Jj&4",WjWX@gf.9]6A;
%,#q!E\As9pm4r@d>WCU&c$HuYF/Z?'X3RN692iI:j:F_Rm(Nkjb$\\YKcf61YhTsa5cfJunM[Y*f?m9b5\up6Hj^s3AL_@KjCiAO
%RqRCAb-Qo2$R'\-pF31>R@F(pk.P&hY#>TPIT:WYi/Mi2po>olUmm"!"lQoX_NBbbnj:7KE0'/'H@%KDl91?Ihoe0OXs4dg2]%22
%Qh.MFVumoLa&SU1PWX6+HlE$;7r_F;04#+BB>VibM6"&^@"70Qg)LSoNa"uBV5br&qhrjD$8`H@$nMYrr3a:XcJ,0=oUqfc)J?#^
%&TXKh=?cJIm>nT)GN$JoYEO(dD:ViU93dJNJ3H]h'\75="CH\HPMmR=gGK;X^2M8QpGPEXf4;iNcZ8$.?36i.3a-i7H+Zf5YcT#i
%:98rXL3[O#UC0"5]!V#_MF)$^].V8;R;g'._+O/MLr'gD>8;&6[ik^44U:0SYn*YKX"a.["Za-r0-0'o`Vt_'X]c/VdZrC=loBAM
%W&TkX-h[eA"X\YtkR8s/`-ZijX8.R$;:$E]LJ9:&[l+J6?.k_me'E9*\sdc)R5R:7[RD,^Vq5U=E7'r/+jl_6!p?M$.T.rh"='^H
%m??3T-e>^S6<5N<r3J!/q[Vl=7)R1q*AAFl/o9Ts.EuK\'CE_bmk58)B[ml>bKWgMn!,J^EmkacWG3e<pDo9$`LZZLCV-WM7@i3%
%qGADd/:NWtk<-O8LX;qeFcQ]2;#U*0ZfKej\&fr4W>iU_X5Xce8sbT2+GrLN3g&@"0QXUMPqq-ua^]-'o:*.Ei!ZkJIJ*o>aJDEV
%EGj0'8844I8<BdN\kDlClPoR%p&DBr&"L,dG[EEP6dc^I:&N"F][L8-);sd</IA[$.i=dA\?Y/tS&'2Ubsa_V8T6!aq3]pX;,1Os
%nH7NnY^tH<m=a)c#M*KO>c@DB@DAo1b]"<6k)(BCb@AF8eA^cQf\JK!Zd.,T_iX&lTU@Y"7W1,f1jFSZ5E8/]pW59<8NB0I2nq>A
%)2aP]5./X3gVfC^`VUJ,p6B0LV7Z'qT\/O1K]\@S0@+n7h?N_YH$[-i9Hp]-1Iq`?!OH:4fNjiP(e+"UP2X?JMdG4jo$i;ok!ru%
%o82NbF$7UiZQ;W-A$uV/hK*)_d#$LABAW>\;&iZ=QI`:e5p#CC!:Z&/O$XVnB`")Bn<^i4\rqp,AK;WnhL!eH+NIl.M/rMnSRVc(
%<"^^hY@cgMnKhs[Q&_['eR`V[A+o&$gKW&OCg?,^ReU)rf3nS55>tkiS?(_oJK;'^3,5c5_@VPFa+:_%.ZL$sh<Ru*GE<&&\C!EI
%dta&q:MS2+MD4gSREDP_KECt_/`3Z(U6GON.)o)):l=J7)c_\kgR<0qNUFNdb?F$^ksr:Z#]#Cd^43KGVmk*hm',>g<[c%ZQNhe`
%>oZ`MYs)h4@t6:(`Lu.?0lC^V@Hd'ngK'm!^Ag^fpD[gk='I%ePb?kaDlKb%c%i7-QptB*dL!&l*KC6f/KG,/,,H;?o:dE`T$<U.
%m'dbNRh9s3Q8B!/F;oQ5*LDA&Gk*aaG^g:%9p^h2Ds!/-`<!AE]]0KI<LB'r@)0t/]bi(3MkaHEg7,R.Hq;at%VD`b]+lcY+nsiN
%QNLKG?sX]!?mBbJ957VQEhC7m)kX3]g`KlpB4G2FZC9S`9t0)h'h/EClEm-*]_lH\ak<='7cCg?E&Mi"D=F:0A``LVNkoM8A;Km"
%miFmCMe!^Qh*&aPjSa.?`s7.s`PH/k>$Mg6F%]:>5*8EAot]=@Uu^bZgG)la=f(oFrhAG#&h\V$R@%u84?*&Ng8r,Lb,uTmLDdhj
%EKIP4W/\jFO=Y&_om)W/SB^CPg3aNN_+3nRgIJ[6CqDKdTj^,;g]Da'NJY\;F5h$`5(F?YKlH+mJ(0)fSE^jM6PW>9pA]R$_'ILQ
%$hE8pgUnDKYJnEjK\M:]M,)ESP404r-o]6YiJ)PZbe43XG[UL10n>NO/go*G6V!Td.7%:8:Y]\FJoh7N5imSM3:XFW;4-QU<Dd9K
%F/4TU<2ug!;=Uh!#=4Em]4a3*e9WLn[]&-?RGnm>bsf[\/=^QL=KjT,J[`XbGL>Y=;8&T(mmW!TrQmNd78_:G=St'90I#cH)E/#C
%M;ibp4_QN\:;"KE9^nOb`Fqb;c12$MS\`'9:%d7!\E"B=-Z7u2`7`^0DmUQ?1Ftb$5+Ye'W5D7+[p9:]CGj;_QkapVD2Y,dH<D1Q
%Ar]?0B^_7N22b\s3<nLOgP3_NfB[!fT6Thb4*iV?U?:acs.L[LYo#a!Sl,go,Wi`JHX=0m]@LoO-6;Z#!5on!8Q^W6`pLap7.h;6
%).Ua$rL,nqZET>X`7LgCV;lROj^e;j_K29le)\"T9U$dS+?WCse("@A\u3JI4`NB*O1:XQLI^eTK3&D4#WSs;7Y;?>AIsX!=rRqI
%.u8H$Ip&H-^tQ.E!Z+$2Po);T-'Yd,'Jgmb)X[::QU6i"9ShuOOio<<k%E;C0@j_o+EGj="`@))huhW`AclO9B!p0>s1<)NLqO,W
%OSYL4;OTiIjS\%8N]'A`>SuMBL*e!C7+e7(bAAj5au\+"Y5.'n2AntdQ6&!.MS:Fr)T1,ufV1Jd$_rD[.d=LM#M*L7?I2e#SdI29
%Vp:*FS082DXRS7cW%PhEV0/E('5KD1V5#r?s,Vn2$kII;'b+Bc8K!J8+BR%ZB%^`UE&K?R=O8$Tb\R2d#UOc@"QMlU>+"O.[iCOg
%CDT$6BCUQCp=:]4FCV!H@'Oq>ZPiO.8*Ot@FD0es<XX\!a`h3rMo'c%G_rUr#Cspl?'!6+KG'p3Xu>4)6!,#@^o^WQ0sATPhlQ43
%hU\0]j",$oqC$XSpbf-[1+.2fFO#o+91%/%.]$A.E\kc(^j3,oQm%Z."eAF73\Phr,$tQ9dVS?'\Ad.:<>qmLoi2,6Ze29RhR:*,
%OmYV$lV\6ufJh&18]Zt_'DrKf>f\$@hd)da-iouEI8c_rpQBSQA:rer0maHXBpWt,oLp+a.2bb&[\KZhm6Z(308$S3CBr/^'XanD
%R'gY`o"uj^HT9a/Tn5Ki>jG:S$'g$MgtAa4J?<91(JiY6\#h+n$#Onnlsj7BYpofbSqp:Jk<ZQnopoo4'O5:YQAUXV/0=P2o%pE"
%[Osp*Z<U792I0C<f@2=';t>2C+fFR;P'?/,2Zp4)lF,o?[4R7Zpm4!J]k5P`>;iZ'6gT3Mlm;T9)CE;AC(!gHbVJ.$AFL'fps".Y
%Um[,=_8>]G%q@gD1P\psD*@r6Ym+3#!NGDcn=G%p@%+u?k/l@G01nfY9IC$F>sr-'c4ct&kh)lcfDqEa%>q9eK;O)s:gZD7cK;7$
%=T<XDa:RHr3;Oui$d5u`ebSe*dEiI*<<LK0ZhMnRD.NX#i?l6@Rp&0\TT2AZ3^SS;UT/W7EnV:u6C:<;m4Oe9kJ\FZ"MoK;=Y;Ai
%G]5S6NG4rXWl-ftb<e^R^iTU.D!]7_>)X^UqRT$a7GB!hVSgdi?EDCH_75\;cek&Z0KWihNaP=U]),_G%hdi,Y%K[<>i2-Ac]NJC
%2B+?'IE:S]5pAaeN2o]>1b0)#O\&gN^tYsHAA^lbb@k?<$T<\J7`JHkSqemr3T8nk^:sp(59;oO\]:J]cqth+4IdXX$,RR?L(p+j
%f(&&G]fDQ4!O+n]/8[=r%T?j\I^h$R-`n$m2aFE935KrKQP40+R;V-3Xp_l,N#ZEK%>%uLhk>"/nZLmUV@QOJ(nLiqm2@T8R$^kM
%0LWjiO[02'HlLl4+k=B(%\LRP1@W6Za$WA+<ZY+i@oXC,_9gu'pG-M?FUK^g"NS]Eg?iHFhOf%6<J`RbO-Xua!_G5)!Nr)]0T,^9
%]4b#M1/F'e93^GI=RS]1e:1unqSR!.NYRN\(lJk64ULCWhIUB7+=QstDd*qiGVkk)VTFV@+Iu7JNK)[]^b!.h0MSe:e9H6qA59dS
%<<U&4QP&q"BIZ#Q[2E![i0>3CgI@RCMIncA_04gSCK:OOEEeWB%dW-3"se_/0@i>kEtb`TCo#.\9i&Fh!2IulK5d5g%l=Qg';:#S
%/2&dc#/9J>@F(Cg@"k4tn)$1ZB2;UfUVWfX1Bt>e$BVl"F)PEZ+qA@i\E6j4(u'oW>"kPiO,-#afSn4+_FNTf]ruke!UJ!+s67=F
%TA;A/n2H7/Z^4Ep;7I*jVsC2#J)AcY34gIu:0qYVcgI"+IF7orcOELaH5.1$eVYW8%toU(#VdieSr#pa%p@H+"kAgE8RI">U_#e!
%5E]D`=:I_TOUk:;asn![+L'..Qt_SYZ^3khH(/t][hh1IfB8IQW_kDOT9Kr;Ma@W5@p5GK6)OK2I>:"*O]^%U?u9(pfmjG7L"&e"
%QVH8%TTH#EQW2pk#Hb#eYcA#=3!&opg!#_Xn3DK1M7=Ut]*uRE<c/o'MoqYIoM`q$>kY+<`3L=(DTPB?]igh9L3Qq/5=g3J_g#Mu
%4Z.'P^lUkQ63XTT9l[sJgLM^6UXG)]Yl=1^*7=M>%HDMa7MjZE`,2A!)bdiaL4pBYIBtiL2`Y%bpWMp[f(sH/-03(HZ1mS8U_p-,
%g>+]'1[q5;l4JcPbOA0=c4C%pNCRcV$fjCNrB6aH(ME>K!/Y\5EuVr#(9.otH>Idoj)#3Emc0?p:_+Z:bAq!-hAVK1a4Ec[B^BXM
%gF.j]$+Vc7\F2GN_Fe/.YXsN^C\(2='=fd.UeG%9oTXiEDd0fE+q;]TFs=SpXBlqtI'ETi^V@$K//FMEDPShe9VeUWW+<.i0aM]s
%%NSltAYT1BS#`:%00.*P03SR@peN'AYfuBI%'6+7dOIRH&r@L][<`Ese[i4'C\t(7\O+cX1(*fOEPAGS>+hr'0S$.]g?*PXMUWM`
%KOoE`4=O9-N*EtUgR?Y,#4.AoJoh=%Yp]e'f>QkpZnT+"'3'-i7_Z6hK2_"P<dF;Fm6u\5".H0c`OqQK"+?(J7meZ6a[W#a?>D)G
%@Y"(=ERp#eV\1=n=:FTAH7uj/n_fiYhlVgRRd1ahbCbH8#Oojc%_d(/??s</oZl##6Bk:&[OUcURLLKJK<WS`U<&k*<)Llb%DHpj
%nK4T&rDqUj?A9d2`6-''eUdBW^9oO3RG8(5N^-t7<$bdK6_?W+Vq)m\MNCfD=6[]E"Pm6@g[T]r[PaBl4`Fbp%MoerOt^C0;s\uJ
%0d*Hi`[peF$,MSj8VQt_=J<Z(54GF?\tB[jKt6J^c,,'*P?6-0AQi1IBbH,m6$\26E'tra&ThP;#=[14\#juJeG`Qas32OZL59/Q
%`dVI\J.V`*;?I8:Eq6$Jd`bW)J9W#1s5n1X(I`<^!P8;=f\k;5$*st%FNI?NYB@Mmi"$lY:W^_dCENfdQs4jqD43qK2tQiORAiGB
%cZ"@faYE6*Wl]c/!cp8+%I$M;.kADjTFQIX2N<S(T$55FnXA<3$*c>B8WWopCOsj4d(58Ldq5a41TNO2ou5RB#4usbg77q12D&er
%G)Pp_U[@h`dATkGAo)[sN1.E$O<c_%k.o`qU\cYsNM=:R/T$o(Zo%MZYsUE*-3aH)A'9h79ucP-b+c'ADmMVp8<8-^(''RYrR\&.
%H!^0c-SgOZ*dF0J%Bj(5fUafM33&9\`>uss??MIkT#l)^VWTAqn:A'Z'^-$!nSBm5GUq;93(YM]fS>]HUBpErH(Lci?ZVaqeL$2,
%aou0T0_NW3%IL_lXQZauGQGUT&KiX[Q4rR+mhqOM0Nc!QFA0_k(,7ba+>@Js&n#'h.J5*R!*_.IGai><$Rgfg`W_3`)hfD`M$qca
%f'kFf$QGfO4RrDj-[__)lmmJkTXCmfR%Q&#"occ"kn`5cOs[GT[_P,tk,L3/=1bA(?%!Q3,K<e]DBS[:!QNV(^p!2+jbIk<n[;HF
%gnGP$VO>![/UO+9*-&5U1MLXe>?B_Njb"@DNLs>-U=^h'0;2tJdJ-f&nFU+)!.NauA_SuVU4o6k_2LCZk+WkuZgGriihEtC,)"W]
%+Kq?+2/<Rn(@anHD0FoU5?6u2B='T^)ND=H`I+&7J12Hp'SF4NX3r-Ef'/%aO%8F%@qa?j`3fMWXG^Cd1m[Ya"S.JJ29:WLVLft?
%ibb`*i(T#'KIi!UU1#n^jqlPEj7)t90*7'7[%9J%J[K>J3rWH.Cd<EQ!Hm.P_V(=*6'KPFWdlF2firO]6lfCudlXu;S6fk"!.OK2
%R:[:('A3TuMm^`q,;6NQb%u,0XDN#5`Zs&`1"6T]\L[f<+e1#nAE6b[YITY6ZoV_l:5j?<GanV"J:TG7?!%:cauN*-GF/dVbP4.'
%%!OuNZthQ*ER])s*P?dh2I/*ZEEbdWbdCkcFn0:P/+4>5RN=5h3^e(\[cnsK2S>XMakP>17)N\o%C'j_:)]&S/sObh+rbt1f+-9_
%cl?"r-@<=8Rg&KID:SeUN.bFHEB<0>16Lr(4)6a4bVK+`3sp][6^OOVaho\50>BN:SMV?c>ThC0U,a]E26[Go1omC@;L#$KJO!^#
%Zi/=P'7%)CY]F2h-6Yc9,Bs31]"BP61nq?cK!CbhprU+*(tb,+cA-X4-]@,5k/<['G//fH$(UOjJ7KhSS$/dl`r+bHE9,.eLG]U4
%c/=n&e?A99r.2a?a(o`B`2N?E@D<MbVEHm4^tO0or(FkG^&kJQ8!dV@i=I0P=IDhgJQMIr=$>d+'YQMrs+FNjI0W8&L)NF030#e"
%(C`.>5W(Wb?l(YHg9/VU[s<kMTUGbaIl-/A%-Bo68=5O7Vo!#3nM4[%Um@b6`1*g%]0s7m^5>015i7b9-3Y^>aO+>!#Sa5,*$ZQ$
%i/'<-]jt+!QONnmmk-ES^*UM3)+Q4ZAVhGs0;moN9]D[hs"IQ!=acFu.kC@_?8>7:-?2MG.1t*1QL^*mdVC#=")BNHfc.&HhV2ME
%\iPuZ?k&B!E6:fZ^^:e]`?$U!83/KfOr/@.>r;ebMkMDTL=b6e![+;4Uqsmb+JWX'qjS:P[md>'=$?&]<?X2gR9I;%A3Vp823>Ys
%p$tA@N2Z]Mc;U*Q^PnoCiNj5E5:><r]nj_-;ZNn1ere%_i>a7>B;,imZemS%*Plr1?RYEfff:9WA_#Z!ak@L6[UciZ&V)[g73MoJ
%cS]8K"b]4;YutHEVW@3_W`5tcBZW0paa9YU`$mi?K-DS\<EH=]P,WJjTA9FB)_;R8#*jsSs!M/c0(-N+pKi!I64bnUCDEO<1VrZj
%O0VgV(.9,J#UPW].r>OXeF!F,qXQMY3SQhdKn^?Ygo;K<#)T#EZ:8C6/N+4oeW^Ta[TjX7:[_@6MW'+]UFUKDl8S/`*.%;C^tCMB
%(4]t*V&l'e23K/F_`:rkiFE&njQg8V)0u^tf5Np!gT#KWY;)Ise'X%F#;l/uBbued#.C=WguVqQi5e6UdP16U[7T7KV`hAT.T`gr
%*7`63WqDr:30"pF&-n_9q0?/FL[jd:<r$?EMkV@diu5.:47tS-\<ZEE@kK!t>*]qJ+qQYUE-J9mL6n;\o&%)S])gbfrs]\)o]U(]
%A-7D+0mj7UFZCG?1T7'np?uHq9*-m)hXJA7e2W&ON2DF?*F>#1&H`?3'W,Nd0OGF2*OeW#U"uSH,$ngncht`99GUaK/!GB%WE<T+
%L$$dg]Wp/RM$c@%,9YoA>1%Np3cXn>K2:'1R\?`p20'deA%$AnXuMH<H@33$_@lmt>)!VLf*Kt+0"9^tN;R4'7OTIeMY<$-Wm5<f
%0oh1cF>[Vg&TNQ10aI<HJZ8q!ZH'C<3LbRA_R789HjX^"O,nqKF_92@o=uQab)<V%1!,T.^5%[A2?fA&gEIY?g>h_2M+C@kf8^qT
%S&:OTY/f#.QEnWDh!k8.DRGGdBou$<;4_Fdc.ZE$oHNU`[X5glS_HEoO-:&o)6H*j"dh!['lVKVpQ()W9k'Im@)t:m32^_p&JAK.
%F:\F[E><m[8;e-oY)-8_:=O5[a"W8TUEI2\6<Ke+[]%)N[S,pRK4$h3rpbMWWa8V1)&YhM=#Em?do'N&=:N!@3aT((Eo/q9_"u(R
%3eHS$e^m;91iq9oRmO+V'Zj>,<aU*hqkqr!Z9,;QRXk;Ve_A.s<rqis=:Dk8[iEZT-,6=>_.5;n)t`l]2ck^:3nK_kn^.nMR@M$s
%D&(!3'1ZI6l_AV[W+\V3YZ4H2D:NM@$>sL)aM&<TH!=i&herGiZEn:9;YBV&E-CLVS8D!]$'gG%P?`/<+7X:#-Ucb:2TKK,f"RW-
%K(XEKD6"lCd_BV]&(rbb+"V8^R+o8i&?FL0pNr9_'.rSbDd*rBInlB+S+';KS`&eLWBcEMC?.,G#o2t8%U7U]`JLuCi.;QU2T&`=
%V2khE>9uc%G($UY/`mM^`Z-;;idL62riN_2-f4Pq;:j'!DgHoAW_Req^7m*al93jUMVa6l3^d?F`7n;rCpFiYV:I5<E'NCUVt>i9
%Z"nbJ\lI`,rTP(>=OYdf(rVW?Ki,du\51B.9.,IAS,3=J#JuLEe/tUkM<N>2H4\)dB0,6phR4nQ_`:E#r`U!I@,J.s@&KA)i@\b\
%2@mN!\r2&1r(`Ja,_d]W]Zk0.XE>l@+C6F$-n3#65NG_,47cXEg:`Y2jc@:(2"f0KCW,&;2fDn84ce<HLQG5JMuY!o1i1l:m`g0V
%Z'H<q)#)!m3n\am-<(:,fQ5uacP"Dkr=;(AZgUocK0@<0+W]I:G0IC^rPAHNg(pgedDFaZd92kmhE-Q.AYWTPp)Qi.cS4_HM)SLi
%8C9\iT7[XXcq'3bK9soBe%t_i]-"\^4\&-46ZZ^RM^ChL;EXLlgD^p1m0b*k5C>)S?)K_=$J4Z[]+&o@XfMGFs2Q5\k5Oi,rhoeq
%hu)SCro_&rci<S1s7DA%qTHYQp-4*$5N;_@iG\R2l*j=bo,n#*%t>i(s1a*\hu'surQ"s0s8UE34o"V5h1U:L^UF17n,Djlr;>ed
%s883Jrp_?5mD&\Mhu3A#s3%&6rZD.;QTtDmhu3/=rp-2+qpRe/j$3LcTDmrus3LYIIf$alr:uubje)PCkMQ:7s8Jqr(DQe0s2!Ul
%mD&PUrg,kIc2S%2`(j>~>
%AI9_PrivateDataEnd
